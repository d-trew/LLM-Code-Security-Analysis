[
    {
        "problem_name": "Coin Jam",
        "problem_statement": "Ajamcoinis a string ofN≥ 2 digits with the following\nproperties:\nNot every string of0s and1s is a jamcoin. For\nexample,101is not a jamcoin; its interpretation in base 2 is 5,\nwhich is prime. But the string1001is a jamcoin: in bases 2\nthrough 10, its interpretation is 9, 28, 65, 126, 217, 344, 513, 730, and 1001,\nrespectively, and none of those is prime.\nWe hear that there may be communities that use jamcoins as a form of currency.\nWhen sending someone a jamcoin, it is polite to prove that the jamcoin is\nlegitimate by including a nontrivial divisor of that jamcoin's interpretation\nin each base from 2 to 10. (A nontrivial divisor for a positive integerKis some positive integer other than 1 orKthat evenly dividesK.) For convenience, these divisors must be expressed in base 10.\nFor example, for the jamcoin1001mentioned above, a possible set\nof nontrivial divisors for the base 2 through 10 interpretations of the jamcoin\nwould be: 3, 7, 5, 6, 31, 8, 27, 5, and 77, respectively.\nCan you produceJdifferent jamcoins of lengthN, along with\nproof that they are legitimate?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with two integersNandJ.\nFor each test case, outputJ+1 lines. The first line must consist of\nonlyCase #x:, wherexis the test case number\n(starting from 1). Each of the lastJlines must consist of a jamcoin of\nlengthNfollowed by nine integers. The i-th of those nine integers\n(counting starting from 1) must be a nontrivial divisor of the jamcoin when\nthe jamcoin is interpreted in base i+1.\nAll of these jamcoins must be different. You cannot submit the same jamcoin\nin two different lines, even if you use a different set of divisors each time.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.T= 1. (There will be only one test case.)It is guaranteed that at leastJdistinct jamcoins of lengthNexist.\nN= 16.J= 50.\nN= 32.J= 500.\nNote that, unusually for a Code Jam problem, you already know the exact\ncontents of each input file. For example, the Small dataset's input file will\nalways be exactly these two lines:\nSo, you can consider doing some computation before actually downloading an\ninput file and starting the clock.\nIn this sample case, we have used very small values ofNandJfor ease of explanation. Note that this sample case would not appear in either\nthe Small or Large datasets.\nThis is only one of multiple valid solutions. Other sets of jamcoins could have\nbeen used, and there are many other possible sets of nontrivial base 10\ndivisors. Some notes:\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with two integersNandJ.",
        "output_description": "For each test case, outputJ+1 lines. The first line must consist of\nonlyCase #x:, wherexis the test case number\n(starting from 1). Each of the lastJlines must consist of a jamcoin of\nlengthNfollowed by nine integers. The i-th of those nine integers\n(counting starting from 1) must be a nontrivial divisor of the jamcoin when\nthe jamcoin is interpreted in base i+1.",
        "sample_input": "1\n6 3",
        "sample_output": "Case #1:\n100011 5 13 147 31 43 1121 73 77 629\n111111 21 26 105 1302 217 1032 513 13286 10101\n111001 3 88 5 1938 7 208 3 20 11",
        "source": "2016\\qualification_round\\coin_jam"
    },
    {
        "problem_name": "Counting Sheep",
        "problem_statement": "Bleatrix Trotter the sheep has devised a strategy that helps her fall asleep\nfaster. First, she picks a numberN. Then she starts namingN, 2\n×N, 3 ×N, and so on. Whenever she names a number,\nshe thinks about all of the digits in that number. She keeps track of which\ndigits (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9) she has seen at least once so far\nas part of any number she has named. Once she has seen each of the ten digits\nat least once, she will fall asleep.\nBleatrix must start withNand must always name (i+ 1) ×Ndirectly afteri×N. For example, suppose that\nBleatrix picksN= 1692. She would count as follows:\nWhat is the last number that she will name before falling asleep? If she will\ncount forever, printINSOMNIAinstead.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a single integerN,\nthe number Bleatrix has chosen.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe last number that Bleatrix will name before falling asleep, according to\nthe rules described in the statement.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.\n0 ≤N≤ 200.\n0 ≤N≤ 106.\nIn Case #1, since 2 × 0 = 0, 3 × 0 = 0, and so on, Bleatrix will never see any\ndigit other than 0, and so she will count forever and never fall asleep. Poor\nsheep!\nIn Case #2, Bleatrix will name 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The 0 will be\nthe last digit needed, and so she will fall asleep after 10.\nIn Case #3, Bleatrix will name 2, 4, 6... and so on. She will not see the\ndigit 9 in any number until 90, at which point she will fall asleep. By that\npoint, she will have already seen the digits 0, 1, 2, 3, 4, 5, 6, 7, and 8,\nwhich will have appeared for the first time in the numbers 10, 10, 2, 30, 4,\n50, 6, 70, and 8, respectively.\nIn Case #4, Bleatrix will name 11, 22, 33, 44, 55, 66, 77, 88, 99, 110 and then\nfall asleep.\nCase #5 is the one described in the problem statement. Note that it would only\nshow up in the Large dataset, and not in the Small dataset.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a single integerN,\nthe number Bleatrix has chosen.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe last number that Bleatrix will name before falling asleep, according to\nthe rules described in the statement.",
        "sample_input": "5\n0\n1\n2\n11\n1692",
        "sample_output": "Case #1: INSOMNIA\nCase #2: 10\nCase #3: 90\nCase #4: 110\nCase #5: 5076",
        "source": "2016\\qualification_round\\counting_sheep"
    },
    {
        "problem_name": "Fractiles",
        "problem_statement": "Long ago, the Fractal civilization created artwork consisting of linear\nrows of tiles. They had two types of tile that they could use: gold\n(G) and lead (L).\nEach piece of Fractal artwork is based on two parameters: an original sequence\nofKtiles, and a complexityC. For a given original\nsequence, the artwork with complexity 1 is just that original sequence,\nand the artwork with complexityX+1 consists of the artwork with\ncomplexityX, transformed as follows:replace eachLtile in the complexityXartwork with\nanother copy of the original sequencereplace eachGtile in the complexityXartwork withKGtilesFor example, for an original sequence ofLGL, the pieces of\nartwork with complexity 1 through 3 are:C= 1:LGL(which is just the original sequence)C= 2:LGLGGGLGLC= 3:LGLGGGLGLGGGGGGGGGLGLGGGLGLHere's an illustration of how the artwork with complexity 2 is generated from\nthe artwork with complexity 1:You have just discovered a piece of Fractal artwork, but the tiles are too\ndirty for you to tell what they are made of. Because you are an expert\narchaeologist familiar with the local Fractal culture, you know the values ofKandCfor the artwork, but you do not know the original\nsequence. Since gold is exciting, you would like to know whether there is at\nleast oneGtile in the artwork. Your budget allows you to hireSgraduate students, each of whom can clean one tile of your choice (out\nof theKCtiles in the artwork) to see whether the\ntile isGorL.Is it possible for you to choose a set of no more thanSspecific tiles\nto clean, such thatno matter whatthe original pattern was, you will be\nable to know for sure whether at least oneGtile is present in\nthe artwork? If so, which tiles should you clean?InputThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with three integers:K,C, andS.OutputFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\neitherIMPOSSIBLEif no set of tiles will answer your question, or\na list of between 1 andSpositive integers, which are the positions of\nthe tiles that will answer your question. The tile positions are numbered from\n1 for the leftmost tile toKCfor the rightmost tile.\nYour chosen positions may be in any order, but they must all be different.If there are multiple valid sets of tiles, you may output any of them. Remember that\nonce you submit a Small and it is accepted, you will not be able to download and submit another\nSmall input. Seethe FAQfor a\nmore thorough explanation.This reminder won't appear in problems in later rounds.LimitsTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤K≤ 100.1 ≤C≤ 100.KC≤ 1018.Small dataset (Test Set 1 - Visible)S=K.Large dataset (Test Set 2 - Hidden)1 ≤S≤K.SampleSample Inputsave_altcontent_copyCopied!5\n2 3 2\n1 1 1\n2 1 1\n2 1 2\n3 2 3Sample Outputsave_altcontent_copyCopied!Case #1: 2\nCase #2: 1\nCase #3: IMPOSSIBLE\nCase #4: 1 2\nCase #5: 2 6Note: for some of these sample cases, other valid solutions exist.In sample case #1, there are four possible original sequences:GG,GL,LG, andLL. They would produce the\nfollowing artwork, respectively:Original sequenceGG:GGGGGGGGOriginal sequenceGL:GGGGGGGLOriginal sequenceLG:LGGGGGGGOriginal sequenceLL:LLLLLLLLOne valid solution is to just look at tile #2. If tile #2 turns out to beG, then you will know for sure the artwork contains at least oneG. (You will not know whether the original sequence isGG,GL, orLG, but that doesn't matter.)\nIf tile #2 turns out to beL, then you will know that the original\nsequence must beLL, so there are noGs in the\nartwork. So2is a valid solution.On the other hand, it would not be valid to just look at tile #1. If it turns\nout to beL, you will only know that the original sequence could\nhave been eitherLGorLL. If the original sequence\nisLG, there is at least oneGin the artwork, but if\nthe original sequence isLL, there are noGs. So1would not be a valid solution.Note that1 2is also a valid solution, because tile #2 already\nprovides all the information you need.1 2 3is not a valid\nsolution, because it uses too many tiles.In sample case #2, the artwork must consist of only one tile: eitherGorL. Looking at that tile will trivially tell you\nwhether or not the artwork has aGin it.In sample case #3, which would not appear in the Small dataset, the artwork\nmust be eitherGG,GL,LG, orLL. You can only look at one tile, and neither of them on its own\nis enough to answer the question. If you seeLfor tile #1, you\nwill not know whether the artwork isLGorLL, so you\nwill not know whether anyGs are present. If you seeLfor tile #2, you will not know whether the artwork isGLorLL, so you will not know whether anyGs are present.Sample case #4 is like sample case #3, but with access to one more tile. Now\nyou can just look at the entire artwork.In sample case #5, there are eight possible original sequences, and they would\nproduce the following artwork:Original sequenceGGG:GGGGGGGGGOriginal sequenceGGL:GGGGGGGGLOriginal sequenceGLG:GGGGLGGGGOriginal sequenceGLL:GGGGLLGLLOriginal sequenceLGG:LGGGGGGGGOriginal sequenceLGL:LGLGGGLGLOriginal sequenceLLG:LLGLLGGGGOriginal sequenceLLL:LLLLLLLLLOne valid solution is to look at tiles #2 and #6. If they both turn out to\nbeLs, the artwork must be allLs. Otherwise, there\nmust at least oneG. Note that1 2would not be a\nvalid solution, because even if those tiles both turn out to beLs,\nthat does not rule out an original sequence ofLLG.6 2would be a valid solution, since the order of the positions\nin your solution does not matter.\nFor example, for an original sequence ofLGL, the pieces of\nartwork with complexity 1 through 3 are:\nHere's an illustration of how the artwork with complexity 2 is generated from\nthe artwork with complexity 1:\n\nYou have just discovered a piece of Fractal artwork, but the tiles are too\ndirty for you to tell what they are made of. Because you are an expert\narchaeologist familiar with the local Fractal culture, you know the values ofKandCfor the artwork, but you do not know the original\nsequence. Since gold is exciting, you would like to know whether there is at\nleast oneGtile in the artwork. Your budget allows you to hireSgraduate students, each of whom can clean one tile of your choice (out\nof theKCtiles in the artwork) to see whether the\ntile isGorL.\nIs it possible for you to choose a set of no more thanSspecific tiles\nto clean, such thatno matter whatthe original pattern was, you will be\nable to know for sure whether at least oneGtile is present in\nthe artwork? If so, which tiles should you clean?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with three integers:K,C, andS.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\neitherIMPOSSIBLEif no set of tiles will answer your question, or\na list of between 1 andSpositive integers, which are the positions of\nthe tiles that will answer your question. The tile positions are numbered from\n1 for the leftmost tile toKCfor the rightmost tile.\nYour chosen positions may be in any order, but they must all be different.\nIf there are multiple valid sets of tiles, you may output any of them. Remember that\nonce you submit a Small and it is accepted, you will not be able to download and submit another\nSmall input. Seethe FAQfor a\nmore thorough explanation.This reminder won't appear in problems in later rounds.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤K≤ 100.1 ≤C≤ 100.KC≤ 1018.\nS=K.\n1 ≤S≤K.\nNote: for some of these sample cases, other valid solutions exist.\nIn sample case #1, there are four possible original sequences:GG,GL,LG, andLL. They would produce the\nfollowing artwork, respectively:\nOne valid solution is to just look at tile #2. If tile #2 turns out to beG, then you will know for sure the artwork contains at least oneG. (You will not know whether the original sequence isGG,GL, orLG, but that doesn't matter.)\nIf tile #2 turns out to beL, then you will know that the original\nsequence must beLL, so there are noGs in the\nartwork. So2is a valid solution.\nOn the other hand, it would not be valid to just look at tile #1. If it turns\nout to beL, you will only know that the original sequence could\nhave been eitherLGorLL. If the original sequence\nisLG, there is at least oneGin the artwork, but if\nthe original sequence isLL, there are noGs. So1would not be a valid solution.\nNote that1 2is also a valid solution, because tile #2 already\nprovides all the information you need.1 2 3is not a valid\nsolution, because it uses too many tiles.\nIn sample case #2, the artwork must consist of only one tile: eitherGorL. Looking at that tile will trivially tell you\nwhether or not the artwork has aGin it.\nIn sample case #3, which would not appear in the Small dataset, the artwork\nmust be eitherGG,GL,LG, orLL. You can only look at one tile, and neither of them on its own\nis enough to answer the question. If you seeLfor tile #1, you\nwill not know whether the artwork isLGorLL, so you\nwill not know whether anyGs are present. If you seeLfor tile #2, you will not know whether the artwork isGLorLL, so you will not know whether anyGs are present.\nSample case #4 is like sample case #3, but with access to one more tile. Now\nyou can just look at the entire artwork.\nIn sample case #5, there are eight possible original sequences, and they would\nproduce the following artwork:\nOriginal sequenceGGG:GGGGGGGGGOriginal sequenceGGL:GGGGGGGGLOriginal sequenceGLG:GGGGLGGGGOriginal sequenceGLL:GGGGLLGLLOriginal sequenceLGG:LGGGGGGGGOriginal sequenceLGL:LGLGGGLGLOriginal sequenceLLG:LLGLLGGGGOriginal sequenceLLL:LLLLLLLLLOne valid solution is to look at tiles #2 and #6. If they both turn out to\nbeLs, the artwork must be allLs. Otherwise, there\nmust at least oneG. Note that1 2would not be a\nvalid solution, because even if those tiles both turn out to beLs,\nthat does not rule out an original sequence ofLLG.6 2would be a valid solution, since the order of the positions\nin your solution does not matter.\nOne valid solution is to look at tiles #2 and #6. If they both turn out to\nbeLs, the artwork must be allLs. Otherwise, there\nmust at least oneG. Note that1 2would not be a\nvalid solution, because even if those tiles both turn out to beLs,\nthat does not rule out an original sequence ofLLG.6 2would be a valid solution, since the order of the positions\nin your solution does not matter.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with three integers:K,C, andS.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\neitherIMPOSSIBLEif no set of tiles will answer your question, or\na list of between 1 andSpositive integers, which are the positions of\nthe tiles that will answer your question. The tile positions are numbered from\n1 for the leftmost tile toKCfor the rightmost tile.\nYour chosen positions may be in any order, but they must all be different.",
        "sample_input": "5\n2 3 2\n1 1 1\n2 1 1\n2 1 2\n3 2 3",
        "sample_output": "Case #1: 2\nCase #2: 1\nCase #3: IMPOSSIBLE\nCase #4: 1 2\nCase #5: 2 6",
        "source": "2016\\qualification_round\\fractiles"
    },
    {
        "problem_name": "Revenge of the Pancakes",
        "problem_statement": "The Infinite House of Pancakes has just introduced a new kind of pancake!\nIt has a happy face made of chocolate chips on one side (the \"happy side\"), and\nnothing on the other side (the \"blank side\").\nYou are the head waiter on duty, and the kitchen has just given you a stack of\npancakes to serve to a customer. Like any good pancake server, you have X-ray\npancake vision, and you can see whether each pancake in the stack has the happy\nside up or the blank side up. You think the customer will be happiest if every\npancake is happy side up when you serve them.\nYou know the following maneuver: carefully lift up some number of pancakes\n(possibly all of them) from the top of the stack, flip that entire group over,\nand then put the group back down on top of any pancakes that you did not lift\nup. When flipping a group of pancakes, you flip the entire group in one motion;\nyou donotindividually flip each pancake. Formally: if we number the\npancakes 1, 2, ...,Nfrom top to bottom, you choose the topipancakes to flip. Then, after the flip, the stack isi,i-1, ...,\n2, 1,i+1,i+2, ...,N. Pancakes 1, 2, ...,inow\nhave the opposite side up, whereas pancakesi+1,i+2, ...,Nhave the same side up that they had up before.\nFor example, let's denote the happy side as+and the blank side\nas-. Suppose that the stack, starting from the top, is--+-. One valid way to execute the maneuver would be to pick up\nthe top three, flip the entire group, and put them back down on the remaining\nfourth pancake (which would stay where it is and remain unchanged). The new\nstate of the stack would then be-++-. The other valid ways would\nbe to pick up and flip the top one, the top two, or all four. It would not be\nvalid to choose and flip the middle two or the bottom one, for example; you can\nonly take some number off the top.\nYou will not serve the customer until every pancake is happy side up, but you\ndon't want the pancakes to get cold, so you have to act fast! What is the\nsmallest number of times you will need to execute the maneuver to get all the\npancakes happy side up, if you make optimal choices?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringS, each\ncharacter of which is either+(which represents a pancake that is\ninitially happy side up) or-(which represents a pancake that is\ninitially blank side up). The string, when read left to right, represents the\nstack when viewed from top to bottom.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe minimum number of times you will need to execute the maneuver to get all\nthe pancakes happy side up.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.Every character inSis either+or-.\n1 ≤ length ofS≤ 10.\n1 ≤ length ofS≤ 100.\nIn Case #1, you only need to execute the maneuver once, flipping the first (and\nonly) pancake.\nIn Case #2, you only need to execute the maneuver once, flipping only the first\npancake.\nIn Case #3, you must execute the maneuver twice. One optimal solution is to\nflip only the first pancake, changing the stack to--, and then\nflip both pancakes, changing the stack to++. Notice that you\ncannot just flip the bottom pancake individually to get a one-move solution;\nevery time you execute the maneuver, you must select a stack starting from the\ntop.\nIn Case #4, all of the pancakes are already happy side up, so there is no need\nto do anything.\nIn Case #5, one valid solution is to first flip the entire stack of pancakes to\nget+-++, then flip the top pancake to get--++, then\nfinally flip the top two pancakes to get++++.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringS, each\ncharacter of which is either+(which represents a pancake that is\ninitially happy side up) or-(which represents a pancake that is\ninitially blank side up). The string, when read left to right, represents the\nstack when viewed from top to bottom.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe minimum number of times you will need to execute the maneuver to get all\nthe pancakes happy side up.",
        "sample_input": "5\n-\n-+\n+-\n+++\n--+-",
        "sample_output": "Case #1: 1\nCase #2: 1\nCase #3: 2\nCase #4: 0\nCase #5: 3",
        "source": "2016\\qualification_round\\revenge_of_the_pancakes"
    },
    {
        "problem_name": "BFFs",
        "problem_statement": "You are a teacher at the brand new Little Coders kindergarten. You haveNkids in your class, and each one has a different student ID number\nfrom 1 throughN. Every kid in your class has a single best friend\nforever (BFF), and you know who that BFF is for each kid. BFFs are not\nnecessarily reciprocal -- that is, B being A's BFF does not\nimply that A is B's BFF.\nYour lesson plan for tomorrow includes an activity in which the participants\nmust sit in a circle. You want to make the activity as successful as possible\nby building the largest possible circle of kids such that each kid in the\ncircle is sitting directly next to their BFF, either to the left or to the right.\nAny kids not in the circle will watch the activity without participating.\nWhat is the greatest number of kids that can be in the circle?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines. The first line of a\ntest case contains a single integerN, the total number of kids in the\nclass. The second line of a test case containsNintegersF1,F2, ...,FN, whereFiis the student ID number of the BFF of the kid with student ID i.\nFor each test case, output one line containing \"Case #x: y\", where x is the\ntest case number (starting from 1) and y is the maximum number of kids in the\ngroup that can be arranged in a circle such that each kid in the circle is\nsitting next to his or her BFF.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤Fi≤N, for all i.Fi≠ i, for all i. (No kid is their own BFF.)\n3 ≤N≤ 10.\n3 ≤N≤ 1000.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines. The first line of a\ntest case contains a single integerN, the total number of kids in the\nclass. The second line of a test case containsNintegersF1,F2, ...,FN, whereFiis the student ID number of the BFF of the kid with student ID i.",
        "output_description": "For each test case, output one line containing \"Case #x: y\", where x is the\ntest case number (starting from 1) and y is the maximum number of kids in the\ngroup that can be arranged in a circle such that each kid in the circle is\nsitting next to his or her BFF.",
        "sample_input": "4\n4\n2 3 4 1\n4\n3 3 4 1\n4\n3 3 4 3\n10\n7 8 10 10 9 2 9 6 3 3",
        "sample_output": "Case #1: 4\nCase #2: 3\nCase #3: 3\nCase #4: 6",
        "source": "2016\\round_1a\\bffs"
    },
    {
        "problem_name": "Rank and File",
        "problem_statement": "When Sergeant Argus's army assembles for drilling, they stand in the shape of\nanNbyNsquare grid, with exactly one soldier in each cell.\nEach soldier has a certain height.\nArgus believes that it is important to keep an eye on all of his soldiers at\nall times. Since he likes to look at the grid from the upper left, he requires\nthat:\nAlthough no two soldiers in the same row or column may have the same height,\nit is possible for multiple soldiers in the grid to have the same height.\nSince soldiers sometimes train separately with their row or their column, Argus\nhas asked you to make a report consisting of 2*Nlists of the soldiers'\nheights: one representing each row (in left-to-right order) and column (in\ntop-to-bottom order). As you surveyed the soldiers, you only had small pieces\nof paper to write on, so you wrote each list on a separate piece of paper.\nHowever, on your way back to your office, you were startled by a loud bugle\nblast and you dropped all of the pieces of paper, and the wind blew one away\nbefore you could recover it! The other pieces of paper are now in no particular\norder, and you can't even remember which lists represent rows and which\nrepresent columns, since you didn't write that down.\nYou know that Argus will make you do hundreds of push-ups if you give him an\nincomplete report. Can you figure out what the missing list is?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerN, followed\nby 2*N-1 lines ofNintegers each, representing the lists you\nhave, as described in the statement. It is guaranteed that these lists\nrepresent all but one of the rows and columns from a valid grid, as described\nin the statement.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) and y is a list ofNintegers in strictly increasing order, representing the missing list.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 50.1 ≤ all heights ≤ 2500.The integers on each line will be in strictly increasing order.It is guaranteed that a unique valid answer exists.\n2 ≤N≤ 10.\n2 ≤N≤ 50.\nIn the sample case, the arrangement must be either this:\nor this:\nIn either case, the missing list is3 4 6.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerN, followed\nby 2*N-1 lines ofNintegers each, representing the lists you\nhave, as described in the statement. It is guaranteed that these lists\nrepresent all but one of the rows and columns from a valid grid, as described\nin the statement.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) and y is a list ofNintegers in strictly increasing order, representing the missing list.",
        "sample_input": "1\n3\n1 2 3\n2 3 5\n3 5 6\n2 3 4\n1 2 3",
        "sample_output": "Case #1: 3 4 6",
        "source": "2016\\round_1a\\rank_and_file"
    },
    {
        "problem_name": "The Last Word",
        "problem_statement": "On the game showThe Last Word, the host begins a round by showing the\ncontestant a stringSof uppercase English letters. The contestant\nhas a whiteboard which is initially blank. The host will then present the\ncontestant with the letters ofS, one by one, in the order in which they\nappear inS. When the host presents the first letter, the contestant\nwrites it on the whiteboard; this counts as the firstwordin the game\n(even though it is only one letter long). After that, each time the host\npresents a letter, the contestant must write it at the beginning or the end of\nthe word on the whiteboard before the host moves on to the next letter (or to\nthe end of the game, if there are no more letters).\nFor example, forS=CAB, after writing the wordCon the whiteboard, the contestant could make one of the\nfollowing four sets of choices:\nThe word is called thelast wordwhen the contestant finishes writing\nall of the letters fromS, under the given rules. The contestant wins\nthe game if their last word is the last of an alphabetically sorted list of all\nof the possible last words that could have been produced. For the example\nabove, the winning last word isCAB(which happens to be the\nsame as the original word). For a game withS=JAM, the\nwinning last word isMJA.\nYou are the next contestant on this show, and the host has just showed you the\nstringS. What's the winning last word that you should produce?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringS.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe winning last word, as described in the statement.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.\n1 ≤ length ofS≤ 15.\n1 ≤ length ofS≤ 1000.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringS.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe winning last word, as described in the statement.",
        "sample_input": "7\nCAB\nJAM\nCODE\nABAAB\nCABCBBABC\nABCABCABC\nZXCASDQWE",
        "sample_output": "Case #1: CAB\nCase #2: MJA\nCase #3: OCDE\nCase #4: BBAAA\nCase #5: CCCABBBAB\nCase #6: CCCBAABAB\nCase #7: ZXCASDQWE",
        "source": "2016\\round_1a\\the_last_word"
    },
    {
        "problem_name": "Close Match",
        "problem_statement": "You are attending the most important game in sports history. The Oceania Coders\nare playing the Eurasia Jammers in the Centrifugal Bumble-Puppy world finals.\nUnfortunately, you were sleep deprived from all the anticipation, so you fell\nasleep during the game!\nThe scoreboard is currently displaying both scores, perhaps with one or more\nleading zeroes (because the scoreboard displays a fixed number of digits).\nWhile you were asleep, some of the lights on the scoreboard were damaged by\nstrong ball hits, so one or more of the digits in one or both scores are not\nbeing displayed.\nYou think close games are more exciting, and you would like to imagine that the\nscores are as close as possible. Can you fill in all of the missing digits in a\nway that minimizes the absolute difference between the scores? If there is more\nthan one way to attain the minimum absolute difference, choose the way that\nminimizes the Coders' score. If there is more than one way to attain the\nminimum absolute difference while also minimizing the Coders' score, choose\nthe way that minimizes the Jammers' score.\nThe first line of the input gives the number of test cases,T.Tcases follow. Each case consists of one line with two non-empty stringsCandJof the same length, composed only of decimal digits and\nquestion marks, representing the score as you see it for the Coders and the\nJammers, respectively. There will be at least one question mark in each test\ncase.\nFor each test case, output one line containingCase #x: c j, wherexis the test case number (starting from 1),cisCwith the question marks replaced by digits, andjisJwith the question marks replaced by digits, such that the absolute\ndifference between the integers represented bycandjis minimized. If there are multiple solutions with the same\nabsolute difference, use the one in whichcis minimized; if there\nare multiple solutions with the same absolute difference and the same value ofc, use the one in whichjis minimized.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 200.CandJhave the same length.\n1 ≤ the length ofCandJ≤ 3.\n1 ≤ the length ofCandJ≤ 18.\nIn sample case #4, note that the answer cannot be15 10; that\nminimizes the absolute difference, but does not minimize the Coders' score.\nNor can the answer be05 10; that minimizes the absolute\ndifference and the Coders' score, but does not minimize the Jammers' score.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tcases follow. Each case consists of one line with two non-empty stringsCandJof the same length, composed only of decimal digits and\nquestion marks, representing the score as you see it for the Coders and the\nJammers, respectively. There will be at least one question mark in each test\ncase.",
        "output_description": "For each test case, output one line containingCase #x: c j, wherexis the test case number (starting from 1),cisCwith the question marks replaced by digits, andjisJwith the question marks replaced by digits, such that the absolute\ndifference between the integers represented bycandjis minimized. If there are multiple solutions with the same\nabsolute difference, use the one in whichcis minimized; if there\nare multiple solutions with the same absolute difference and the same value ofc, use the one in whichjis minimized.",
        "sample_input": "4\n1? 2?\n?2? ??3\n? ?\n?5 ?0",
        "sample_output": "Case #1: 19 20\nCase #2: 023 023\nCase #3: 0 0\nCase #4: 05 00",
        "source": "2016\\round_1b\\close_match"
    },
    {
        "problem_name": "Getting the Digits",
        "problem_statement": "You just made a new friend at an international puzzle conference, and you\nasked for a way to keep in touch. You found the following note slipped under\nyour hotel room door the next day:\n\"Salutations, new friend! I have replaced every digit of my phone number with\nits spelled-out uppercase English representation (\"ZERO\", \"ONE\", \"TWO\",\n\"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\" for the digits 0\nthrough 9, in that order), and then reordered all of those letters in some way\nto produce a stringS. It's up to you to useSto figure out how\nmany digits are in my phone number and what those digits are, but I will tell\nyou that my phone number consists of those digits in nondecreasing order. Give\nme a call... if you can!\"\nYou would to like to call your friend to tell him that this is an obnoxious way\nto give someone a phone number, but you need the phone number to do that! What\nis it?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringSof\nuppercase English letters.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na string of digits: the phone number.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.A unique answer is guaranteed to exist.\n3 ≤ length ofS≤ 20.\n3 ≤ length ofS≤ 2000.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringSof\nuppercase English letters.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na string of digits: the phone number.",
        "sample_input": "4\nOZONETOWER\nWEIGHFOXTOURIST\nOURNEONFOE\nETHER",
        "sample_output": "Case #1: 012\nCase #2: 2468\nCase #3: 114\nCase #4: 3",
        "source": "2016\\round_1b\\getting_the_digits"
    },
    {
        "problem_name": "Technobabble",
        "problem_statement": "Every year, your professor posts a blank sign-up sheet for a prestigious\nscientific research conference on her door. If a student wants to give a\nlecture at the conference, they choose a two-word topic that is not already on\nthe sheet and write it on the sheet. Once the deadline has passed, the\nprofessor has one of her grad students put the topics in a random order, to\navoid biasing for or against students who signed up earlier. Then she presents\nthe topics to you for review.\nSince the snacks at the conference are excellent, some students try to fake\ntheir way into the conference. They choose the first word of some topic\nalready on the sheet and the second word of some topic already on the sheet,\nand combine them (putting the first word first, and the second word second) to\ncreate a new \"topic\" (as long as it isn't already on the sheet). Since your\nprofessor is open-minded, sometimes this strategy actually works!\nThe fakers are completely unoriginal and can't come up with any new first or\nsecond words on their own; they must use existing ones from the sheet.\nMoreover, they won't try to use an existing first word as their own second word\n(unless the word also already exists on the sheet as a second word), or vice\nversa.\nYou have a list of allNof the submitted topics, in some arbitrary\norder; you don't know the order in which they were actually written on the\nsheet. What's the largest number of them that could have been faked?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerN, followed\nbyNlines, each of which represents a different topic and has two\nstrings of uppercase English letters: the two words of the topic, in order.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nan integer: the largest number of topics that could have possibly been faked.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤ length of each word ≤ 20.No topic is repeated within a case.\n1 ≤N≤ 16.\n1 ≤N≤ 1000.\nIn sample case #1, one possibility is that the topics were added to the sheet\nin this order:\nQUAIL BEHAVIOR(real)HYDROCARBON COMBUSTION(real)QUAIL COMBUSTION(fake)\nThere is no scenario in which more than one of the topics can be fake.\nIn sample case #2, all of the topics must be real. Whatever order they were\nwritten in, at no point would it have been possible to use existing words to\ncreate a new topic that was not already on the list.\nIn sample case #3, neither topic can be fake. For example, ifINTERGALACTIC PLANETARYhad been the first and only topic written\non the sheet, a faker could only have usedINTERGALACTICas the\nfirst word of a new topic and could only have usedPLANETARYas\nthe second word of a new topic... but the only topic that the faker could have\nformed would have beenINTERGALACTIC PLANETARY, which would have\nbeen off limits since it was already on the sheet. SoPLANETARY INTERGALACTICmust have also been a real topic.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerN, followed\nbyNlines, each of which represents a different topic and has two\nstrings of uppercase English letters: the two words of the topic, in order.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nan integer: the largest number of topics that could have possibly been faked.",
        "sample_input": "3\n3\nHYDROCARBON COMBUSTION\nQUAIL BEHAVIOR\nQUAIL COMBUSTION\n3\nCODE JAM\nSPACE JAM\nPEARL JAM\n2\nINTERGALACTIC PLANETARY\nPLANETARY INTERGALACTIC",
        "sample_output": "Case #1: 1\nCase #2: 0\nCase #3: 0",
        "source": "2016\\round_1b\\technobabble"
    },
    {
        "problem_name": "Fashion Police",
        "problem_statement": "You are so excited about the 2016 Code Jam World Finals that you just moved to\nNew York. You have brought alongJdifferent jackets (numbered 1 throughJ),Pdifferent pairs of pants (numbered 1 throughP), andSdifferent shirts (numbered 1 throughS). You have at least as\nmany shirts as pairs of pants, and at least as many pairs of pants as jackets.\n(J≤P≤S.)\nEvery day, you will pick one jacket, one pair of pants, and one shirt to wear\nas anoutfit. You wash all of your garments every night so all of your\ngarments are available to use each day.\nIn New York, the Fashion Police officers are always watching and keeping track\nof what everyone wears every day. If they find out that you have worn the exact\nsame outfit twice, you will immediately be taken to the Fashion Jail on 5th\nAvenue for a mandatory makeover; you definitely want to avoid that! You will\nalso immediately be taken to Fashion Jail if they find out that you have worn\nthe same two-garmentcombinationmore thanKtimes in total. A\ncombination consists of a particular jacket worn with a particular pair of\npants, a particular jacket worn with a particular shirt, or a particular pair\nof pants worn with a particular shirt. For example, in the set of outfits\n(jacket 1, pants 2, shirt 3) and (jacket 1, pants 1, shirt 3), the combination\n(jacket 1, shirt 3) appears twice, whereas the combination (pants 1, shirt 3)\nonly appears once.\nYou will wear one outfit per day. Can you figure out the largest possible\nnumber of days you can avoid being taken to Fashion Jail and produce a list of\noutfits to use each day?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with four integersJ,P,S, andK.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nan integer: the maximum number of days you will be able to avoid being taken to\nFashion Jail. Then outputymore lines, each of which consists of\nthree integers: the numbers of the jacket, pants, and shirt (in that order) for\none day's outfit. The list of outfits can be in any order, but the outfits must\nnot cause you to go to Fashion Jail as described in the statement above.\nIf multiple answers are possible, you may output any of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤J≤P≤S.1 ≤K≤ 10.\nS≤ 3.\nS≤ 10.\nThe sample output displays one set of answers to the sample cases. Other\nanswers may be possible.\nIn Case #1, even though the Fashion Police officers have set a lenientKvalue of 10, there is only one possible outfit that you can form, so you can\nonly avoid Fashion Jail for one day.\nIn Case #2, adding any other outfit would cause you to go to Fashion Jail:Adding1 1 3would use the combination (jacket 1, pants 1)\nmore than 2 times.Adding1 2 2would use the combination (jacket 1, pants 2)\nmore than 2 times.In this case, any set of 5 outfits would include at least one fashion\nviolation.Note that the numbers of the jacket, pants, and shirt within an individual\noutfit do not have to be in nondecreasing order in the same way thatJ,P, andSdo.In Case #3, you have only one jacket + pants combination which you must keep\nreusing, so no matter which shirts you wear, you cannot form more thanK= 2 different outfits.In Case #4, another possible maximally large set of outfits is:1 2 21 1 1\nIn this case, any set of 5 outfits would include at least one fashion\nviolation.\nNote that the numbers of the jacket, pants, and shirt within an individual\noutfit do not have to be in nondecreasing order in the same way thatJ,P, andSdo.\nIn Case #3, you have only one jacket + pants combination which you must keep\nreusing, so no matter which shirts you wear, you cannot form more thanK= 2 different outfits.\nIn Case #4, another possible maximally large set of outfits is:1 2 21 1 1\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with four integersJ,P,S, andK.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nan integer: the maximum number of days you will be able to avoid being taken to\nFashion Jail. Then outputymore lines, each of which consists of\nthree integers: the numbers of the jacket, pants, and shirt (in that order) for\none day's outfit. The list of outfits can be in any order, but the outfits must\nnot cause you to go to Fashion Jail as described in the statement above.",
        "sample_input": "4\n1 1 1 10\n1 2 3 2\n1 1 3 2\n1 2 3 1",
        "sample_output": "Case #1: 1\n1 1 1\nCase #2: 4\n1 1 2\n1 2 3\n1 2 1\n1 1 1\nCase #3: 2\n1 1 2\n1 1 1\nCase #4: 2\n1 1 3\n1 2 1",
        "source": "2016\\round_1c\\fashion_police"
    },
    {
        "problem_name": "Senate Evacuation",
        "problem_statement": "A small fire started in the senate room, and it needs to be evacuated!\nThere are some senators in the senate room, each of whom belongs to of one ofNpolitical parties. Those parties are named after the firstN(uppercase) letters of the English alphabet.\nThe emergency door is wide enough for up to two senators, so in each step of\nthe evacuation, you may choose to remove either one or two senators from the\nroom.\nThe senate rules indicate the senators in the room may vote on any bill at any\ntime, even in the middle of an evacuation! So, the senators must be evacuated\nin a way that ensures that no party ever has an absolute majority. That is, it\ncan never be the case after any evacuation step that more than half of the\nsenators in the senate room belong to the same party.\nCan you construct an evacuation plan? The senate is counting on you!\nThe first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case consists of two lines. The first line\ncontains a single integerN, the number of parties. The second line\ncontainsNintegers,P1,P2, ...,PN, wherePirepresents the number of\nsenators of the party named after the i-th letter of the alphabet.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe evacuation plan. The plan must be a space-separated list of instructions,\nin the order in which they are to be carried out, where each instruction is\neither one or two characters, representing the parties of the senators to\nevacuate in each step.\nIt is guaranteed that at least one valid evacuation plan will exist. If\nmultiple evacuation plans are valid, you may output any of them.\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 50.No party will have an absolute majority before the start of the evacuation.1 ≤Pi≤ 1000, for all i.\n2 ≤N≤ 3.sum of allPi≤ 9.\n2 ≤N≤ 26.sum of allPi≤ 1000.\nThe sample output displays one set of answers to the sample cases. Other\nanswers may be possible.\nIn Case #1, there are two senators from each of the parties A and B. If we\nremove one from each party every time, the perfect balance is maintained until\nevacuation is complete.\nCase #2 proceeds as follows:\nInitially in the room: 3 A, 2 B, 2 C.Evacuate AA. Still in the room: 1 A, 2 B, 2 C.Evacuate BC. Still in the room: 1 A, 1 B, 1 C.Evacuate C. Still in the room: 1 A, 1 B.Evacuate AB. Evacuation complete!\nNote that it would not be valid to begin the evacuation with BC, which would\nleave 3 A, 1 B, and 1 C in the room; party A would have an absolute majority (3\nout of 5 = 60%).\nFor Case #3, note thatCC ABwould also be a valid answer, andC C ABis also valid even though it requires three evacuation\nsteps instead of two.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case consists of two lines. The first line\ncontains a single integerN, the number of parties. The second line\ncontainsNintegers,P1,P2, ...,PN, wherePirepresents the number of\nsenators of the party named after the i-th letter of the alphabet.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe evacuation plan. The plan must be a space-separated list of instructions,\nin the order in which they are to be carried out, where each instruction is\neither one or two characters, representing the parties of the senators to\nevacuate in each step.",
        "sample_input": "4\n2\n2 2\n3\n3 2 2\n3\n1 1 2\n3\n2 3 1",
        "sample_output": "Case #1: AB BA\nCase #2: AA BC C BA\nCase #3: C C AB\nCase #4: BA BB CA",
        "source": "2016\\round_1c\\senate_evacuation"
    },
    {
        "problem_name": "Slides!",
        "problem_statement": "Gooli is a huge company that ownsBbuildings in a hilly area. The\nbuildings are numbered from 1 toB.\nThe CEO wants to build a set of slides between buildings that she can use to\ntravel from her office in building 1 to her favorite cafe in buildingB.\nSlides, of course, are one-way only, but the buildings are tall and have\nelevators, so a slide can start in any building and end in any other building,\nand can go in either direction. Specifically, for any two buildings x and y,\nyou can build either zero or one slides from x to y, and you can build either\nzero or one slides from y to x. The exception is that no slides are allowed to\noriginate in buildingB, since once the CEO reaches that building, there\nis no need for her to do any more sliding.\nIn honor of Gooli becoming exactlyMmilliseconds old, the design must\nensure that the CEO hasexactlyMdifferent ways to travel from\nbuilding 1 to buildingBusing the new slides. A way is a sequence of\nbuildings that starts with building 1, ends with buildingB, and has the\nproperty that for each pair of consecutive buildings x and y in the sequence, a\nslide exists from x to y. Note that the CEO isnotrequiring that any\nbuilding be reachable from any other building via slides.\nCan you come up with any set of one or more slides that satisfies the CEO's\nrequirements, or determine that it is impossible?\nThe first line of the input gives the number of test cases,T.Tlines follow; each consists of one line with two integersBandM, as described above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe wordPOSSIBLEorIMPOSSIBLE, depending on whether\nthe CEO's requirements can be fulfilled or not. If it is possible, output an\nadditionalBlines containingBcharacters each, representing a\nmatrix describing a valid way to build slides according to the requirements.\nThe j-th character of the i-th of these lines (with both i and j counting\nstarting from 1) should be1if a slide should be built going from\nbuilding i to building j, and0otherwise. The i-th character of\nthe i-th line should always be0, and every character of the last\nline should be0.\nIf multiple solutions are possible, you may output any of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.\n2 ≤B≤ 6.1 ≤M≤ 20.\n2 ≤B≤ 50.1 ≤M≤ 1018.\nThe sample outputs show one possible way to fulfill the specifications for each\ncase. Other valid answers may exist.\nHere is an illustration of the sample answer for Case #1:\nThe four ways to get from building 1 to building 5 are:\nIn Case #3, building slides from 1 to 2, 2 to 3, 3 to 1, and 1 to 4 would\ncreate infinitely many ways for the CEO to reach building 4 (she could go\ndirectly to 4, or go around the loop once and then go to 4, or go around the\nloop twice...), but the CEO requestedexactly20 ways.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow; each consists of one line with two integersBandM, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe wordPOSSIBLEorIMPOSSIBLE, depending on whether\nthe CEO's requirements can be fulfilled or not. If it is possible, output an\nadditionalBlines containingBcharacters each, representing a\nmatrix describing a valid way to build slides according to the requirements.\nThe j-th character of the i-th of these lines (with both i and j counting\nstarting from 1) should be1if a slide should be built going from\nbuilding i to building j, and0otherwise. The i-th character of\nthe i-th line should always be0, and every character of the last\nline should be0.",
        "sample_input": "3\n5 4\n2 1\n4 20",
        "sample_output": "Case #1: POSSIBLE\n01001\n00110\n00001\n00101\n00000\nCase #2: POSSIBLE\n01\n00\nCase #3: IMPOSSIBLE",
        "source": "2016\\round_1c\\slides"
    },
    {
        "problem_name": "Freeform Factory",
        "problem_statement": "You have just built a brand new factory. Your factory\nhasNdifferent machines, and each machine needs to beoperatedby exactly one\nworker for the factory to function well.\nYou have also hiredNworkers to operate those machines. Since you were in a hurry when you\nhired them, you did not check whether they actually know how to operate your machines. Now you have\nfinally asked them, and so you have the information on whether the i-th worker\ncan operate the j-th machine, for each i and j.\nIn a typical working day, the workers will arrive at the factory in a random order,\nwhich can be different each day.\nAs each worker arrives, they will find all machines that they know how to operate and that do not\nalready have an operator. They will choose one of those at random\nand operate it for the whole working day.\n If all machines they know how to operate already have an operator, they will not work that day.\n Your goal is to make sure that all machines are being operated each working\nday, regardless of what order the workers arrive in and which machines they choose.\nFor example, suppose there are two workers A and B, and two machines 1 and 2. Suppose\nthat A knows how to operate 1 and 2, and B knows how to operate 1 but not 2.\nIf worker B arrives first, he will pick machine 1, then when worker A arrives she will have\nto choose 2, and the factory will work well. However, if worker A arrives first,\nit might happen that she chooses to operate 1 on that day, and then when worker B arrives\nhe does not have anything to do, leaving machine 2 without an operator, and causing\nyour factory to waste a whole day!\nAs another example, suppose there are two workers A and B, and two machines 1 and 2,\nand that A knows how to operate 1 but not 2, and B does not know how to operate anything. Then,\nregardless of the order in which the workers arrive, the factory will not be able to function well.\nBefore you open your factory, in order to guarantee that the factory will\nconstantly function well, you can teach your workers how to operate machines.\nIt costs one dollar to give a single worker a lesson on how to operate a single\nmachine. Each lesson involves only one worker and only one machine, but you can\nteach any number of lessons to any number of workers, and the same worker can\nreceive multiple lessons. You cannot make a worker forget how to operate a\nmachine if they already know how to operate it.\nFor example, both examples above can be fixed by teaching worker B to operate machine 2.\nIn that case each machine is guaranteed to have an operator every day, regardless of which order the\nworkers arrive in and which machines they choose to operate when they have more than one\npossibility.\nWhat is the minimum amount of dollars you need to spend on training workers to make sure the factory\nfunctions well every day?\nThe first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case starts with one line with an integerN, the number of workers (and machines). This line is followed byNlines with\na string ofNcharacters each. The j-th character on the i-th of those lines is1if the i-th worker knows how to operate the j-th machine, and0otherwise.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyis\na non-negative integer: the minimum amount of dollars you need to spend to make sure that\nallNmachines will always have an operator.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.\n1 ≤N≤ 4.\n1 ≤N≤ 25.\nSample cases #1 and #2 are the ones described in the problem statement.\nIn sample case #3, nobody knows how to do anything! One optimal strategy is to\nteach worker A to operate machine 1, worker B to operate machine 2, and worker\nC to operate machine 3.\nIn sample case #4, no action is necessary. There is only one worker, and the\nworker already knows how to operate the one machine.\nIn sample case #5, worker B already knows how to operate machines 1 and 2. One\noptimal strategy is to teach worker A to operate machine 3, and make A the only\nworker who can operate that machine. But now we have to consider that B might\noperate either machine 1 or 2 upon arrival, so C needs to be able to operate\nthe one not chosen by B. So C must be taught to operate both 1 and 2.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case starts with one line with an integerN, the number of workers (and machines). This line is followed byNlines with\na string ofNcharacters each. The j-th character on the i-th of those lines is1if the i-th worker knows how to operate the j-th machine, and0otherwise.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyis\na non-negative integer: the minimum amount of dollars you need to spend to make sure that\nallNmachines will always have an operator.",
        "sample_input": "5\n2\n11\n10\n2\n10\n00\n3\n000\n000\n000\n1\n1\n3\n000\n110\n000",
        "sample_output": "Case #1: 1\nCase #2: 1\nCase #3: 3\nCase #4: 0\nCase #5: 3",
        "source": "2016\\round_2\\freeform_factory"
    },
    {
        "problem_name": "Rather Perplexing Showdown",
        "problem_statement": "You've been asked to organize a Rock-Paper-Scissors tournament. The tournament\nwill have a single-elimination format and will run forNrounds;\n2Nplayers will participate.\nInitially, the players will be lined up from left to right in some order that\nyou specify. In each round, the first and second players in the lineup\n(starting from the left) will play a match against each other, and the third\nand fourth players in the lineup (if they exist) will play a match against\neach other, and so on; all of these matches will occur simultaneously. The\nwinners of these matches will remain in the lineup, in the same relative order,\nand the losers will leave the lineup and go home. Then a new round will begin.\nThis will continue until only one player remains in the lineup; that\nplayer will be declared the winner.\nIn each Rock-Paper-Scissors match, each of the two players secretly chooses\none ofRock,Paper, orScissors, and then they compare\ntheir choices. Rock beats Scissors, Scissors beats Paper, and Paper beats Rock.\nIf one player's choice beats the other players's choice, then that\nplayer wins and the match is over. However, if the players make the\nsame choice, then it is a tie, and they must choose again and keep playing\nuntil there is a winner.\nYou know that the players this year are stubborn and not very strategic.\nEach one has apreferred moveand will only play that move in every\nmatch, regardless of what the opponent does. Because of this, if two\nplayers with the same move go up against each other, they will keep tying\nand their match will go on forever! If this happens, the tournament will never\nend and you will be a laughingstock.\nThis year, there areRplayers who prefer Rock,Pplayers\nwho prefer Paper, andSplayers who prefer Scissors. Knowing this,\nyou want to create a lineup that guarantees that the tournament will go to\ncompletion and produce a single winner — that is, no match will ever be a\ntie. Your boss has asked you to produce a list of all such lineups (written\nin left to right order, withR,P, andSstanding for players who prefer Rock, Paper, and Scissors, respectively),\nand then put that list in alphabetical order.\nYou know that the boss will lazily pick the first lineup on the list; what will\nthat be? Or do you have to tell your boss that it isIMPOSSIBLEto\nprevent a tie?\nThe first line of the input gives the number of test cases,T.Tlines follow; each represents one test case. Each test case consists of four\nintegers:N,R,P, andS, as described in the\nstatement above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\neitherIMPOSSIBLEor a string of length 2Nrepresenting the alphabetically earliest starting lineup that solves the\nproblem. Every character in a lineup must beR,P, orS, and there must beRRs,PPs, andSSs.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.R+P+S= 2N.0 ≤R≤ 2N.0 ≤P≤ 2N.0 ≤S≤ 2N.\n1 ≤T≤ 25.1 ≤N≤ 3.\n1 ≤T≤ 75.1 ≤N≤ 12.\nIn sample case #1, there are only two players and the tournament will\nconsist of one round. It doesn't matter what order the two line up in; the\nPaper-using player will defeat the Rock-using player. You will give\nyour boss the alphabetically ordered listPR,RP, and\nthe first element isPR.\nIn sample case #2, the only two players both play Rock, so a tie is\nunavoidable.\nIn sample case #3, there are four players and the tournament will go on for two\nrounds. In the first round, the first player (Paper) will lose to the second\nplayer (Scissors), and the third player (Rock) will defeat the fourth player\n(Scissors). The second round lineup will bePR, and the first\nremaining player (Paper) will defeat the other remaining player (Rock), so the\ntournament will end with a winner and no ties.\nHere is an illustration of the tournament for sample case #3:\n\nIn sample case #4, the only way to organize the first round such that there are\nno ties is to create two matches with one Rock player and one Scissors player.\nBut both of those matches will have a Rock winner, and when these two winners\ngo on to face each other, there will be a tie.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow; each represents one test case. Each test case consists of four\nintegers:N,R,P, andS, as described in the\nstatement above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\neitherIMPOSSIBLEor a string of length 2Nrepresenting the alphabetically earliest starting lineup that solves the\nproblem. Every character in a lineup must beR,P, orS, and there must beRRs,PPs, andSSs.",
        "sample_input": "4\n1 1 1 0\n1 2 0 0\n2 1 1 2\n2 2 0 2",
        "sample_output": "Case #1: PR\nCase #2: IMPOSSIBLE\nCase #3: PSRS\nCase #4: IMPOSSIBLE",
        "source": "2016\\round_2\\rather_perplexing_showdown"
    },
    {
        "problem_name": "Red Tape Committee",
        "problem_statement": "You are the head of the Department of Redundancy Reduction and Superfluity\nShrinkage. Currently, the department cannot agree on whether there is too much\n\"red tape\" (inefficiency) in the department itself. They have asked you to form\na Red Tape Committee to vote on the issue.\nThe department hasNmembers. For each member, you know the probabilityPithat that member will vote \"Yes\". If a member does not\nvote \"Yes\", they necessarily vote \"No\"; nobody abstains.\nYou must choose exactlyKmembers to be on the committee. The department\nrules dictate thatKmust be an even number to allow for ties, which\nare seen as part of a healthy bureaucracy.\nIf you choose committee members tomaximizethe probability of a tie,\nwhat is that probability?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line of a test case\nconsists of two integersNandK, the sizes of the department and\nthe committee. The second line of a test case consists ofNdecimal\nvaluesPi; each has exactly two decimal places of\nprecision and represents the probability that thei-th department member\nwill vote \"Yes\".\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na floating-point number: the maximum possible probability of a tie.ywill be considered correct if it is within an absolute or\nrelative error of 10-6of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.\nMemory limit: 1 GB.1 ≤T≤ 100.2 ≤K≤N.Kis even.0.00 ≤ eachPi≤ 1.00.Small dataset (Test Set 1 - Visible)Time limit: 60 seconds.2 ≤N≤ 16.Large dataset (Test Set 2 - Hidden)Time limit: 120 seconds.2 ≤N≤ 200.SampleSample Inputsave_altcontent_copyCopied!3\n2 2\n0.50 0.50\n4 2\n0.00 0.00 1.00 1.00\n3 2\n0.75 1.00 0.50Sample Outputsave_altcontent_copyCopied!Case #1: 0.5\nCase #2: 1.0\nCase #3: 0.5In sample case #1, you must use the only two available department members to\nform the committee. That committee will tie only if the two committee members\nvote differently, which will happen half the time. (Without loss of generality,\nchoose the vote of the first. Then the probability that the second will vote\nthe other way is 0.5.)In sample case #2, the best strategy is to pick one of the members with \"Yes\"\nprobability 0.00 and one of the members with \"Yes\" probability 1.00. This\nguarantees a tie.In sample case #3, suppose that we pick the two members with \"Yes\"\nprobabilities of 0.50 and 0.75. A tie will happen if the first one votes \"Yes\"\nand the second one votes \"No\" (probability 0.5 * 0.25 = 0.125), or if the\nfirst one votes \"No\" and the second one votes \"Yes\" (probability 0.5 * 0.75 =\n0.375). So the total probability of a tie is 0.125 + 0.375 = 0.5. Choosing the\ntwo members with \"Yes\" probabilities of 0.50 and 1.00 would also make the tie\nprobability 0.5, since the 1.00 member will vote \"Yes\" and the 0.50 member must\nvote \"No\". Choosing the two members with \"Yes\" probabilities of 0.75 and 1.00\nwould make the tie probability only 0.25, since the 1.00 member will vote \"Yes\"\nand the 0.75 member must vote \"No\". So 0.5 is the best we can do.\nTime limit: 60 seconds.2 ≤N≤ 16.\nTime limit: 120 seconds.2 ≤N≤ 200.\nIn sample case #1, you must use the only two available department members to\nform the committee. That committee will tie only if the two committee members\nvote differently, which will happen half the time. (Without loss of generality,\nchoose the vote of the first. Then the probability that the second will vote\nthe other way is 0.5.)\nIn sample case #2, the best strategy is to pick one of the members with \"Yes\"\nprobability 0.00 and one of the members with \"Yes\" probability 1.00. This\nguarantees a tie.\nIn sample case #3, suppose that we pick the two members with \"Yes\"\nprobabilities of 0.50 and 0.75. A tie will happen if the first one votes \"Yes\"\nand the second one votes \"No\" (probability 0.5 * 0.25 = 0.125), or if the\nfirst one votes \"No\" and the second one votes \"Yes\" (probability 0.5 * 0.75 =\n0.375). So the total probability of a tie is 0.125 + 0.375 = 0.5. Choosing the\ntwo members with \"Yes\" probabilities of 0.50 and 1.00 would also make the tie\nprobability 0.5, since the 1.00 member will vote \"Yes\" and the 0.50 member must\nvote \"No\". Choosing the two members with \"Yes\" probabilities of 0.75 and 1.00\nwould make the tie probability only 0.25, since the 1.00 member will vote \"Yes\"\nand the 0.75 member must vote \"No\". So 0.5 is the best we can do.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line of a test case\nconsists of two integersNandK, the sizes of the department and\nthe committee. The second line of a test case consists ofNdecimal\nvaluesPi; each has exactly two decimal places of\nprecision and represents the probability that thei-th department member\nwill vote \"Yes\".",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na floating-point number: the maximum possible probability of a tie.ywill be considered correct if it is within an absolute or\nrelative error of 10-6of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.",
        "sample_input": "3\n2 2\n0.50 0.50\n4 2\n0.00 0.00 1.00 1.00\n3 2\n0.75 1.00 0.50",
        "sample_output": "Case #1: 0.5\nCase #2: 1.0\nCase #3: 0.5",
        "source": "2016\\round_2\\red_tape_committee"
    },
    {
        "problem_name": "The Gardener of Seville",
        "problem_statement": "You are the Gardener of Seville, a minor character in an opera. The setting for\nthe opera is a courtyard which is a rectangle of unit cells, withRrows\nandCcolumns. You have been asked to install a maze of hedges in the\ncourtyard: every cell must contain a hedge that runs diagonally from one corner\nto another. For any cell, there are two possible kinds of hedge: lower left to\nupper right, which we represent with/, and upper left to lower\nright, which we represent with\\. Wherever two hedges touch, they\nform a continuous wall.\nAround the courtyard is an outer ring of unit cells, one cell wide, with the\nfour corners missing. Each of these outer cells is the home of a courtier.\nThe courtiers in these outer cells are numbered clockwise, starting with 1 for\nthe leftmost of the cells in the top row, and ending with\n2 * (R+C) for the topmost cell in the left column. For example,\nforR= 2,C= 2, the numbering in the outer ring looks like this.\n(Note that no hedges have been added yet.)\n128  37  465\nIn this unusual opera, love is mutual and exclusive: each courtier loves\nexactly one other courtier, who reciprocally loves only them. Each courtier\nwants to be able to sneak through the hedge maze to his or her lover without\nencountering any other courtiers. That is, any two courtiers in love with each\nother must be connected by a path through the maze that is separated from every\nother path by hedge walls. It is fine if there are parts of the maze that are\nnot part of any courtier's path, as long as all of the pairs of lovers are\nconnected.\nGiven a list of who loves who, can you construct the hedge maze so that every\npair of lovers is connected, or determine that this isIMPOSSIBLE?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with two integersRandC, followed by another line with a permutation of all of\nthe integers from 1 to 2 * (R+C), inclusive. Each integer is\nthe number of a courtier; the first and second courtiers in the list are in\nlove and must be connected, the third and fourth courtiers in the list are in\nlove and must be connected, and so on.\nFor each test case, output one line containingonlyCase #x:, wherexis the test case number (starting\nfrom 1). Then, if it is impossible to satisfy the conditions, output one more\nline with the textIMPOSSIBLE. Otherwise, outputRmore\nlines ofCcharacters each, representing a hedge maze that satisfies the\nconditions, where every character is/or\\. You may\nnot leave any cells in the maze blank. If multiple mazes are possible, you may\noutput any one of them.\nTime limit: 40 seconds per test set.Memory limit: 1 GB.\n1 ≤T≤ 100.1 ≤R * C≤ 16.\n1 ≤T≤ 500.1 ≤R * C≤ 100.\nIn Case #3, the following pairs of courtiers are lovers: (8, 1), (4, 5),\n(2, 3), (7, 6). Here is an illustration of our sample output:\nFor Case #3, note that this would also be a valid maze:/\\\\/In Case #4, the courtyard consists of only one cell, so the courtiers living\naround it, starting from the top and reading clockwise, are 1, 2, 3, and 4.\nThere are only two possible options to put in the one cell:/or\\. The first of these choices would form paths from 1 to 4, and\nfrom 2 to 3. The second of these choices would form paths from 1 to 2, and from\n3 to 4. However, neither of these helps our lovesick courtiers, since in this\ncase, 1 loves 3 and 2 loves 4. So this case isIMPOSSIBLE, and\nthe opera will be full of unhappy arias!\nFor Case #3, note that this would also be a valid maze:\n/\\\\/\nIn Case #4, the courtyard consists of only one cell, so the courtiers living\naround it, starting from the top and reading clockwise, are 1, 2, 3, and 4.\nThere are only two possible options to put in the one cell:/or\\. The first of these choices would form paths from 1 to 4, and\nfrom 2 to 3. The second of these choices would form paths from 1 to 2, and from\n3 to 4. However, neither of these helps our lovesick courtiers, since in this\ncase, 1 loves 3 and 2 loves 4. So this case isIMPOSSIBLE, and\nthe opera will be full of unhappy arias!\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with two integersRandC, followed by another line with a permutation of all of\nthe integers from 1 to 2 * (R+C), inclusive. Each integer is\nthe number of a courtier; the first and second courtiers in the list are in\nlove and must be connected, the third and fourth courtiers in the list are in\nlove and must be connected, and so on.",
        "output_description": "For each test case, output one line containingonlyCase #x:, wherexis the test case number (starting\nfrom 1). Then, if it is impossible to satisfy the conditions, output one more\nline with the textIMPOSSIBLE. Otherwise, outputRmore\nlines ofCcharacters each, representing a hedge maze that satisfies the\nconditions, where every character is/or\\. You may\nnot leave any cells in the maze blank. If multiple mazes are possible, you may\noutput any one of them.",
        "sample_input": "4\n1 1\n1 4 3 2\n1 3\n1 8 2 7 3 4 5 6\n2 2\n8 1 4 5 2 3 7 6\n1 1\n1 3 2 4",
        "sample_output": "Case #1:\n/\nCase #2:\n//\\\nCase #3:\n//\n\\/\nCase #4:\nIMPOSSIBLE",
        "source": "2016\\round_2\\the_gardener_of_seville"
    },
    {
        "problem_name": "Forest University",
        "problem_statement": "The Forest University offers its studentsNcourses, which must all be\ntaken to obtain the degree. The courses can only be taken one at a time - you\nmust complete a course before starting another. Each course is eitherbasic, which means one can take it without any prior knowledge, oradvanced, in which case exactly one other course is itsprerequisite.\nA student must take the prerequisite for a course before taking the course,\nalthough they do not need to be taken immediately one after the other. A course\nmight be the prerequisite for multiple other courses. There are no prerequisite\ncycles. Any sequence of theNcourses that meets the rules for\nprerequisites is valid for obtaining the degree.\nWhen you graduate, the university commemorates the sequence of courses you have\ntaken by printing an abbreviated version of it on your graduation hat. More\nprecisely, this abbreviated version is a string consisting of the first letter\nof the name of each course you have taken, in the order you have taken them.\nFor example, if you have taken a Coding course and a Jamming course, in that\norder, your graduation hat will sayCJ. It is considered trendy to\nhave certaincool wordsas a substring of the string on one's graduation\nhat.\nConsider all possible valid sequences in which the courses can be taken. For\neach cool word, you need to find the fraction of those sequences that have the\ncool word as a substring (at least once) of the string on the corresponding\ngraduation hat. Note that we're interested in the fraction of possible course\nsequences,notthe fraction of possible different graduation hat\nstrings. (Since multiple courses may start with the same letter, there may be\nfewer possible strings than course sequences.)\nSomewhat unusually for Code Jam, we are only looking for an approximate answer\nto this problem; pay careful attention to the output format.\nThis problem has only 1 Small input and no Large input. You will be able to\nretry the input (with a time penalty).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of five lines, in this order, which\ncontain the following:\nFor each test case, output one line containingCase #x: y1y2... yM,\nwherexis the test case number (starting from 1) andyiis the fraction of valid course sequences that will\nhave the i-th cool word as a substring of the string on the graduation hat.\nyiwill be considered correct if it is within an\nabsolute error of 0.03 of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.\nTime limit: 300 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 100.1 ≤M≤ 5.The length of each cool word is between 1 and 20.Each cool word consists of uppercase English letters only.There are no cycles formed by the prerequisites.\nThe sample output displays one set of acceptable answers to the sample cases.\nOther answers are possible within the allowed precision.\nIn sample case #1, course 1 (C) is a basic course that is a\nprerequisite for the advanced course 2 (J). The only way to\ncomplete the courses is to take course 1 and then course 2. This creates the\nstringCJ. So the cool wordsCJ,C,D, andJCare present as substrings in 1, 1, 0, and 0\nout of 1 possible cases, respectively.\nIn sample case #2, the basic course 1 (B) is a prerequisite for\nthe advanced course 2 (A), and course 3 (A) is\nanother basic course. There are three possible ways of completing the courses:\nThe cool wordsAA,AAB, andABAare\npresent as substrings in 2, 0, and 1 out of 3 possible cases, respectively.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of five lines, in this order, which\ncontain the following:",
        "output_description": "For each test case, output one line containingCase #x: y1y2... yM,\nwherexis the test case number (starting from 1) andyiis the fraction of valid course sequences that will\nhave the i-th cool word as a substring of the string on the graduation hat.",
        "sample_input": "2\n2\n0 1\nCJ\n4\nCJ C D JC\n3\n0 1 0\nBAA\n3\nAA AAB ABA",
        "sample_output": "Case #1: 1.0 1.0 0.0 0.0\nCase #2: 0.67 0.0 0.33",
        "source": "2016\\round_3\\forest_university"
    },
    {
        "problem_name": "Go++",
        "problem_statement": "The Go language was designed to have a simple API and to support\nmulti-threading. The Code Jam team wants to push these goals to the limit, so\nwe are proposing a new language called Go++.\nThe Go++ language uses one register, which stores one boolean value (0 or 1).\nThis register is initialized to 0. The language has three instructions:0, which sets the register to 0.1, which sets the register to 1.?, which prints the current register value.Simple, right? To support multi-threading, we allow two different Go++ programs\nto run simultaneously while sharing the one register. Each instruction executes\natomically — that is, one instruction must completely finish before the\nnext instruction can start. However, the two programs may be interleaved in any\nway that preserves the relative order within each program.\nFor example, here are the only six ways in which the two programs1?and?0could be executed together. (The\nunderline on the second program is just to distinguish its instructions from\nthe instructions in the first program.)?01?, which will print01. (Remember that\nthe register is initialized to 0.)?10?, which will print00.?1?0, which will print01.1?0?, which will print10.1??0, which will print11.1??0, which will print11.\nNote that the output string always consists of0s and1s, and never?s, since?is not a state\nthe register can be in.\nUsually, programmers write programs to produce a desired output, but your task\nwill be to write two programs thatwon'tproduce anundesiredoutput! Specifically, you will be given a \"bad\" stringBof lengthL, and a setGofN\"good\" strings, all of\nlengthL. You must produce two Go++ programs (not necessarily of the\nsame length), which, when run in the way described here, could produceallof the strings inG, but couldnotproduce the stringB. It is fine if the programs could also produce other strings that are\nnotBand not inG. Note that there must be a combined total of\nexactlyL?instructions in the two programs. The combined\nnumber of instructions in the two programs must not exceed 200.\nFor example, forB=11andG= {10,00}, the programs?and10?1would be\none valid answer. They can produce every string inG, but they cannot\nproduceB, no matter how they are interleaved. (They can also produce\nthe string01, which is notBand is not inG, but\nthat is fine.) However, the programs1?and?0would\nnot be a valid answer, since (as we saw above) they can produceB. The\nprograms00and??would not be a valid answer, since\nthey cannot produce every string inG.\nCan you produce two programs that satisfy the conditions, or determine that the\ntask isIMPOSSIBLE?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line of each test\ncase has two integersNandL: the number of strings inG,\nand the length of theBstring and the strings inG. The second\nline hasNdifferent strings of lengthL: the strings inG. The third line has one string of lengthL: the bad stringB.Band all of the strings inGare made up of only0s and/or1s.\nFor each test case, output one line containingCase #x: IMPOSSIBLE,\nif no programs will satisfy the conditions; otherwise, outputCase #x: y z, wherexis the test case number\n(starting from 1) andyandzare your two programs\nthat satisfy the conditions. The combined number of instructions in your\nprograms must not exceed 200. Each program must contain at least one\ninstruction. There must be a combined total of exactlyL?instructions in the two programs.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 100.1 ≤L≤ 50.All strings inGare different.\nBconsists entirely of1s.\nBmay be any string consisting of0s and/or1s.\nThe sample output displays one set of answers to the sample cases. Other\nanswers may be possible.\nSample case #1 is the one described in the problem statement.\nSample case #2 would not appear in the Small dataset.\nSample case #3 is obviouslyIMPOSSIBLEbecauseBis\ninG.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line of each test\ncase has two integersNandL: the number of strings inG,\nand the length of theBstring and the strings inG. The second\nline hasNdifferent strings of lengthL: the strings inG. The third line has one string of lengthL: the bad stringB.Band all of the strings inGare made up of only0s and/or1s.",
        "output_description": "For each test case, output one line containingCase #x: IMPOSSIBLE,\nif no programs will satisfy the conditions; otherwise, outputCase #x: y z, wherexis the test case number\n(starting from 1) andyandzare your two programs\nthat satisfy the conditions. The combined number of instructions in your\nprograms must not exceed 200. Each program must contain at least one\ninstruction. There must be a combined total of exactlyL?instructions in the two programs.",
        "sample_input": "3\n2 2\n10 00\n11\n3 2\n11 10 00\n01\n4 2\n00 01 10 11\n11",
        "sample_output": "Case #1: ? 10?1\nCase #2: 1?? 0\nCase #3: IMPOSSIBLE",
        "source": "2016\\round_3\\go"
    },
    {
        "problem_name": "Rebel Against The Empire",
        "problem_statement": "You are a rebel against the evil Galactic Empire, and you are on the run!\nYou have sabotaged the Empire's Factory of Evil, and imperial security\nforces will be after you soon! The factory is located on asteroid 0 in a system\nofNnumbered asteroids. Your getaway ship, the Century Quail, is\nlocated on asteroid 1, and if you can get there, you will be able to fly away\nsafely.\nEach asteroid is a single point in space with a velocity, and you move through\nspace along with whichever asteroid you are currently on. Your Asteroid Jumper\nwill allow you to instantaneously jump between any two asteroids in the system.\nLong jumps are scarier than short ones (and the vacuum of space is terrifying),\nso you want to minimize the maximum distance you need to jump. However,\nstarting now, if you ever spend more than a continuousSseconds without\njumping, the imperial security forces will catch you. That is, the interval\nfrom now until your first jump, and each interval between subsequent jumps,\nmust be less than or equal toS. You may jump atanyinstant;\nit does not have to be after an integer number of seconds have elapsed. You\nescape the instant you jump to asteroid 1.\nThe i-th asteroid starts at position (xi,yi,zi) in space, and it will move a\ntotal distance of (Vxi,Vyi,Vzi) each second. This movement is continuous throughout time;\nit does not update discretely each second. (It is also possible for an\nasteroid to be stationary.) Nothing happens if asteroids occupy the same point\nin space at the same time. You can only travel between two asteroids by\njumping, even if they happen to occupy the same point at the instant of your\njump.\nIn the escape plan that minimizes the maximum jump distance, what is that\nmaximum jump distance?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. The first line of each test case contains two integers:N(the number of asteroids) andS(the limit on how long you can\ngo without jumping). Next, there areNlines describing the asteroids.\nThe i-th of these lines (counting starting from 0) contains six integers: the\ninitial (xi,yi,zi)\nposition of the i-th asteroid in space, and the distance (Vxi,Vyi,Vzi) it moves\nin a single second.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na floating-point number: the distance of the longest jump you will have to make\nin order to get away.ywill be considered correct if it is within\nan absolute or relative error of 10-4of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 20.2 ≤N≤ 1000.1 ≤S≤ 100.-500 ≤xi≤ 500.-500 ≤yi≤ 500.-500 ≤zi≤ 500.\nVxi= 0.Vyi= 0.Vzi= 0.\n\nSample case #1 is the only sample case that could appear in the Small dataset.\nAny of the sample cases could appear in the Large dataset.\nIn sample case #1, we start on a stationary asteroid at (0, 0, 0), and our ship\nis on an asteroid at (1, 2, 2). There is another asteroid at (1, 1, 1). One\noption is to jump directly to our ship, which is a distance of 3 away. Another\noption is to jump to the other asteroid, which is a distance of sqrt(3) away,\nand then jump to the ship from there, which is a distance of sqrt(2) away. The\nmaximum jump distance is 3 for the first option and sqrt(3) for the second\noption, so the second option is preferable.\nNote that the value ofSdoes not matter in the Small cases. Since all\nof the asteroids are stationary, there is no reason to wait around; we can make\nall jumps instantaneously.\nIn sample case #2, we start on a stationary asteroid at (0, 0, 0). We can wait\nthere for 4 seconds for asteroid 4 to come very close, jump onto it, fly for 1\nsecond on it, and then jump back at time 5 back to asteroid 0 (the distance\nbetween the two asteroids is 1 at this moment). There we wait 10 seconds,\ncutting it very close to being caught, and then jump to the speeding asteroid 3\nat time 15. Two seconds later, asteroid 3 flies by asteroid 2, and we jump to\nasteroid 2. At time 27, we can jump from asteroid 2 to asteroid 0. There we\npatiently wait until time 35 when asteroid 1 reaches us, then we can jump onto\nit and escape.\nThe longest jump we made was from asteroid 0 to asteroid 3 at time 15, and the\ndistance we jumped was 2.\nIn sample case #3, the security forces are really active! You could, of course,\nwait one second and jump directly to asteroid 1, but a better choice - that\nallows you to make jumps no longer than 4 - is to jump back and forth between\nasteroids 0 and 2; while waiting for asteroid 1 to get close, and only then\njump to it.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. The first line of each test case contains two integers:N(the number of asteroids) andS(the limit on how long you can\ngo without jumping). Next, there areNlines describing the asteroids.\nThe i-th of these lines (counting starting from 0) contains six integers: the\ninitial (xi,yi,zi)\nposition of the i-th asteroid in space, and the distance (Vxi,Vyi,Vzi) it moves\nin a single second.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\na floating-point number: the distance of the longest jump you will have to make\nin order to get away.ywill be considered correct if it is within\nan absolute or relative error of 10-4of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.",
        "sample_input": "3\n3 7\n0 0 0 0 0 0\n1 2 2 0 0 0\n1 1 1 0 0 0\n5 10\n0 0 0 0 0 0\n35 0 0 -1 0 0\n1 54 0 0 -2 0\n2 -150 0 0 10 0\n4 0 0 -1 0 0\n3 1\n-10 2 0 1 0 0\n0 0 10 0 0 -1\n-10 -2 0 1 0 0",
        "sample_output": "Case #1: 1.7320508\nCase #2: 2.0000000\nCase #3: 4.0000000",
        "source": "2016\\round_3\\rebel_against_the_empire"
    },
    {
        "problem_name": "Teaching Assistant",
        "problem_statement": "You are taking a programming course which is graded using problem sets of\ndifferent types.  The course goes for a positive even number of days. You\nstart the course with no problem sets. On each day of the course, youmustdoexactly oneof the following:Request a \"Coding\" problem set.Request a \"Jamming\" problem set.Submit a problem set for grading. You must have at least one\nproblem set to choose this option. If you have multiple problem sets, you\nmust submit the one among those that wasrequested most recently,\nregardless of its type.All problem sets are different. There is no requirement on how many sets of\neach type must be submitted. Once you submit a set, you no longer\nhave that set. Any problem sets that you have not submitted before the end\nof the course get you no points.The problem sets are requested from and submitted to an\nartificially-intelligent teaching assistant. Strangely, the assistant has\ndifferent moods — on each day it is in the mood for either \"Coding\" or\n\"Jamming\".When you request a problem set:If the requested topic matches the assistant's mood, it assigns a problem set worth a\nmaximum of 10 points.If the requested topic does not match its mood, it assigns a problem set\nworth a maximum of 5 points.When you submit a problem set:If the topic of the submitted set matches the assistant's mood that day, it\ngives you the maximum number of points for that set.If the topic of the submitted set does not match its mood that day, it\ngives you 5 points fewer than the maximum number of points for that set.For example:f you request a \"Coding\" problem set on a day in which the assistant is in\na \"Coding\" mood, and submit it on a day in which it is in a \"Jamming\" mood, you\n will earn 5 points: the problem set is worth a maximum of 10, but\nthe assistant gives 5 points fewer than that.If you request a \"Jamming\" problem set on a day in which the assistant is\nin a \"Coding\" mood, and submit it on a day in which it is in a \"Jamming\" mood,\nyou will earn 5 points: the set is worth a maximum of 5, and the assistant\ngives you the maximum number of points.Thanks to some help from a senior colleague who understands the assistant very\nwell, you know what sort of mood the assistant will be in on each\nday of the course. What is the maximum total score that you will be able to\nobtain?InputThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with a stringSofCand/orJcharacters. The i-th character ofSdenotes the assistant's mood on the i-th day of the course. If it isC, it is in the mood for \"Coding\"; if it isJ, it is\nin the mood for \"Jamming\".OutputFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe maximum number of points you can obtain for that case.LimitsTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.The length ofSis even.Small dataset (Test Set 1 - Visible)2 ≤ the length ofS≤ 50.Large dataset (Test Set 2 - Hidden)2 ≤ the length ofS≤ 20000.The sum of lengths of allSin the dataset is at most 150000.SampleSample Inputsave_altcontent_copyCopied!5\nCCJJ\nCJCJ\nCJJC\nCJJJ\nCCCCCCSample Outputsave_altcontent_copyCopied!Case #1: 20\nCase #2: 10\nCase #3: 20\nCase #4: 15\nCase #5: 30This strategy is optimal for sample case #1:Day 1: Request a \"Coding\" problem set (call it C1).Day 2: Submit C1.Day 3: Request a \"Jamming\" problem set (call it J1).Day 4: Submit J1.The following strategy is optimal for sample cases #2, #3, and #4: request C1,\nrequest J1, submit J1, submit C1.For case #2, for example, note that you couldnotrequest\nC1, request J1, and then submit C1. Only the most recently\nrequested problem set can be submitted.In sample case #5, you can alternate between requesting a\n\"Coding\" problem set on one day, and submitting it on the next day.\nAll problem sets are different. There is no requirement on how many sets of\neach type must be submitted. Once you submit a set, you no longer\nhave that set. Any problem sets that you have not submitted before the end\nof the course get you no points.\nThe problem sets are requested from and submitted to an\nartificially-intelligent teaching assistant. Strangely, the assistant has\ndifferent moods — on each day it is in the mood for either \"Coding\" or\n\"Jamming\".\nFor example:\nThanks to some help from a senior colleague who understands the assistant very\nwell, you know what sort of mood the assistant will be in on each\nday of the course. What is the maximum total score that you will be able to\nobtain?\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with a stringSofCand/orJcharacters. The i-th character ofSdenotes the assistant's mood on the i-th day of the course. If it isC, it is in the mood for \"Coding\"; if it isJ, it is\nin the mood for \"Jamming\".\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe maximum number of points you can obtain for that case.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.The length ofSis even.\n2 ≤ the length ofS≤ 50.\n2 ≤ the length ofS≤ 20000.The sum of lengths of allSin the dataset is at most 150000.\nThis strategy is optimal for sample case #1:Day 1: Request a \"Coding\" problem set (call it C1).Day 2: Submit C1.Day 3: Request a \"Jamming\" problem set (call it J1).Day 4: Submit J1.\nThe following strategy is optimal for sample cases #2, #3, and #4: request C1,\nrequest J1, submit J1, submit C1.\nFor case #2, for example, note that you couldnotrequest\nC1, request J1, and then submit C1. Only the most recently\nrequested problem set can be submitted.\nIn sample case #5, you can alternate between requesting a\n\"Coding\" problem set on one day, and submitting it on the next day.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with a stringSofCand/orJcharacters. The i-th character ofSdenotes the assistant's mood on the i-th day of the course. If it isC, it is in the mood for \"Coding\"; if it isJ, it is\nin the mood for \"Jamming\".",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe maximum number of points you can obtain for that case.",
        "sample_input": "5\nCCJJ\nCJCJ\nCJJC\nCJJJ\nCCCCCC",
        "sample_output": "Case #1: 20\nCase #2: 10\nCase #3: 20\nCase #4: 15\nCase #5: 30",
        "source": "2016\\round_3\\teaching_assistant"
    },
    {
        "problem_name": "Family Hotel",
        "problem_statement": "",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each\n  line contains two numbers: the number of roomsNand the room numberKthat we\n  are interested in.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis\n  the test case number (starting from 1) andyis the sought probability computedmodulo 109+7, which is defined precisely as follows.\n  Represent the probability that roomKis occupied as an irreducible fractionp/q. The numberythen must satisfy the modular equationy × q ≡ p (mod 109+7), and be between 0 and\n  109+6, inclusive. It can be shown that under the constraints of this problem such a\n  numberyalways exists and is uniquely determined.",
        "sample_input": "4\n3 1\n3 2\n4 1\n4 2",
        "sample_output": "Case #1: 500000004\nCase #2: 1\nCase #3: 666666672\nCase #4: 1",
        "source": "2016\\world_finals\\family_hotel"
    },
    {
        "problem_name": "Gallery of Pillars",
        "problem_statement": "Your friend Cody-Jamal is working on his new artistic installment called \"Gallery of Pillars\". The\ninstallment is to be exhibited in a square gallery ofNbyNmeters. The gallery is\ndivided intoN2squares of 1 by 1 meter, forming anNbyNmatrix.\nThe exact center of the southwest corner cell is called theviewpoint; a person viewing the\nartwork is supposed to stand there. Each other cell contains a cylindrical pillar. All pillars have\ntwo circular bases of radiusR: one resting on the floor, in the center of its corresponding\ncell, and the other touching the gallery's ceiling. The observer will stand in the viewpoint,\nobserve theN2- 1 pillars, and marvel.\nCody-Jamal is currently scouting venues trying to see how large he can make the value ofN.\nAlso, he has not decided which material the pillars will be made of; it could be concrete,\nor carbon nanotubes, so the radiusRof the base of each pillar could vary from 1 micrometer\nto almost half a meter. Notice that a radius of half a meter would make neighboring pillars touch.\nYou, as a trained mathematician, quickly observe that there could be pillars impossible to see\nfrom the viewpoint. Cody-Jamal asks your help in determining, for different\ncombinations ofNandR, the number of visible pillars. Formally, a pillar is visible\nif and only if there is a straight line segment that runs from the center of the southwest corner\ncell (the viewpoint) to any point on the pillar's boundary, and does not touch or intersect any\nother pillar.\nThe first line of the input gives the number of test cases,T.Tlines follow.\nEach line describes a different test case with two integersNandR.Nis the\nnumber of 1 meter square cells along either dimension of the gallery, andRis the radius of\neach pillar, in micrometers. Thus,R/ 106is the radius of each pillar in meters.\nFor each test case, output one line containingCase #x: y, wherexis the\ntest case number (starting from 1) andyis the number of pillars in the installment\nthat are visible from the viewpoint.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤R< 106/ 2.\n2 ≤N≤ 300.\n2 ≤N≤ 109.\nThe pictures below illustrate the first two samples (not to scale). In the center of the black\ncircle is the observer. The other circles are pillars, with the visible ones in gray and the\nnot visible ones in red. The blue dotted lines represent some of the unblocked lines of sight; the red dotted lines represent blocked lines of sight (that turn gray at the point at which they are first blocked).\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow.\nEach line describes a different test case with two integersNandR.Nis the\nnumber of 1 meter square cells along either dimension of the gallery, andRis the radius of\neach pillar, in micrometers. Thus,R/ 106is the radius of each pillar in meters.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the\ntest case number (starting from 1) andyis the number of pillars in the installment\nthat are visible from the viewpoint.",
        "sample_input": "4\n4 100000\n4 300000\n3 300000\n100 499999",
        "sample_output": "Case #1: 9\nCase #2: 7\nCase #3: 5\nCase #4: 3",
        "source": "2016\\world_finals\\gallery_of_pillars"
    },
    {
        "problem_name": "Integeregex",
        "problem_statement": "In this problem, a valid regular expression is one of the following. In the\nfollowing descriptions,E1,E2, etc. denote\n(not necessarily different) valid regular expressions.\nFor example,7,23,(7)*,(45)*,(1|2|3),((2)*|3),(1|2|3), and((0|1))*are valid expressions.(7),4|5,4*,(1|), and(0|1)*are not.\nWe say that an expressionEmatches a string of digitsDif and\nonly if at least one of the following is true:\nFor example, the expression((1|2))*3matches3,13,123, and2221123, among other\nstrings. However, it doesnotmatch1234,3123,12, or33, among other strings.\nGiven a valid regular expressionR, for how many integers betweenAandB, inclusive, doesRmatch the integer's base 10\nrepresentation (with no leading zeroes)?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line has two positive\nintegersAandB: the inclusive limits of the integer range we\nare interested in. The second has a stringRconsisting only of\ncharacters in the set0123456789()|*, which is guaranteed to be a\nvalid regular expression as described in the statement above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe number of integers in the inclusive range [A,B] that the\nthe regular expressionRmatches.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤A≤B≤ 1018.1 ≤ length ofR≤ 30.\nRcontains no|characters.\nNo additional limits.\nNote that sample cases 5 through 8 would not appear in the Small dataset.\nIn sample case 1, the matches in range are 1, 10, 100, and 1000.\nIn sample case 2, the match in range is 379009.\nIn sample case 3, the matches in range are 12, 34, 1212, 1234, and 3434.\nIn sample case 4, there are no matches in range.\nIn sample case 5, the matches in range are 1, 10, 11, and 100.\nIn sample case 6, the matches in range are 23 and 45.\nIn sample case 7, it is possible to form any number in the range.\nIn sample case 8, the matches in range are 1, 19, 156, 179, 189, and 199.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line has two positive\nintegersAandB: the inclusive limits of the integer range we\nare interested in. The second has a stringRconsisting only of\ncharacters in the set0123456789()|*, which is guaranteed to be a\nvalid regular expression as described in the statement above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe number of integers in the inclusive range [A,B] that the\nthe regular expressionRmatches.",
        "sample_input": "8\n1 1000\n(0)*1(0)*\n379009 379009\n379009\n1 10000\n(12)*(34)*\n4 5\n45\n1 100\n((0|1))*\n1 50\n(01|23|45|67|23)\n1 1000000000000000000\n((0|1|2|3|4|5|6|7|8|9))*\n1 1000\n1(56|(((7|8))*9)*)",
        "sample_output": "Case #1: 4\nCase #2: 1\nCase #3: 5\nCase #4: 0\nCase #5: 4\nCase #6: 2\nCase #7: 1000000000000000000\nCase #8: 6",
        "source": "2016\\world_finals\\integeregex"
    },
    {
        "problem_name": "Map Reduce",
        "problem_statement": "Ben the brilliant video game designer is trying to design maps for his upcoming\naugmented-reality mobile game. Recently, he has created a map which is\nrepresented as a matrix ofRrows andCcolumns. The map consists\nof a bunch of.characters representing empty squares, a bunch of#characters representing impassable walls, a single start position\nrepresented bySand a single finish position represented byF. For example, the map could look like:\nIn Ben's game, apathis a sequence of steps (up, down, left or right)\nto go from one cell to another while not going through any impassable walls.\nBen considers agoodmap to have the following properties:\n#.   .#.#   #.\nThe distance of the shortest path is the minimum number of steps required to\nreach the finish position from the start position. For instance, the shortest\npath in the above example takes 17 steps.\nBeing such a clever mapmaker, Ben realized that he has created a map that is too\nhard for his friends to solve. He would like to reduce its difficulty by\nremoving some of the impassable walls. In particular, he wants to know whether\nit is possible to remove zero or more impassable walls from his map such that\nthe shortest path from start to finish takesexactlyDsteps, and\nthat the resulting map is stillgood. Note that it is not enough to\nsimply findapath withDsteps;Dmust be the number of\nsteps in theshortestpath.\nFor example, ifD= 15, we could remove the impassable wall directly\nbelow the finish position to get a good solution.\nThere is no solution ifD= 5.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing three\nspace-separated integersR,CandD: the number of rows and\ncolumns in the map, and the desired number of steps in the shortest path from\nstart to finish after possibly removing impassable walls.Rlines follow,\neach consisting ofCcharacters (either.,#,SorF) representing Ben's map.\nIt is guaranteed that the map is good, as described in the problem statement.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe wordPOSSIBLEorIMPOSSIBLE, depending on whether\nthe shortest path can be made equal toDby removing some number of walls\nsuch that the map is still good. If it is possible, outputRmore lines\ncontainingCcharacters each, representing the new map. In your output,\nreplace the#characters for removed walls (if any) with.characters.\nIf multiple solutions are possible, you may output any of them.\nMemory limit: 1 GB.1 ≤T≤ 100.Each test case contains exactly oneSand exactly oneF.The input file is at most 3MB in size.\nTime limit: 60 seconds.3 ≤R≤ 40.3 ≤C≤ 40.1 ≤D≤ 1600.\nTime limit: 300 seconds.3 ≤R≤ 1000.3 ≤C≤ 1000.1 ≤D≤ 106.\nNOTE:The Large output breaks the usual cap on Code Jam output size,\nbut you can upload it as normal.\nThe sample output displays one set of answers to the sample cases. Other\nanswers may be possible.\nSample case #1 is the example in the problem statement.\nIn sample case #2, it is possible to remove walls to make the distance of the\nshortest path either 2 or 4, for example. However, there is no way to make the\ndistance of the shortest path exactly 3.\nIn sample case #3, the shortest path already takes 11 steps to begin with, so\nthere is no need to reduce the difficulty of the map.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing three\nspace-separated integersR,CandD: the number of rows and\ncolumns in the map, and the desired number of steps in the shortest path from\nstart to finish after possibly removing impassable walls.Rlines follow,\neach consisting ofCcharacters (either.,#,SorF) representing Ben's map.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe wordPOSSIBLEorIMPOSSIBLE, depending on whether\nthe shortest path can be made equal toDby removing some number of walls\nsuch that the map is still good. If it is possible, outputRmore lines\ncontainingCcharacters each, representing the new map. In your output,\nreplace the#characters for removed walls (if any) with.characters.",
        "sample_input": "3\n6 13 15\n#############\n#S..#..##...#\n###.##..#.#F#\n#...##.##.###\n#.#.........#\n#############\n5 8 3\n########\n#S.....#\n####...#\n#F.....#\n########\n4 10 11\n##########\n#S#...#.F#\n#...#...##\n##########",
        "sample_output": "Case #1: POSSIBLE\n#############\n#S..#..##...#\n###.##..#.#F#\n#...##.##.#.#\n#.#.........#\n#############\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\n##########\n#S#...#.F#\n#...#...##\n##########",
        "source": "2016\\world_finals\\map_reduce"
    },
    {
        "problem_name": "Radioactive Islands",
        "problem_statement": "You are steering a boat from the coordinates (-10,A) to the coordinates\n(10,B). The coordinates are measured in kilometers, and your boat\ntravels at a constant speed of 1 kilometer per hour. You have full control over\nthe path the boat takes. We model the boat as a single point.\nThere areNislands in the area; we model them as single points. The\ni-th island is at the coordinates (0,Ci).\nThe area is radioactive, and you constantly receive 1 microsievert per hour of\nradiation from the general environment, no matter where you are. Moreover,\nthe islands themselves are radioactive, and you constantly receive additional\nradiation at a rate of (Di)-2microsieverts per hour from\nthe i-th island, where Diis your current distance (in kilometers)\nfrom the i-th island. (Formally: let Di(t) be your distance from\nthe i-th island as a function of time t, and X be the total time your journey takes. Then the\ntotal radiation received from the i-th island is the definite integral from 0\nto X of Di(t)-2.) You can get as close to an island as you would like,\nas long as you do not match its exact coordinates.\nFind the minimum total radiation dose that you can receive if you plot your\ncourse optimally.\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test cases consists of two lines. The first line of a\ntest case consists of three values: an integerN, and two floating-point\nnumbersAandB, as described in the statement above. The second\nline of a test case consists ofNfloating-point numbersCi; the i-th of these numbers gives the y coordinate of the\ni-th island.\nAll floating-point numbers are specified to exactly two decimal places.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe minimum radiation dose (in microsieverts) received while completing the\njourney.\nywill be considered correct if it is within an absolute or\nrelative error of 10-3of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.\nMemory limit: 1 GB.-10.00 ≤A≤ 10.00.-10.00 ≤B≤ 10.00.-10.00 ≤Ci≤ 10.00, for all i.Ci≠Cj, for all i ≠ j.\nTime limit: 120 seconds.T≤ 20;N= 1.\nTime limit: 240 seconds.T≤ 50;1 ≤N≤ 2.\nHere is a diagram of the optimal path for sample case #1. We have enlarged\nthe island to make it more visible, but remember to treat it as a single point.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test cases consists of two lines. The first line of a\ntest case consists of three values: an integerN, and two floating-point\nnumbersAandB, as described in the statement above. The second\nline of a test case consists ofNfloating-point numbersCi; the i-th of these numbers gives the y coordinate of the\ni-th island.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe minimum radiation dose (in microsieverts) received while completing the\njourney.",
        "sample_input": "2\n1 1.00 -2.00\n0.00\n2 0.00 0.00\n3.00 -3.00",
        "sample_output": "Case #1: 21.806\nCase #2: 21.706",
        "source": "2016\\world_finals\\radioactive_islands"
    },
    {
        "problem_name": "Bathroom Stalls",
        "problem_statement": "A certain bathroom hasN+ 2 stalls in a single row; the stalls on the\n  left and right ends are permanently occupied by the bathroom guards. The\n  otherNstalls are for users.\nWhenever someone enters the bathroom, they try to choose a stall that is as far\n  from other people as possible. To avoid confusion, they follow deterministic\n  rules: For each empty stall S, they compute two\n  values LSand RS, each of which is the number of empty\n  stalls between S and the closest occupied stall to the left or right,\n  respectively. Then they consider the set of stalls with the farthest closest\n  neighbor, that is, those S for which min(LS, RS) is\n  maximal. If there is only one such stall, they choose it; otherwise, they choose\n  the one among those where max(LS, RS) is maximal. If there\n  are still multiple tied stalls, they choose the leftmost stall among those.\nKpeople are about to enter the bathroom; each one will choose their\n  stall before the next arrives. Nobody will ever leave.\nWhen the last person chooses their stall S, what will the values of\n  max(LS, RS) and min(LS, RS)\n  be?\nThe first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with two integersNandK, as described above.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis max(LS, RS), andzis min(LS, RS) as calculated by the last person to\n  enter the bathroom for their chosen stall S.\n1 ≤T≤ 100.1 ≤K≤N.Time limit: 60 seconds per test set.Memory limit: 1GB.\n1 ≤N≤ 1000.\n1 ≤N≤ 106.\n1 ≤N≤ 1018.\nIn Sample Case #1, the first person occupies the leftmost of the middle two\n  stalls, leaving the following configuration (Ostands for an\n  occupied stall and.for an empty one):O.O..O.\n  Then, the second and last person occupies the stall immediately to the right,\n  leaving 1 empty stall on one side and none on the other.\nIn Sample Case #2, the first person occupies the middle stall, getting toO..O..O. Then, the second and last person occupies the leftmost\n  stall.\nIn Sample Case #3, the first person occupies the leftmost of the two middle\n  stalls, leavingO..O...O. The second person then occupies the\n  middle of the three consecutive empty stalls.\nIn Sample Case #4, every stall is occupied at the end, no matter what the\n  stall choices are.\nIn Sample Case #5, the first and only person chooses the leftmost middle\n  stall.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with two integersNandK, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis max(LS, RS), andzis min(LS, RS) as calculated by the last person to\n  enter the bathroom for their chosen stall S.",
        "sample_input": "5\n4 2\n5 2\n6 2\n1000 1000\n1000 1",
        "sample_output": "Case #1: 1 0\nCase #2: 1 0\nCase #3: 1 1\nCase #4: 0 0\nCase #5: 500 499",
        "source": "2017\\qualification_round\\bathroom_stalls"
    },
    {
        "problem_name": "Fashion Show",
        "problem_statement": "You are about to host a fashion show to show off three new styles of clothing.\n  The show will be held on a stage which is in the most fashionable of all\n  shapes: anN-by-Ngrid of cells.\nEach cell in the grid can be empty (which we represent with a.character) or can contain one fashion model. The models come in three types,\n  depending on the clothing style they are wearing:+,x, and the super-trendyo. A cell with a+orxmodel in it adds 1style pointto the\n  show. A cell with anomodel in it adds 2 style points. Empty\n  cells add no style points.\nTo achieve the maximum artistic effect, there are rules on how models can be\n  placed relative to each other.\nFormally, a model located in row i0and column j0and a\n  model located in row i1and column j1share a row if\n  and only if i0= i1, they share a column if and only if\n  j0= j1, and they share a diagonal if and only if\n  i0+ j0= i1+ j1or\n  i0- j0= i1- j1.\nFor example, the following grid is not legal:\nThe middle row has a pair of models (xando) that\n  does not include a+. The diagonal starting at the+in the bottom row and running up to theoin\n  the middle row has two models, and neither of them is anx.\nHowever, the following grid is legal. No row, column, or diagonal violates\n  the rules.\nYour artistic advisor has already placedMmodels in certain\n  cells, following these rules. You are free to place any number (including\n  zero) of additional models of whichever types you like. You may not remove\n  existing models, but you may upgrade as many existing+andxmodels intoomodels as you wish, as long as the\n  above rules are not violated.\nYour task is to find a legal way of placing and/or upgrading models that\n  earns the maximum possible number of style points.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line with two\n  integersNandM, as described above. Then,Mmore lines\n  follow; the i-th of these lines has a+,x, orocharacter (the type of the model) and two integersRiandCi(the position of the model).\n  The rows of the grid are numbered 1 throughN, from top to bottom.\n  The columns of the grid are numbered 1 throughN, from left to\n  right.\nFor each test case, first output one line containingCase #x: y z, wherexis the test case number\n  (starting from 1),yis the number of style points earned in\n  your arrangement, andzis the total number of models you have\n  added and/or substituted in. Then, for each model that you have added or\n  substituted in, output exactly one line in exactly the same format described\n  in the Input section, where the character is the type of the model that you\n  have added or substituted in. Thesezlines can be in any order.\nIf there are multiple valid answers, you may output any one of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 100.1 ≤Ci≤N, for all i.0 ≤M≤N2.No two pre-placed models appear in the same cell.It is guaranteed that the set of pre-placed models follows the rules.\nRi= 1, for all i. (Any models that are pre-placed are in\n  the top row. Note that you may add/replace models in that row and/or add\n  models in other rows.)\n1 ≤Ri≤N, for all i.\nThe sample output displays one set of answers to the sample cases. Other\n  answers may be possible. Note that the last sample case would not appear in\n  the Small dataset.\nIn sample case #1, the grid is 2-by-2 and is initially blank. The output\n  corresponds to the following grid. (In these explanations, we will use.to denote a blank cell.)\nIn sample case #2, the only cell is already occupied by anomodel, and it is impossible to add a new model or replace theomodel.\nIn sample case #3, the grid looks like this before you place any models:\nThe output corresponds to this grid:\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line with two\n  integersNandM, as described above. Then,Mmore lines\n  follow; the i-th of these lines has a+,x, orocharacter (the type of the model) and two integersRiandCi(the position of the model).\n  The rows of the grid are numbered 1 throughN, from top to bottom.\n  The columns of the grid are numbered 1 throughN, from left to\n  right.",
        "output_description": "For each test case, first output one line containingCase #x: y z, wherexis the test case number\n  (starting from 1),yis the number of style points earned in\n  your arrangement, andzis the total number of models you have\n  added and/or substituted in. Then, for each model that you have added or\n  substituted in, output exactly one line in exactly the same format described\n  in the Input section, where the character is the type of the model that you\n  have added or substituted in. Thesezlines can be in any order.",
        "sample_input": "3\n2 0\n1 1\no 1 1\n3 4\n+ 2 3\n+ 2 1\nx 3 1\n+ 2 2",
        "sample_output": "Case #1: 4 3\no 2 2\n+ 2 1\nx 1 1\nCase #2: 2 0\nCase #3: 6 2\no 2 3\nx 1 2",
        "source": "2017\\qualification_round\\fashion_show"
    },
    {
        "problem_name": "Oversized Pancake Flipper",
        "problem_statement": "Last year,\n  the Infinite House of Pancakes introduced a new kind of pancake.\n  It has a happy face made of chocolate chips on one side (the \"happy side\"),\n  and nothing on the other side (the \"blank side\").\nYou are the head cook on duty. The pancakes are cooked in a single row over a\n  hot surface. As part of its infinite efforts to maximize efficiency, the\n  House has recently given you an oversized pancake flipper that flips exactlyKconsecutive pancakes. That is, in that range ofKpancakes,\n  it changes every happy-side pancake to a blank-side pancake, and vice versa;\n  it doesnotchange the left-to-right order of those pancakes.\nYou cannot flip fewer thanKpancakes at a time with the flipper,\n  even at the ends of the row (since there are raised borders on both sides of\n  the cooking surface). For example, you can flip the firstKpancakes,\n  but not the firstK- 1 pancakes.\nYour apprentice cook, who is still learning the job, just used the\n  old-fashioned single-pancake flipper to flip some individual pancakes and\n  then ran to the restroom with it, right before the time when customers come\n  to visit the kitchen. You only have the oversized pancake flipper left, and\n  you need to use it quickly to leave all the cooking pancakes happy side up,\n  so that the customers leave feeling happy with their visit.\nGiven the current state of the pancakes, calculate the minimum number of uses\n  of the oversized pancake flipper needed to leave all pancakes happy side up,\n  or state that there is no way to do it.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringSand an integerK.Srepresents the row of pancakes: each of its\n  characters is either+(which represents a pancake that is\n  initially happy side up) or-(which represents a pancake that\n  is initially blank side up).\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif there is no way to get all the pancakes\n  happy side up, or an integer representing the the minimum number of times you\n  will need to use the oversized pancake flipper to do it.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.Every character inSis either+or-.2 ≤K≤ length ofS.\n2 ≤ length ofS≤ 10.\n2 ≤ length ofS≤ 1000.\nIn Case #1, you can get all the pancakes happy side up by first flipping the\n  leftmost 3 pancakes, getting to++++-++-, then the rightmost 3,\n  getting to++++---+, and finally the 3 pancakes that remain\n  blank side up. There are other ways to do it with 3 flips or more, but none\n  with fewer than 3 flips.\nIn Case #2, all of the pancakes are already happy side up, so there is no\n  need to flip any of them.\nIn Case #3, there is no way to make the second and third pancakes from the\n  left have the same side up, because any flip flips them both. Therefore,\n  there is no way to make all of the pancakes happy side up.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringSand an integerK.Srepresents the row of pancakes: each of its\n  characters is either+(which represents a pancake that is\n  initially happy side up) or-(which represents a pancake that\n  is initially blank side up).",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif there is no way to get all the pancakes\n  happy side up, or an integer representing the the minimum number of times you\n  will need to use the oversized pancake flipper to do it.",
        "sample_input": "3\n---+-++- 3\n+++++ 4\n-+-+- 4",
        "sample_output": "Case #1: 3\nCase #2: 0\nCase #3: IMPOSSIBLE",
        "source": "2017\\qualification_round\\oversized_pancake_flipper"
    },
    {
        "problem_name": "Tidy Numbers",
        "problem_statement": "Tatiana likes to keep things tidy. Her toys are sorted from smallest to\n  largest, her pencils are sorted from shortest to longest and her computers\n  from oldest to newest. One day, when practicing her counting skills, she\n  noticed that some integers, when written in base 10 with no leading zeroes,\n  have their digits sorted in non-decreasing order. Some examples of this are 8,\n  123, 555, and 224488. She decided to call these numberstidy. Numbers\n  that do not have this property, like 20, 321, 495 and 999990, are not tidy.\nShe just finished countingallpositive integers in ascending order from 1 toN. What was the last tidy number she counted?\nThe first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with a single integerN,\n  the last number counted by Tatiana.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1)\n  andyis the last tidy number counted by Tatiana.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.\n1 ≤N≤ 1000.\n1 ≤N≤ 1018.\nNote that the last sample case would not appear in the Small dataset.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with a single integerN,\n  the last number counted by Tatiana.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1)\n  andyis the last tidy number counted by Tatiana.",
        "sample_input": "4\n132\n1000\n7\n111111111111111110",
        "sample_output": "Case #1: 129\nCase #2: 999\nCase #3: 7\nCase #4: 99999999999999999",
        "source": "2017\\qualification_round\\tidy_numbers"
    },
    {
        "problem_name": "Alphabet Cake",
        "problem_statement": "You are catering a party for some children, and you are serving them a cake\n  in the shape of a grid withRrows andCcolumns. Your\n  assistant has started to decorate the cake by writing every child's initial\n  in icing on exactly one cell of the cake. Each cell contains at most one\n  initial, and since no two children share the same initial, no initial\n  appears more than once on the cake.\nEach child wants a single rectangular (grid-aligned) piece of cake that\n  has their initial and no other child's initial(s). Can you find a way to\n  assign every blank cell of the cake to one child, such that this goal is\n  accomplished? It is guaranteed that this is always possible. There is no\n  need to split the cake evenly among the children, and one or more of them may\n  even get a 1-by-1 piece; this will be a valuable life lesson about unfairness.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersRandC. Then, there areRmore lines ofCcharacters each, representing the cake. Each character is either an\n  uppercase English letter (which means that your assistant has already added\n  that letter to that cell) or?(which means that that cell is\n  blank).\nFor each test case, output one line containingCase #x:and\n  nothing else. Then outputRmore lines ofCcharacters each.\n  Your output grid must be identical to the input grid, but withevery?replaced with an uppercase English letter, representing that\n  that cell appears in the slice for the child who has that initial. You may\n  not add letters that did not originally appear in the input. In your grid,\n  for each letter, the region formed by all the cells containing that letter\n  must be a single grid-aligned rectangle.\nIf there are multiple possible answers, you may output any of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.There is at least one letter in the input grid.No letter appears in more than one cell in the input grid.It is guaranteed that at least one answer exists for each test case.\n1 ≤R≤ 12.1 ≤C≤ 12.R×C≤ 12.\n1 ≤R≤ 25.1 ≤C≤ 25.\nThe sample output displays one set of answers to the sample cases. Other\n  answers may be possible.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersRandC. Then, there areRmore lines ofCcharacters each, representing the cake. Each character is either an\n  uppercase English letter (which means that your assistant has already added\n  that letter to that cell) or?(which means that that cell is\n  blank).",
        "output_description": "For each test case, output one line containingCase #x:and\n  nothing else. Then outputRmore lines ofCcharacters each.\n  Your output grid must be identical to the input grid, but withevery?replaced with an uppercase English letter, representing that\n  that cell appears in the slice for the child who has that initial. You may\n  not add letters that did not originally appear in the input. In your grid,\n  for each letter, the region formed by all the cells containing that letter\n  must be a single grid-aligned rectangle.",
        "sample_input": "3\n3 3\nG??\n?C?\n??J\n3 4\nCODE\n????\n?JAM\n2 2\nCA\nKE",
        "sample_output": "Case #1:\nGGJ\nCCJ\nCCJ\nCase #2:\nCODE\nCOAE\nJJAM\nCase #3:\nCA\nKE",
        "source": "2017\\round_1a\\alphabet_cake"
    },
    {
        "problem_name": "Play the Dragon",
        "problem_statement": "You are a friendly dragon fighting to protect your lair from a greedy knight!\n  You haveHdhealth points and an attack power ofAd, and the knight hasHkhealth points\n  and an attack power ofAk. If your health drops to 0 or\n  below at any point; you are knocked out and you instantly lose; if the\n  knight's health drops to 0 or below at any point, the knight is knocked out\n  and you win!\nYou will battle the knight in a series of turns. On each turn, you go first,\n  and you can choose and execute any one of the following actions.Attack: Reduce the opponent's health by your own attack power.Buff: Increase your attack power byBfor the rest of the\n    battle.Cure: Your health becomesHd.Debuff: Decrease the opponent's attack power byDfor the rest of\n    the battle. If a Debuff would cause the opponent's attack power to become\n    less than 0, it instead sets it to 0.Then, if the knight's health is greater than 0 following your action, the\n  knight will execute an Attack action. After that, the turn ends. (Note that\n  a turn in which you defeat the knight still counts as a turn even though\n  the knight does not get to act.)Note that buffs stack with each other; every buff adds an additionalBto your attack power. Similarly, debuffs stack with each other.You would like to defeat the knight as fast as possible (if it is possible)\n  so that you will not be late to help the villagers roast marshmallows at\n  tonight's festival. Can you determine the minimum number of turns in which\n  you can defeat the knight, or that it isIMPOSSIBLEto do so?\nThen, if the knight's health is greater than 0 following your action, the\n  knight will execute an Attack action. After that, the turn ends. (Note that\n  a turn in which you defeat the knight still counts as a turn even though\n  the knight does not get to act.)\nNote that buffs stack with each other; every buff adds an additionalBto your attack power. Similarly, debuffs stack with each other.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with six integersHd,Ad,Hk,Ak,B, andD, as described above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif it is not possible to defeat the knight,\n  or the minimum number of turns needed to defeat the knight.\nMemory limit: 1 GB.1 ≤T≤ 100.\nTime limit: 60 seconds.1 ≤Hd≤ 100.1 ≤Ad≤ 100.1 ≤Hk≤ 100.1 ≤Ak≤ 100.0 ≤B≤ 100.0 ≤D≤ 100.\nTime limit: 240 seconds.1 ≤Hd≤ 109.1 ≤Ad≤ 109.1 ≤Hk≤ 109.1 ≤Ak≤ 109.0 ≤B≤ 109.0 ≤D≤ 109.\nIn Case #1, you have 11 health and 5 attack, and the knight has 16 health\n  and 5 attack. One possible optimal sequence of actions is:Turn 1: Attack, reducing the knight's health to 11. Then the knight\n      attacks and reduces your health to 6.Turn 2: Attack, reducing the knight's health to 6. Then the knight\n      attacks and reduces your health to 1.Turn 3: Cure, restoring your health to 11. Then the knight attacks and\n      reduces your health to 6. (If you had attacked instead this turn, the\n      knight's next attack would have caused you to lose.)Turn 4: Attack, reducing the knight's health to 1. Then the knight\n      attacks and reduces your health to 1.Turn 5: Attack, reducing the knight's health to -4. You instantly win\n      and the knight does not get another attack.\nIn Case #2, one possible optimal sequence of actions is:Turn 1: Buff, increasing your attack power to 3. Then the knight\n      attacks and reduces your health to 1.Turn 2: Attack, reducing the knight's health to 0. You instantly win\n      and the knight does not get another attack.\nIn Case #3, the knight only needs two attacks to defeat you, and you cannot\n  do enough damage fast enough to defeat the knight. You can indefinitely\n  extend the combat by executing the Cure action after every attack, but it is\n  impossible to actually defeat the knight.\nIn Case #4, one possible optimal sequence of actions is: Attack, Debuff,\n  Buff, Attack, Attack.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with six integersHd,Ad,Hk,Ak,B, andD, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif it is not possible to defeat the knight,\n  or the minimum number of turns needed to defeat the knight.",
        "sample_input": "4\n11 5 16 5 0 0\n3 1 3 2 2 0\n3 1 3 2 1 0\n2 1 5 1 1 1",
        "sample_output": "Case #1: 5\nCase #2: 2\nCase #3: IMPOSSIBLE\nCase #4: 5",
        "source": "2017\\round_1a\\play_the_dragon"
    },
    {
        "problem_name": "Ratatouille",
        "problem_statement": "You've discovered it: the ultimate recipe for ratatouille, the famous French\n  dish! You know which ingredients to use, and how many grams of each one to\n  use, in order to make one serving of ratatouille. But you believe that anyone\n  can cook, and so you want to share the recipe with the world... and make some\n  money in the process!\nYou have ordered some ingredient packages that are easy to ship. Each package\n  contains some amount of one ingredient; different packages may have different\n  amounts even if they contain the same ingredient. For convenience, you\n  ordered the same number of packages of each ingredient.\nYou would like to use these packages to form as many ratatouillekitsas possible to send to customers. A kit consists ofexactly onepackage of each ingredient, and a label with the integer number of servings\n  of ratatouille that the kit makes. Since you do not want to shortchange\n  customers or waste food, each package must contain between 90 and 110 percent\n  (inclusive) of the amount of that ingredient that is actually needed to make\n  the number of servings of ratatouille on the kit's label.\nFor example, suppose that one serving of ratatouille takes 500 g of tomato\n  and 300 g of onion. Suppose that you have a 900 g package of tomato and a\n  660 g package of onion. You could form these into a kit that makes two\n  servings of ratatouille. To make two servings, 1000 g of tomato and 600 g of\n  onion are required. Since the 900 g of tomato you have is within [90, 110]%\n  of the 1000 g of tomato required, and the 660 g of onion you have is within\n  [90, 110]% of the 600 g of onion required, this is acceptable. However, you\n  could not say that the kit makes one or three servings of ratatouille, nor\n  could you say that it makes 1.999 servings (the number of servings must be\n  an integer).\nNote that there are some sets of packages that could never form a kit.\n  Continuing with our recipe above, if you have a 1500 g package of tomato and\n  an 809 g package of onion, for example, there is no amount of servings that\n  you can make. Three servings would take 1500 g of tomato and 900 g of onion,\n  and the amount of onion is not within the [90, 110]% range. No other integer\n  amount of servings works, either.\nYou want to share your recipe with as many customers as possible, so you want\n  to produce the maximum number of valid kits. (Of course, each package can be\n  used in at most one kit.) What is the largest number of kits that you can\n  form? Note that you arenotrequired to maximize the total number of\n  servings of ratatouille formed.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of the following:\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum number of kits you can produce, as described above.\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤Ri≤ 106, for all i.1 ≤Qij≤ 106, for all i and j.\nTime limit: 60 seconds.1 ≤N≤ 2.1 ≤P≤ 8.\nTime limit: 120 seconds.1 ≤N≤ 50.1 ≤P≤ 50.N×P≤ 1000.\nNote that the last sample case would not appear in the Small dataset.Sample cases #1 and #2 are the ones described in the problem statement.\n\nIn sample case #3, you can form a kit out of the 450 g package of the first\n  ingredient and the 1100 g package of the second ingredient, and say that the\n  kit makes 10 servings of ratatouille. That number of servings requires 500 g\n  of the first ingredient; you have 450 g, which is 90% of 500 and within the\n  allowed limit. It requires 1000 g of the second ingredient; you have 1100 g,\n  which is 110% of 1000 and within the allowed limit.\nOnce you form this kit, however, you cannot form the remaining packages into\n  a kit. 449 g of the first ingredient and 1101 g of the second ingredient\n  would not be able to form 10 (or any other number of) servings. In fact, the\n  (450 g, 1100 g) kit is the only kit that can be formed from these packages.\nIn sample case #4, no kits can be formed. Note that the recipe requires\n  particular amounts of particular ingredientsin the given order; the\n  ingredients are not interchangeable. This is fine French cuisine, after all!\nIn sample case #5, the recipe has only one ingredient — how elegantly\n  simple! A single serving cannot use more than 11 g, and two servings cannot\n  use fewer than 18 g. It is possible to form three kits: two with an 11 g\n  package, and one with an 18 g package.\nIn sample case #6, you can form three valid kits: (700 g, 800 g, 900 g),\n  which makes 10 servings, and (1500 g, 1600 g, 1700 g) and (1260 g, 1440 g,\n  1620 g), each of which makes 20 servings. Note that you could also say that\n  the (1260 g, 1440 g, 1620 g) kit makes 17, 18, or 19 servings, but it does\n  not matter how many servings a kit makes as long as the kit is valid.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of the following:",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum number of kits you can produce, as described above.",
        "sample_input": "6\n2 1\n500 300\n900\n660\n2 1\n500 300\n1500\n809\n2 2\n50 100\n450 449\n1100 1101\n2 1\n500 300\n300\n500\n1 8\n10\n11 13 17 11 16 14 12 18\n3 3\n70 80 90\n1260 1500 700\n800 1440 1600\n1700 1620 900",
        "sample_output": "Case #1: 1\nCase #2: 0\nCase #3: 1\nCase #4: 0\nCase #5: 3\nCase #6: 3",
        "source": "2017\\round_1a\\ratatouille"
    },
    {
        "problem_name": "Pony Express",
        "problem_statement": "It's the year 1860, and the Pony Express is the fastest mail delivery system\n  joining the East and West coasts of the United States. This system\n  servesNdifferent cities. In each city, there is one horse (as in the\n  expression \"one-horse town\"); each horse travels at a certain constant speed\n  and has a maximum total distance it can travel before it becomes too tired to\n  continue.\nThe Pony Express rider starts off on the starting city's horse. Every time the\n  rider reaches a city, they may continue to use their current horse or switch\n  to that city's horse; switching is instantaneous. Horses never get a chance to\n  rest, so whenever part of a horse's maximum total distance is \"used up\", it is\n  used up forever! When the rider reaches the destination city, the mail is\n  delivered.\nThe routes between cities were established via complicated negotiations\n  between company owners, lawmakers, union delegates, and cousin Pete. That\n  means that the distances between cities do not necessarily follow common\n  sense: for instance, they do not necessarily comply with the triangle\n  inequality, and the distance from city A to city B might be different from the\n  distance from city B to city A!\nYou are a time traveling entrepreneur, and you have brought a fast computer\n  from the future. A single computer is not enough for you to set up an e-mail\n  service and make the Pony Express obsolete, but you can use it to make optimal\n  routing plans for the Pony Express. Given all data about routes between cities\n  and the horses in each city, and a list of pairs of starting and ending\n  cities, can you quickly calculate the minimum time necessary for each\n  delivery? (You should treat all of these deliveries as independent; using\n  cities/horses on one route does not make them unavailable on other routes.)\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case is described as follows:\nFor each test case, output one line containingCase #x: y1y2...  yQ, wherexis the\n  test case number (starting from 1) andykis the\n  minimum time, in hours, to deliver a letter from cityUkto\n  cityVk.\nEachykwill be considered correct if it is within an\n  absolute or relative error of 10-6of the correct answer. See\n  theFAQfor an explanation of\n  what that means, and what formats of real numbers we accept.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.2 ≤N≤ 100.1 ≤Ei≤ 109, for all i.1 ≤Si≤ 1000, for all i.-1 ≤Dij≤ 109, for all i, j.Dii= -1, for all i. (There are no direct routes from a city to itself.)Dij≠ 0, for all i, j.Uk≠Vk, for all k.It is guaranteed that the delivery fromUktoVkcan be\n  accomplished with the given horses, for all k.Ul≠Umand/orVl≠Vm,\n  for all different l, m. (No ordered pair of cities to investigate is repeated within a test case.)\nDij= -1, for all i, j where i + 1 ≠ j.\n  (The cities are in a single line; each route goes from one city to the next city in line.)Q= 1.U1= 1.V1=N.\n  (The only delivery to calculate is between the first and last cities in the line).\n1 ≤Q≤ 100.1 ≤Uk≤N, for all k.1 ≤Vk≤N, for all k.\nNote that the last sample case would not appear in the Small dataset.\nIn Case #1 there are two options: use the horse in city 1 for the entire trip,\n  or change horses in city 2. Both horses have enough endurance, so both options\n  are viable. Since the horse in city 2 is faster, it is better to change, for a\n  total time of 1/3 + 1/4.\nIn Case #2 there are two intermediate cities in which you can change\n  horses. If you change horses in city 2, however, your new horse, while\n  blazingly fast, will not have enough endurance, so you will be forced to\n  change again in city 3. If you keep your horse, you will have the option to\n  change horses (or not) in city 3. So, the three options, with their total\n  times, are:\nIn Case #3, there are lots of alternatives for each delivery. The optimal one\n  for the first delivery (city 2 to city 4) is to go to city 1 in time 10/1000,\n  change horses, and then go to cities 2, 3 and 4, in that order, using the\n  horse from city 1, which takes time (10 + 10 + 10) / 60.\nFor the second delivery (city 3 to city 2) you have no choice but to first go\n  to city 4 which takes time 10/5. Your relatively fast horse does not have\n  enough endurance to get anywhere else, so you need to grab the horse in city\n  4. You could use it to get directly to city 1 in time 15, but that would be\n  slower than riding it to city 2 in time 6 and then using the blazingly fast\n  horse in city 2 to get to city 1 in just 10/1000 extra time.\nIn the third delivery (city 3 to city 1) of Case #3 it is optimal to use the\n  first two steps of the previous one, for a total time of 10/5 + 6 = 8.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case is described as follows:",
        "output_description": "For each test case, output one line containingCase #x: y1y2...  yQ, wherexis the\n  test case number (starting from 1) andykis the\n  minimum time, in hours, to deliver a letter from cityUkto\n  cityVk.",
        "sample_input": "3\n3 1\n2 3\n2 4\n4 4\n-1 1 -1\n-1 -1 1\n-1 -1 -1\n1 3\n4 1\n13 10\n1 1000\n10 8\n5 5\n-1 1 -1 -1\n-1 -1 1 -1\n-1 -1 -1 10\n-1 -1 -1 -1\n1 4\n4 3\n30 60\n10 1000\n12 5\n20 1\n-1 10 -1 31\n10 -1 10 -1\n-1 -1 -1 10\n15 6 -1 -1\n2 4\n3 1\n3 2",
        "sample_output": "Case #1: 0.583333333\nCase #2: 1.2\nCase #3: 0.51 8.01 8.0",
        "source": "2017\\round_1b\\pony_express"
    },
    {
        "problem_name": "Stable Neigh-bors",
        "problem_statement": "You are lucky enough to ownNpet unicorns. Each of your unicorns has\n  either one or two of the following kinds of hairs in its mane: red hairs,\n  yellow hairs, and blue hairs. The color of a mane depends on exactly which\n  sorts of colored hairs it contains:\nYou haveR,O,Y,G,B, andVunicorns with red, orange, yellow, green, blue, and violet manes,\n  respectively.\nYou have just built a circular stable withNstalls, arranged in a\n  ring such that each stall borders two other stalls. You would like to put\n  exactly one of your unicorns in each of these stalls. However, unicorns need\n  to feel rare and special, so no unicorn can be next to another unicorn that\n  shares at least one of the hair colors in its mane. For example, a unicorn\n  with an orange mane cannot be next to a unicorn with a violet mane, since\n  both of those manes have red hairs. Similarly, a unicorn with a green mane\n  cannot be next to a unicorn with a yellow mane, since both of those have\n  yellow hairs.\nIs it possible to place all of your unicorns? If so, provide any one\n  arrangement.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with seven integers:N,R,O,Y,G,B, andV.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif it is not possible to place all the unicorns,\n  or a string ofNcharacters representing the placements of unicorns in\n  stalls, starting at a point of your choice and reading clockwise around the\n  circle. UseRto represent each unicorn with a red mane,Oto represent each unicorn with an orange mane, and so on withY,G,B, andV. This\n  arrangement must obey the rules described in the statement above.\nIf multiple arrangements are possible, you may print any of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.3 ≤N≤ 1000.R+O+Y+G+B+V=N.0 ≤ Z for each Z in {R,O,Y,G,B,V}.\nO=G=V= 0. (Each unicorn has only one hair color in\n  its mane.)\nNo restrictions beyond the general limits. (Each unicorn may have either one\n    or two hair colors in its mane.)\nNote that the last two sample cases would not appear in the Small dataset.\nFor sample case #1, there are many possible answers; for example, another isBYBRYR. Note thatBYRYRBwouldnotbe a\n  valid answer; remember that the stalls form a ring, and the first touches\n  the last!\nIn sample case #2, there are only three stalls, and each stall is a neighbor\n  of the other two, so the two unicorns with yellow manes would have to be\n  neighbors, which is not allowed.\nFor sample case #3, note that arranging the unicorns in the same color\n  pattern as the Google logo (BRYBGR) would not be valid, since a\n  unicorn with a blue mane would be a neighbor of a unicorn with a green mane,\n  and both of those manes share blue hairs.\nIn sample case #4, no two unicorns with yellow manes can be neighbors, and\n  no two unicorns with violet manes can be neighbors.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with seven integers:N,R,O,Y,G,B, andV.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif it is not possible to place all the unicorns,\n  or a string ofNcharacters representing the placements of unicorns in\n  stalls, starting at a point of your choice and reading clockwise around the\n  circle. UseRto represent each unicorn with a red mane,Oto represent each unicorn with an orange mane, and so on withY,G,B, andV. This\n  arrangement must obey the rules described in the statement above.",
        "sample_input": "4\n6 2 0 2 0 2 0\n3 1 0 2 0 0 0\n6 2 0 1 1 2 0\n4 0 0 2 0 0 2",
        "sample_output": "Case #1: RYBRBY\nCase #2: IMPOSSIBLE\nCase #3: YBRGRB\nCase #4: YVYV",
        "source": "2017\\round_1b\\stable_neigh-bors"
    },
    {
        "problem_name": "Steed 2: Cruise Control",
        "problem_statement": "Annie is a bus driver with a high-stress job. She tried to unwind by going on\n  a Caribbean cruise, but that also turned out to be stressful, so she has\n  recently taken up horseback riding.\nToday, Annie is riding her horse to the east along a long and narrow one-way\n  road that runs west to east. She is currently at kilometer 0 of the road, and\n  her destination is at kilometerD; kilometers along the road are\n  numbered from west to east.\nThere areNother horses traveling east on the same road; all of them\n  will go on traveling forever, and all of them are currently between Annie's\n  horse and her destination. The i-th of these horses is initially at kilometerKiand is traveling at its maximum speed ofSikilometers per hour.\nHorses are very polite, and a horse H1will not pass (move ahead\n  of) another horse H2that started off ahead of H1. (Two\n  or more horses can share the same position for any amount of time; you may\n  consider the horses to be single points.) Horses (other than Annie's) travel\n  at their maximum speeds, except that whenever a horse H1catches\n  up to another slower horse H2, H1reduces its speed to\n  match the speed of H2.\nAnnie's horse, on the other hand, does not have a maximum speed and can\n  travel at any speed that Annie chooses, as long as it does not pass another\n  horse. To ensure a smooth ride for her and her horse, Annie wants to choose\n  a single constant \"cruise control\" speed for her horse for the entire trip,\n  from her current position to the destination, such that her horse will not\n  pass any other horses. What is the maximum such speed that she can choose?\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with two integersDandN: the destination position of all of the horses (in kilometers)\n  and the number of other horses on the road. Then,Nlines follow. The\n  i-th of those lines has two integersKiandSi: the initial position (in kilometers) and maximum speed\n  (in kilometers per hour) of the i-th of the other horses on the road.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum constant speed (in kilometers per hour) that Annie can use\n  without colliding with other horses.ywill be considered\n  correct if it is within an absolute or relative error of 10-6of\n  the correct answer. See theFAQfor an explanation of what\n  that means, and what formats of real numbers we accept.\n1 ≤T≤ 100.0 <Ki<D≤ 109, for all i.Ki≠Kj, for all i ≠ j. (No two\n    horses start in the same position.)1 ≤Si≤ 10000.Time limit: 20 seconds per test set.Memory limit: 1GB.\n1 ≤N≤ 2.\n1 ≤N≤ 1000.\nIn Sample Case #1, there is one other (very slow!) horse on the road; it will\n  reach Annie's destination after 25 hours. Anything faster than 101 kilometers\n  per hour would cause Annie to pass the horse before reaching the destination.\nIn Sample Case #2, there are two other horses on the road. The faster horse\n  will catch up to the slower horse at kilometer 240 after 2 hours. Both horses\n  will then go at the slower horse's speed for 1 more hour, until the horses\n  reach Annie's destination at kilometer 300. The maximum speed that Annie can\n  choose without passing another horse is 100 kilometers per hour.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with two integersDandN: the destination position of all of the horses (in kilometers)\n  and the number of other horses on the road. Then,Nlines follow. The\n  i-th of those lines has two integersKiandSi: the initial position (in kilometers) and maximum speed\n  (in kilometers per hour) of the i-th of the other horses on the road.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum constant speed (in kilometers per hour) that Annie can use\n  without colliding with other horses.ywill be considered\n  correct if it is within an absolute or relative error of 10-6of\n  the correct answer. See theFAQfor an explanation of what\n  that means, and what formats of real numbers we accept.",
        "sample_input": "3\n2525 1\n2400 5\n300 2\n120 60\n60 90\n100 2\n80 100\n70 10",
        "sample_output": "Case #1: 101.000000\nCase #2: 100.000000\nCase #3: 33.333333",
        "source": "2017\\round_1b\\steed_2_cruise_control"
    },
    {
        "problem_name": "Ample Syrup",
        "problem_statement": "The kitchen at the Infinite House of Pancakes has just received an order for\n  a stack ofKpancakes! The chef currently hasNpancakes\n  available, whereN≥K. Each pancake is a cylinder, and\n  different pancakes may have different radii and heights.\nAs the sous-chef, you must chooseKout of theNavailable pancakes, discard the others, and arrange thoseKpancakes\n  in a stack on a plate as follows. First, take the pancake that has the\n  largest radius, and lay it on the plate on one of its circular faces. (If\n  multiple pancakes have the same radius, you can use any of them.) Then, take\n  the remaining pancake with the next largest radius and lay it on top of that\n  pancake, and so on, until allKpancakes are in the stack and the\n  centers of the circular faces are aligned in a line perpendicular to the\n  plate, as illustrated by this example:\n\nYou know that there is only one thing your diners love as much as they love\n  pancakes: syrup! It is best to maximize the total amount of exposed pancake\n  surface area in the stack, since more exposed pancake surface area means more\n  places to pour on delicious syrup. Any part of a pancake that is not touching\n  part of another pancake or the plate is considered to be exposed.\nIf you choose theKpancakes optimally, what is the largest total\n  exposed pancake surface area you can achieve?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandK: the total number of available pancakes, and the size\n  of the stack that the diner has ordered. Then,Nmore lines follow.\n  Each contains two integersRiandHi:\n  the radius and height of the i-th pancake, in millimeters.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the maximum possible total exposed pancake surface area, in\n  millimeters squared.ywill be considered correct if it is\n  within an absolute or relative error of 10-6of the correct\n  answer. See theFAQfor an\n  explanation of what that means, and what formats of real numbers we accept.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤K≤N.1 ≤Ri≤ 106, for all i.1 ≤Hi≤ 106, for all i.\n1 ≤N≤ 10.\n1 ≤N≤ 1000.\nIn sample case #1, the \"stack\" consists only of one pancake. A stack of just\n  the first pancake would have an exposed area of π ×R02+ 2 × π *R0×H0= 14000π mm2. A stack of just the\n  second pancake would have an exposed area of 44000π mm2. So it\n  is better to use the second pancake.\nIn sample case #2, we can use both of the same pancakes from case #1. The\n  first pancake contributes its top area and its side, for a total of 14000π\n  mm2. The second pancake contributes some of its top area (the\n  part not covered by the first pancake) and its side, for a total of 34000π\n  mm2. The combined exposed surface area is 48000π\n  mm2.\nIn sample case #3, all of the pancakes have radius 100 and height 10. If we\n  stack two of these together, we effectively have a single new cylinder of\n  radius 100 and height 20. The exposed surface area is 14000π\n  mm2.\nIn sample case #4, the optimal stack uses the pancakes with radii of 8 and\n  9.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandK: the total number of available pancakes, and the size\n  of the stack that the diner has ordered. Then,Nmore lines follow.\n  Each contains two integersRiandHi:\n  the radius and height of the i-th pancake, in millimeters.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the maximum possible total exposed pancake surface area, in\n  millimeters squared.ywill be considered correct if it is\n  within an absolute or relative error of 10-6of the correct\n  answer. See theFAQfor an\n  explanation of what that means, and what formats of real numbers we accept.",
        "sample_input": "4\n2 1\n100 20\n200 10\n2 2\n100 20\n200 10\n3 2\n100 10\n100 10\n100 10\n4 2\n9 3\n7 1\n10 1\n8 4",
        "sample_output": "Case #1: 138230.076757951\nCase #2: 150796.447372310\nCase #3: 43982.297150257\nCase #4: 625.176938064",
        "source": "2017\\round_1c\\ample_syrup"
    },
    {
        "problem_name": "Core Training",
        "problem_statement": "Writing Code Jam problems is hard, so we have built an AI to come up with new\n  ideas. To make the AI as creative as possible, we have given itNdifferent \"cores\", each of which has its own \"personality\". However, just\n  like people, these cores may become distracted or corrupt or may refuse to\n  work; the i-th core has asuccess probabilityPiof\n  functioning properly. As long as at leastKof the cores function\n  properly, the AI will function properly. Otherwise, it will probably become\n  evil and trap us in a maze of fiendish puzzles of its own design. And who\n  knows what it might do to Code Jam — it might just write a bunch of\n  tough probability problems!\nTo prevent this from happening, we plan to train one or more of the cores to\n  become more reliable. We have a total ofU\"training units\" that we\n  can use to improve the cores. Spending X units on the i-th core will\n  add X to its success probability. We can divide up the units among the\n  cores however we like, and it is possible that one or more cores may not\n  receive any units. Of course, a core's success probability cannot be\n  increased above 1.\nIf we assign the training units to maximize the probability that the AI will\n  function properly, what is that probability?\nThis problem has 2 Small datasets and no Large dataset. You must solve the\n  first Small dataset before you can attempt the second Small dataset. You will\n  be able to retry either of the datasets (with a time penalty).\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line\n  contains two integersNandK: the total number of cores, and\n  the minimum number of cores that must succeed for the AI to function\n  properly. The second line contains one rationalU: the number of\n  training units. The third line containsNrational numbersPi; the i-th of these gives the probability that the i-th\n  core will function properly. All of these probabilities are specified to\n  exactly four decimal places of precision.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the probability that the AI will function properly if the training units\n  are assigned optimally.ywill be considered correct if it is\n  within an absolute or relative error of 10-6of the correct\n  answer. See theFAQfor an\n  explanation of what that means, and what formats of real numbers we accept.\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 50.For all i, 0.0000 ≤Pi≤ 1.0000.0.0000 ≤U≤N- the sum of allPi.\n    (There will not be more training units than can be used.)\nTime limit: 20 seconds.K=N.(All of the cores must function properly for the AI\n  to function properly.)\nTime limit: 40 seconds.1 ≤K≤N.\nNote that the last two sample cases would not appear in Small dataset 1.\nIn Sample Case #1, we have enough training units to spend to give all cores\n  a success probability of 1, so the AI will certainly function properly.\nIn Sample Case #2, both of the cores must function properly for the AI to\n  function properly, so we must give each core at least some training units.\n  The best option turns out to be to train each one up to 0.5. Then the\n  probability that the AI functions properly is 0.5 × 0.5 = 0.25. Any\n  other assignment is inferior; for instance, if we train one core to 0.9 and\n  the other core to 0.1, the probability of success is only 0.9 × 0.1 =\n  0.09.\nIn Sample Case #3, we have no training units to spend, and at least one of\n  the two cores must function properly for the AI to function properly. We can\n  approach this by first calculating the probability that the AI doesnotfunction properly, which happens only if both cores fail to\n  function properly. The probability that both cores fail is (1 - 0.9) ×\n  (1 - 0.8) = 0.02. So the probability that at least one core functions\n  properly, and thus that the AI functions properly, is 1 - 0.02 = 0.98.\nIn Sample Case #4, the optimal strategy is to give all the training units to\n  the second core. That makes the probability of at least one core functioning\n  properly 1 - (0.4 × 0.6) = 0.76. All other options are inferior; for\n  example, giving all the training units to the first core only yields 0.75,\n  and dividing them equally among the cores gives 0.7525.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line\n  contains two integersNandK: the total number of cores, and\n  the minimum number of cores that must succeed for the AI to function\n  properly. The second line contains one rationalU: the number of\n  training units. The third line containsNrational numbersPi; the i-th of these gives the probability that the i-th\n  core will function properly. All of these probabilities are specified to\n  exactly four decimal places of precision.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the probability that the AI will function properly if the training units\n  are assigned optimally.ywill be considered correct if it is\n  within an absolute or relative error of 10-6of the correct\n  answer. See theFAQfor an\n  explanation of what that means, and what formats of real numbers we accept.",
        "sample_input": "4\n4 4\n1.4000\n0.5000 0.7000 0.8000 0.6000\n2 2\n1.0000\n0.0000 0.0000\n2 1\n0.0000\n0.9000 0.8000\n2 1\n0.1000\n0.4000 0.5000",
        "sample_output": "Case #1: 1.000000\nCase #2: 0.250000\nCase #3: 0.980000\nCase #4: 0.760000",
        "source": "2017\\round_1c\\core_training"
    },
    {
        "problem_name": "Parenting Partnering",
        "problem_statement": "Cameron and Jamie are longtime life partners and have recently become parents!\n  Being in charge of a baby, exciting as it is, is not without challenges.\n  Given that both parents have a scientific mind, they have decided to take a\n  scientific approach to baby care.\nCameron and Jamie are establishing a daily routine and need to decide who\n  will be the main person in charge of the baby at each given time. They have\n  been equal partners their whole relationship, and they do not want to stop\n  now, so they decided that each of them will be in charge for exactly 12\n  hours (720 minutes) per day.\nCameron and Jamie have other activities that they either need or want to\n  do on their own. Cameron hasACof these and Jamie hasAJ. These activities always take place at the same times\n  each day. None of Cameron's activities overlap with Jamie's activities, so at\n  least one of the parents will always be free to take care of the baby.\nCameron and Jamie want to come up with a daily baby care schedule such that:\nFor example, suppose that Jamie and Cameron have a single activity each:\n  Jamie has a morning activity from 9 am to 10 am, and Cameron has an afternoon\n  activity from 2 pm to 3 pm. One possible but suboptimal schedule would be for\n  Jamie to take care of the baby from midnight to 6 am and from noon to 6 pm,\n  and for Cameron to take care of the baby from 6 am to noon and 6 pm to\n  midnight. That fulfills the first two conditions, and requires a total of 4\n  exchanges, which happen at midnight, 6 am, noon and 6 pm. If there is an\n  exchange happening at midnight, it is counted exactly once, not zero or two\n  times.\nA better option would be for Cameron to take care of the baby from midnight\n  to noon, and Jamie to take care of the baby from noon to midnight. This\n  schedule also fulfills the first two conditions, but it uses only 2\n  exchanges, which is the minimum possible.\nGiven Cameron's and Jamie's lists of activities, and the restrictions above,\n  what is the minimum possible number of exchanges in a daily schedule?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing two\n  integersACandAJ, the number of\n  activities that Cameron and Jamie have, respectively. Then,AC+AJlines follow. The firstACof these lines contain two integersCiandDieach. The i-th of Cameron's activities starts\n  exactlyCiminutes after the start of the day at midnight\n  and ends exactlyDiminutes after the start of the day at\n  midnight (taking exactlyDi-Ciminutes).\n  The lastAJof these lines contain two integersJiandKieach, representing the starting\n  and ending time of one of Jamie's activities, in minutes counting from the\n  start of the day at midnight (same format as Cameron's). No activity spans two\n  days, and no two activities overlap (except that one might end exactly as another\n  starts, but an exchange can still occur at that time).\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andythe minimum possible number of exchanges, as described in the\n  statement.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.0 ≤Ci<Di≤ 24 × 60,\n    for all i.0 ≤Ji<Ki≤ 24 × 60,\n    for all i.Any two of the intervals of {[Ci,Di)\n    for all i} union {[Ji,Ki) for all i}\n  have an empty intersection. (The intervals are closed on the left and open\n  on the right, which ensures that two exactly consecutive intervals have\n  nothing in between but do not overlap.)sum of {Di-Cifor all i} ≤ 720.sum of {Ki-Jifor all i} ≤ 720.\n0 ≤AC≤ 2.0 ≤AJ≤ 2.1 ≤AC+AJ≤ 2.\n0 ≤AC≤ 100.0 ≤AJ≤ 100.1 ≤AC+AJ≤ 200.\nNote that Cases #4 and #5 would not appear in the Small dataset.\nCase #1 is the one described in the problem statement.\nIn Case #2, Jamie must cover for all of Cameron's activity time, and then\n  Cameron must cover all the remaining time. This schedule entails four\n  exchanges.\nIn Case #3, there is an exchange at midnight, from Cameron to Jamie. No\n  matter how the parents divide up the remaining 1438 non-activity minutes of\n  the day, there must be at least one exchange from Jamie to Cameron, and there\n  is no reason to add more exchanges than that.\nIn Case #4, note that back-to-back activities can exist for the same partner\n  or different partners. There is no exchange at midnight because Cameron has\n  activities both right before and right after that time. However, the schedule\n  needs to add some time for Cameron in between Jamie's activities, requiring a\n  total of 4 exchanges. Notice that it is optimal to add a single interval\n  for Cameron of length 718 somewhere between minutes 2 and 1438, but the\n  exact position of that added interval does not impact the number of\n  exchanges, so there are multiple optimal schedules.\nIn Case #5, a possible optimal schedule is to assign Cameron to the intervals\n  (in minutes) 100-200, 500-620, and 900-1400.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing two\n  integersACandAJ, the number of\n  activities that Cameron and Jamie have, respectively. Then,AC+AJlines follow. The firstACof these lines contain two integersCiandDieach. The i-th of Cameron's activities starts\n  exactlyCiminutes after the start of the day at midnight\n  and ends exactlyDiminutes after the start of the day at\n  midnight (taking exactlyDi-Ciminutes).\n  The lastAJof these lines contain two integersJiandKieach, representing the starting\n  and ending time of one of Jamie's activities, in minutes counting from the\n  start of the day at midnight (same format as Cameron's). No activity spans two\n  days, and no two activities overlap (except that one might end exactly as another\n  starts, but an exchange can still occur at that time).",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andythe minimum possible number of exchanges, as described in the\n  statement.",
        "sample_input": "5\n1 1\n540 600\n840 900\n2 0\n900 1260\n180 540\n1 1\n1439 1440\n0 1\n2 2\n0 1\n1439 1440\n1438 1439\n1 2\n3 4\n0 10\n1420 1440\n90 100\n550 600\n900 950\n100 150\n1050 1400",
        "sample_output": "Case #1: 2\nCase #2: 4\nCase #3: 2\nCase #4: 4\nCase #5: 6",
        "source": "2017\\round_1c\\parenting_partnering"
    },
    {
        "problem_name": "Beaming With Joy",
        "problem_statement": "Joy is about to go on a long vacation, so she has hired technicians to\n  install a security system based on infrared laser beams. The technicians have\n  given her a diagram that represents her house as a grid of unit cells withRrows andCcolumns. Each cell in this grid contains one of\n  the following:\nBeams travel in straight lines and continue on through empty cells. When a\n  beam hits a mirror, it bounces 90 degrees off the mirror's surface and\n  continues. When a beam traveling to the right hits a/mirror,\n  it bounces off the mirror and starts traveling up; beams traveling up, left,\n  or down that hit a/mirror bounce off and travel right, down,\n  or left, respectively. The\\mirror behaves similarly: when a\n  beam traveling right, up, left or down hits it, it bounces off and starts\n  traveling down, left, up or right, respectively. When a beam hits a wall or\n  goes out of the bounds of the grid, it stops. It is fine for beams to cross\n  other beams, but if a beam hits any beam shooter (including, perhaps, the\n  beam shooter that originated the beam), that beam shooter will be destroyed!\nJoy wants to make sure that every empty cell in the house has at least one\n  beam passing through it, and that no beam shooters are destroyed, since that\n  would just be wasting money! Unfortunately, the technicians have already\n  installed the system, so the most Joy can do is rotate some of the existing\n  beam shooters 90 degrees. That is, for any number (including zero) of beam\n  shooters, she can turn-into|or vice versa.\nCan you find any way for Joy to achieve her goal, or determine that it is\n  impossible? Note that it isnotrequired to minimize the number of\n  rotations of beam shooters.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with two integersRandC: the number of rows and columns in the grid\n  representing the house. Then,Rlines ofCcharacters each\n  follow; each character is/,\\,-,|,#, or., as described in the\n  statement.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif Joy cannot accomplish her goal, orPOSSIBLEif she can. Then, if the case is possible, output the\n  sameRlines ofCcharacters each from the input grid, with\n  zero or more instances of-replaced by|or vice\n  versa.\nIf there are multiple possible answers, you may output any of them.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤C≤ 50.Each character in the grid is one of/,\\,-,|,#, or..The number of-characters plus the number of|characters (that is, the number of beam shooters) in the grid is between 1\n  and 100, inclusive.There is at least 1.character (that is, empty space) in the\n  grid.\n1 ≤R≤ 5.There are no/or\\characters (that is, no\n  mirrors) in the grid.\n1 ≤R≤ 50.\nNote that the last 2 sample cases would not appear in the Small dataset.\nIn Sample Case #1, if a beam shooter is positioned to shoot its beam into\n  the empty cell, it will necessarily destroy the other beam shooter. So the\n  case isIMPOSSIBLE.\nIn Sample Case #2, the leftmost beam shooter must be rotated to cover the\n  empty cell. The rightmost beam shooter must also be rotated to avoid\n  destroying the leftmost beam shooter.\nIn Sample Case #3, the existing beam shooters already cover all empty cells\n  with their beams and do not destroy each other, so outputting the grid from\n  the input would be acceptable. However, notice that the output that we have\n  given is also correct.\nIn Sample Case #4, one acceptable solution is to rotate all three of the beam\n  shooters. However, note that the following would also be acceptable:\nsince it is not necessary for cells with mirrors to have a beam pass through\n  them. (Who would steal giant diagonal mirrors, anyway?)\nIn Sample Case #5, the beam shooter would destroy itself no matter which\n  orientation Joy chooses for it, so the case isIMPOSSIBLE.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with two integersRandC: the number of rows and columns in the grid\n  representing the house. Then,Rlines ofCcharacters each\n  follow; each character is/,\\,-,|,#, or., as described in the\n  statement.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif Joy cannot accomplish her goal, orPOSSIBLEif she can. Then, if the case is possible, output the\n  sameRlines ofCcharacters each from the input grid, with\n  zero or more instances of-replaced by|or vice\n  versa.",
        "sample_input": "5\n1 3\n-.-\n3 4\n#.##\n#--#\n####\n2 2\n-.\n#|\n4 3\n.|.\n-//\n.-.\n#\\/\n3 3\n/|\\\n\\\\/\n./#",
        "sample_output": "Case #1: IMPOSSIBLE\nCase #2: POSSIBLE\n#.##\n#||#\n####\nCase #3: POSSIBLE\n|.\n#|\nCase #4: POSSIBLE\n.-.\n|//\n.|.\n#\\/\nCase #5: IMPOSSIBLE",
        "source": "2017\\round_2\\beaming_with_joy"
    },
    {
        "problem_name": "Fresh Chocolate",
        "problem_statement": "You are the public relations manager for a chocolate manufacturer.\n  Unfortunately, the company's image has suffered because customers think the\n  owner is cheap and miserly. You hope to undo that impression by offering a\n  free factory tour and chocolate tasting.\nSoon after starting the new project, you realized that the company owner's\n  reputation is well-deserved: he only agreed to give away free chocolate if\n  you would minimize the cost. The chocolate to be given away comes in packs ofPpieces. You would like to open new packs for each tour group, but\n  the owner insists that if there are leftover pieces from one group, they must\n  be used with the next tour group before opening up any new packs.\nFor instance, suppose that each pack containsP=3 pieces, and that a\n  tour group with 5 people comes. You will open two packs to give one piece to\n  each person, and you will have one piece left over. Suppose that after that,\n  another tour group with 6 people comes. They will receive the leftover piece,\n  and then you will open two more packs to finish giving them their samples,\n  and so you will have one piece left over again. If two groups with 4 people\n  each come right after, the first of those will get the leftover piece plus a\n  full pack, and the last 4 person group will get their pieces from two newly\n  opened packs. Notice that you cannot open new packs until all leftovers have\n  been used up, even if you plan on using all of the newly opened pack\n  immediately.\nIn the example above, 2 out of the 4 groups (the first and last groups) got\n  all of their chocolate from freshly opened packs. The other 2 groups got some\n  fresh chocolate and some leftovers. You know that giving out leftovers is not\n  the best way to undo the owner's miserly image, but you had to accept this\n  system in order to get your cheap boss to agree to the project. Despite the\n  unfavorable context, you are committed to doing a good job.\nYou have requests fromNgroups, and each group has specified the\n  number of people that will come into the factory. Groups will come in one at\n  a time. You want to bring them in in an order that maximizes the number of\n  groups that get only fresh chocolate and no leftovers. You cannot reject\n  groups, nor have a group get chocolate more than once, and you need to give\n  exactly one piece to each person in each group.\nIn the example above, if instead of 5, 6, 4, 4, the order were 4, 5, 6, 4, a\n  total of 3 groups (all but the 5 person group) would get only fresh chocolate.\n  For that set of groups, it is not possible to do better, as no arrangement\n  would cause all groups to get only fresh chocolate.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines. The first\n  line contains two integersN, the number of groups coming for a tour,\n  andP, the number of pieces of chocolate per pack. The second line\n  containsNintegersG1,G2, ...,GN, the number of people in each of the groups.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the number of groups that will receive only fresh chocolate if you bring\n  them in in an order that maximizes that number.\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 100.1 ≤Gi≤ 100, for all i.\nTime limit: 20 seconds.2 ≤P≤ 3.\nTime limit: 40 seconds.2 ≤P≤ 4.\nSample Case #1 is the one explained in the statement. Besides the possible\n  optimal order given above, other orders like 6, 5, 4, 4 also maximize the\n  number of groups with only fresh chocolate, although the groups that get the\n  fresh chocolate are not necesarily the same. Notice that we only care about\n  the number of groups that get the best experience, not the total number of\n  people in them.\nIn Sample Case #2, the groups are the same as in Case #1, but the packs\n  contain two pieces each. In this case, several ways of ordering them —\n  for instance, 4, 4, 6, 5 — make all groups get only fresh chocolate.\nIn Sample Case #3, all groups are single individuals, and they will all eat\n  from the same pack. Of course, only the first one to come in is going to get\n  a freshly opened pack.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines. The first\n  line contains two integersN, the number of groups coming for a tour,\n  andP, the number of pieces of chocolate per pack. The second line\n  containsNintegersG1,G2, ...,GN, the number of people in each of the groups.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the number of groups that will receive only fresh chocolate if you bring\n  them in in an order that maximizes that number.",
        "sample_input": "3\n4 3\n4 5 6 4\n4 2\n4 5 6 4\n3 3\n1 1 1",
        "sample_output": "Case #1: 3\nCase #2: 4\nCase #3: 1",
        "source": "2017\\round_2\\fresh_chocolate"
    },
    {
        "problem_name": "Roller Coaster Scheduling",
        "problem_statement": "You created a new roller coaster that is about to open. Its train consists of\n  a single row ofNseats numbered 1 throughNfrom front to\n  back. Of course, seats closer to the front are more valuable. Customers have\n  already purchased opening-day tickets. Each ticket allows a specific customer\n  to take one ride on the coaster in a particular seat. Some customers may\n  have bought more than one ticket, and they expect to go on one ride for each\n  ticket.\nYou need to decide how many roller coaster rides there will be on opening\n  day. On each ride, one customer can sit in each seat; some seats on a ride\n  might be left empty. You cannot assign a customer to more than one seat in\n  the same ride, nor can you put two customers on the same seat in any given\n  ride.\nYou wish to minimize the number of rides required to honor all tickets, to\n  reduce operational costs. To reduce the required number of rides, you canpromoteany number of tickets. Promoting a ticket means taking a\n  customer's ticket and giving that customer a new ticket for a seat closer to\n  the front of the train (that is, a seat with a lower number). You would\n  prefer to promote as few tickets as possible, since too many promotions\n  might cause customers to get greedy and ask for more promotions in the\n  future.\nGiven the positions and buyers of all the tickets that have been sold, what\n  is the minimum number of rides needed to honor all tickets, using as many\n  promotions as needed and scheduling the rides optimally? And what is the\n  minimum number of ticket promotions necessary to attain that number of rides?\n  Note that promoting a given customer on a given ride from seat 4 to seat 2,\n  for example, counts as only one promotion, not two separate ones.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a single line with\n  three integersN, the number of seats in the roller coaster,C,\n  the number of potential customers, andM, the number of tickets sold.\n  The customers are identified with numbers between 1 andC. Then,Mlines follow, each containing two integers:Pi,\n  the position in the roller coaster assigned to the i-th ticket, andBi, the identifier of the buyer of that ticket.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis the minimum number of rides you need to honor all tickets\n  if you use the promotions and schedule the rides optimally, andzis the minimum number of promotions you need to make be able\n  to honor all tickets withyrides.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.2 ≤N≤ 1000.1 ≤M≤ 1000.1 ≤Pi≤N.1 ≤Bi≤C.\nC= 2.\n2 ≤C≤ 1000.\nNote that the last two sample cases would not appear in the Small dataset.\nIn Case #1, both customers purchased a ticket for position 2. It is\n  impossible to honor both tickets with a single ride, but promoting either\n  ticket to position 1 allows you to accommodate both tickets on the same\n  round.\nCase #2 is a similar story, except both tickets are for position 1. Since you\n  cannot promote those tickets or exchange them for inferior tickets, you are\n  forced to run 2 separate rides, one per customer.\nCase #3 features the same customer purchasing both positions. Since you are\n  forced to have 2 rides for that customer, there is no reason to give out any\n  promotions.\nIn Case #4, notice that there may be both customers and positions with no\n  tickets assigned. In this case, there are three tickets sold for position\n  three. If you promote customer 2 to position 2, for instance, you can have\n  one ride with customer 1 sitting in position 2 and customer 3 sitting in\n  position 3, and a second ride with customer 2 in position 2 and customer 1 in\n  position 3. Additional promotions will not allow you to decrease the number\n  of rides, because customer 1 has two tickets and you need to honor those in\n  different rides, regardless of position.\nIn Case #5, one optimal solution is to promote one of the3 1tickets to1 1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a single line with\n  three integersN, the number of seats in the roller coaster,C,\n  the number of potential customers, andM, the number of tickets sold.\n  The customers are identified with numbers between 1 andC. Then,Mlines follow, each containing two integers:Pi,\n  the position in the roller coaster assigned to the i-th ticket, andBi, the identifier of the buyer of that ticket.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis the minimum number of rides you need to honor all tickets\n  if you use the promotions and schedule the rides optimally, andzis the minimum number of promotions you need to make be able\n  to honor all tickets withyrides.",
        "sample_input": "5\n2 2 2\n2 1\n2 2\n2 2 2\n1 1\n1 2\n2 2 2\n1 1\n2 1\n1000 1000 4\n3 2\n2 1\n3 3\n3 1\n3 3 5\n3 1\n2 2\n3 3\n2 2\n3 1",
        "sample_output": "Case #1: 1 1\nCase #2: 2 0\nCase #3: 2 0\nCase #4: 2 1\nCase #5: 2 1",
        "source": "2017\\round_2\\roller_coaster_scheduling"
    },
    {
        "problem_name": "Shoot the Turrets",
        "problem_statement": "The fight to free the city from extraterrestrial invaders is over! People are\n  happy that love and peace have returned.\nThe city is represented as a grid withRrows andCcolumns.\n  Some cells on the grid are buildings (through which nobody can see, nobody can\n  shoot, and nobody can walk), and some are streets (through which everybody can\n  see, shoot and walk). Unfortunately, during the war, the now-defeated\n  invaders set up automatic security turrets in the city. These turrets are only\n  in streets (not in buildings). They pose a threat to the citizens, but\n  fortunately, there are also some soldiers on the streets (not in buildings).\n  Initially, no soldier is in the same place as a turret.\nThe invader turrets do not move. They are small, so they don't block sight and\n  shooting. A soldier cannot walk through an active turret's cell, but can walk\n  through it once it is destroyed. A turret can only see soldiers in the cells\n  for which it has a horizontal or vertical line of sight. If a soldier enters\n  such a cell, the turret does not fire. If a soldier attempts to exit such a\n  cell (after entering it, or after starting in that cell),\n  the turret fires. Luckily, a soldier can still shoot from that cell,\n  and the turret will not detect that as movement. It means that none of your\n  soldiers will actually die, because in the worst case they can always wait,\n  motionless, for help (perhaps for a long time). Maybe you will have a chance\n  to rescue them later.\nEach soldier can make a total ofMunit moves. Each of these moves must\n  be one cell in a horizontal or vertical direction. Soldiers can walk through\n  each other and do not block the lines of sight of other soldiers or turrets.\n  Each soldier also has one bullet. If a soldier has a turret in her horizontal or vertical line\n  of sight, the soldier can shoot and destroy it. Each shot can only destroy one\n  turret, but the soldiers are such excellent shooters that they can even shoot\n  past one or several turrets or soldiers in their line of sight and hit another turret\n  farther away!\nYou are given a map (with the soldier and turret positions marked). What is\n  the largest number of turrets that the soldiers can destroy?\nThe first line of the input gives the number of test\n  cases,T.Ttest cases follow. Each test case begins with a\n  line containing the integerC(the width of the map),R(the\n  height of the map) andM(the number of unit moves each soldier can\n  make). The nextRlines containCcharacters each,\n  with.representing a street,#representing a\n  building,Srepresenting a soldier andTrepresenting a turret.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1)\n  andyis the maximum number of turrets that it is possible to\n  destroy. Thenylines should follow: each should contain two\n  integerss_iandt_idenoting that theith thing that\n  happens should be soldiers_idestroying turrett_i(you don't\n  need to specify exactly how the soldier has to move). If multiple valid\n  strategies exist, you may output any one of them.\nSoldiers are numbered from 1, reading from left to right along the top row,\n  then left to right along the next row down from the top, and so on, from top\n  to bottom.\nTurrets use their own independent numbers, and are numbered starting from 1,\n  in the same way.\nMemory limit: 1 GB.1 ≤T≤ 100.0 ≤M<C×R.\nTime limit: 30 seconds.1 ≤C≤ 30.1 ≤R≤ 30.The number ofSsymbols is between 1 and 10.The number ofTsymbols is between 1 and 10.\nTime limit: 60 seconds.1 ≤C≤ 100.1 ≤R≤ 100.The number ofSsymbols is between 1 and 100.The number ofTsymbols is between 1 and 100.\nIn Case #2, one of the possible solutions is to move soldier 3 up three\n  cells and shoot turret 3. Then soldier 1 can move up one cell and right one\n  cell (to where turret 3 was) and shoot past turret 2 to destroy turret 1.\n  Finally, soldier 2 can move up three cells and shoot turret 2.\nIn Case #3, soldier 1 can move up one cell, then right three cells and\n  shoot turret 2. Then soldier 2 can move up one cell, then right three cells\n  and shoot turret 1. Finally, soldier 6 can move down one cell, then right\n  three cells and shoot turret 3. Other soldiers have insufficient move range\n  to shoot any other turrets.\nIn Case #4, the soldier cannot move to within the same row or column as\n  the turret, so the turret cannot be destroyed.\n",
        "input_description": "The first line of the input gives the number of test\n  cases,T.Ttest cases follow. Each test case begins with a\n  line containing the integerC(the width of the map),R(the\n  height of the map) andM(the number of unit moves each soldier can\n  make). The nextRlines containCcharacters each,\n  with.representing a street,#representing a\n  building,Srepresenting a soldier andTrepresenting a turret.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1)\n  andyis the maximum number of turrets that it is possible to\n  destroy. Thenylines should follow: each should contain two\n  integerss_iandt_idenoting that theith thing that\n  happens should be soldiers_idestroying turrett_i(you don't\n  need to specify exactly how the soldier has to move). If multiple valid\n  strategies exist, you may output any one of them.",
        "sample_input": "4\n2 2 1\n#S\nT.\n2 6 4\n.T\n.T\n.T\nS#\nS#\nS#\n5 5 4\n.....\nSS#.T\nSS#TT\nSS#.T\n.....\n3 3 8\nS.#\n.#.\n#.T",
        "sample_output": "Case #1: 1\n1 1\nCase #2: 3\n3 3\n1 1\n2 2\nCase #3: 3\n1 2\n2 1\n6 3\nCase #4: 0",
        "source": "2017\\round_2\\shoot_the_turrets"
    },
    {
        "problem_name": "Good News and Bad News",
        "problem_statement": "You would like to get yourFfriends to share some news. You know your\n  friends well, so you know which of your friends can talk to which of your\n  other friends. There arePsuch one-way relationships, each of which is\n  an ordered pair (Ai,Bi) that means that\n  friendAican talk to friendBi. It does\n  not imply that friendBican talk to\n  friendAi; however, another of the ordered pairs might make\n  that true.\nForeverysuch existing ordered pair (Ai,Bi), you want friendAito deliver some\n  news to friendBi. In each case, this news will be\n  represented by an integer value; the magnitude of the news is given by the\n  absolute value, and the type of news (good or bad) is given by the sign. The\n  integer cannot be 0 (or else there would be no news!), and its absolute value\n  cannot be larger thanF2(or else the news would be justtooexciting!). These integer values may be different for different\n  ordered pairs.\nBecause you are considerate of your friends' feelings, for each friend, the\n  sum of the values of all news givenbythat friend must equal the sum\n  of values of all news giventothat friend. If no news is given by\n  a friend, that sum is considered to be 0; if no news is given to a\n  friend, that sum is considered to be 0.\nCan you find a set of news values for your friends to communicate such that\n  these rules are obeyed, or determine that it is impossible?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersFandP: the number of friends, and the number of different\n  ordered pairs of friends.\n  Then,Pmore lines follow; the i-th of these lines has two different\n  integersAiandBirepresenting that\n  friendAican talk to friendBi.\n  Friends are numbered from 1 toF.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\n  eitherIMPOSSIBLEif there is no arrangement satisfying the rules\n  above, or, if there is such an arrangement,Pintegers, each of which\n  is nonzero and lies inside [-F2,F2]. The\n  i-th of those integers corresponds to the i-th ordered pair from the input,\n  and represents the news value that the first friend in the ordered pair will\n  communicate to the second. The full set of values must satisfy the conditions\n  in the problem statement.\nIf there are multiple possible answers, you may output any of them.\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤Ai≤F, for all i.1 ≤Bi≤F, for all i.Ai≠Bi, for all i. (A friend does not\n    self-communicate.)(Ai,Bi) ≠ (Aj,Bj), for all i ≠ j. (No pair of friends is repeated\n    within a test case in the same order.)\nTime limit: 20 seconds.2 ≤F≤ 4.1 ≤P≤ 12.\nTime limit: 40 seconds.2 ≤F≤ 1000.1 ≤P≤ 2000.\nThe sample output shows one possible set of valid answers. Other valid\n  answers are possible.\nIn Sample Case #1, one acceptable arrangement is to have friend 1 deliver\n  news with value 1 to friend 2, and vice versa.\nIn Sample Case #2, whatever value of news friend 1 gives to friend 2, it\n  must be nonzero. So, the sum of news values given to friend 2 is not equal\n  to zero. However, friend 2 cannot give any news and so that value is 0.\n  Therefore, the sums of given and received news for friend 2 cannot match, and\n  the case isIMPOSSIBLE.\nIn Sample Case #3, each of friends 1, 2, and 3 can deliver news with value -1\n  to the one other friend they can talk to — an unfortunate circle of bad\n  news! Note that there is a friend 4 who does not give or receive any news;\n  this still obeys the rules.\nIn Sample Case #4, note that-5 5 5 -10would not have been an\n  acceptable answer, because there are 3 friends, and |-10| > 32.\nIn Sample Case #5, note that the case cannot be solved without using at least\n  one negative value.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersFandP: the number of friends, and the number of different\n  ordered pairs of friends.\n  Then,Pmore lines follow; the i-th of these lines has two different\n  integersAiandBirepresenting that\n  friendAican talk to friendBi.\n  Friends are numbered from 1 toF.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\n  eitherIMPOSSIBLEif there is no arrangement satisfying the rules\n  above, or, if there is such an arrangement,Pintegers, each of which\n  is nonzero and lies inside [-F2,F2]. The\n  i-th of those integers corresponds to the i-th ordered pair from the input,\n  and represents the news value that the first friend in the ordered pair will\n  communicate to the second. The full set of values must satisfy the conditions\n  in the problem statement.",
        "sample_input": "5\n2 2\n1 2\n2 1\n2 1\n1 2\n4 3\n1 2\n2 3\n3 1\n3 4\n1 2\n2 3\n3 1\n2 1\n3 3\n1 3\n2 3\n1 2",
        "sample_output": "Case #1: 1 1\nCase #2: IMPOSSIBLE\nCase #3: -1 -1 -1\nCase #4: 4 -4 -4 8\nCase #5: -1 1 1",
        "source": "2017\\round_3\\good_news_and_bad_news"
    },
    {
        "problem_name": "Googlements",
        "problem_statement": "Chemists work with periodic table elements, but here at Code Jam, we have\n  been using our advanced number smasher to studygooglements. A\n  googlement is a substance that can be represented by a string of at most\n  nine digits. A googlement of length L must contain only decimal digits in the\n  range 0 through L, inclusive, and it must contain at least one digit greater\n  than 0. Leading zeroes are allowed. For example,103and001are valid googlements of length 3.400(which contains a digit, 4, greater than the length of the googlement, 3) and000(which contains no digit greater than 0) are not.\nAny valid googlement can appear in the world at any time, but it will\n  eventually decay into another googlement in a deterministic way, as follows.\n  For a googlement of length L, count the number of1s in the\n  googlement (which could be 0) and write down that value, then count the\n  number of2s in the googlement (which could be 0) and write down\n  that value to the right of the previous value, and so on, until you finally\n  count and write down the number of Ls. The new string generated in this way\n  represents the new googlement, and it will also have length L. It is even\n  possible for a googlement to decay into itself!\nFor example, suppose that the googlement0414has just appeared.\n  This has one1, zero2s, zero3s, and\n  two4s, so it will decay into the googlement1002.\n  This has one1, one2, zero3s, and\n  zero4s, so it will decay into1100, which will\n  decay into2000, which will decay into0100, which\n  will decay into1000, which will continuously decay into itself.\nYou have just observed a googlementG. This googlement might have just\n  appeared in the world, or it might be the result of one or more decay steps.\n  What is the total number of possible googlements it could have been when it\n  originally appeared in the world?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringG, representing a googlement.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the number of different googlements that the observed\n  googlement could have been when it first appeared in the world.\nMemory limit: 1 GB.1 ≤T≤ 100.Each digit inGis a decimal digit between 0 and the length ofG, inclusive.Gcontains at least one non-zero digit.\nTime limit: 20 seconds.1 ≤ the length ofG≤ 5.\nTime limit: 60 seconds.1 ≤ the length ofG≤ 9.\nIn sample case #1, the googlement could have originally been20, or it could have decayed from11, which could\n  have itself decayed from12or21. Neither of the\n  latter two could have been a product of decay. So there are four\n  possibilities in total.\nIn sample case #2, the googlement must have originally been1,\n  which is the only possible googlement of length 1.\nIn sample case #3, the googlement must have been123; no other\n  googlement could have decayed into it.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with a stringG, representing a googlement.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the number of different googlements that the observed\n  googlement could have been when it first appeared in the world.",
        "sample_input": "3\n20\n1\n123",
        "sample_output": "Case #1: 4\nCase #2: 1\nCase #3: 1",
        "source": "2017\\round_3\\googlements"
    },
    {
        "problem_name": "Mountain Tour",
        "problem_statement": "You are on top of Mount Everest, and you want to enjoy all the nice hiking\n  trails that are up there. However, you know from past experience that\n  climbing around on Mount Everest alone is bad — you might get lost in\n  the dark! So you want to go on hikes at pre-arranged times with tour guides.\nThere areCcamps on the mountain (numbered 1 throughC), and\n  there are 2 ×Cone-way hiking tours (numbered 1 through 2\n  ×C). Each hiking tour starts at one camp and finishes at a\n  different camp, and passes through no other camps in between. Mount Everest\n  is sparsely populated, and business is slow; there are exactly 2 hiking tours\n  departing from each camp, and exactly 2 hiking tours arriving at each camp.\nEach hiking tour runs daily. Tours 1 and 2 start at camp 1, tours 3 and 4\n  start at camp 2, and so on: in general, tour 2 × i - 1 and tour 2\n  × i start at camp i. The i-th hiking tour ends at camp numberEi, leaves at hourLi, and has a duration\n  of exactlyDihours.\nIt is currently hour 0; the hours in a day are numbered 0 through 23. You are\n  at camp number 1, and you want to do each of the hiking toursexactly onceand end up back at camp number 1. You cannot travel\n  between camps except via hiking tours. While you are in a camp, you may wait\n  for any number of hours (including zero) before going on a hiking tour, but\n  you can only start a hiking tour at the instant that it departs.\nAfter looking at the tour schedules, you have determined that it is\n  definitely possible to achieve your goal, but you want to do it as fast as\n  possible. If you plan your route optimally, how many hours will it take you\n  to finish all of the tours?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerC: the number of camps. Then, 2 ×Cmore lines follow.\n  The i-th of these lines (counting starting from 1) represents one hiking tour\n  starting at camp number floor((i + 1) / 2), and contains three integersEi,Li, andDi, as\n  described above. Note that this format guarantees that exactly two tours\n  start at each camp.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of hours that it will take you to achieve your goal,\n  as described above.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.1 ≤Ei≤C.Ei≠ ceiling(i / 2), for all i. (No hiking tour\n    starts and ends at the same camp.)size of {j :Ej= i} = 2, for all j. (Exactly two tours\n    end at each camp.)0 ≤Li≤ 23.1 ≤Di≤ 1000.There is at least one route that starts and ends at camp 1 and includes each\n    hiking tour exactly once.\n2 ≤C≤ 15.\n2 ≤C≤ 1000.\nIn sample case #1, the optimal plan is as follows:\nThis achieves the goal in 1 day and 8 hours, or 32 hours. Any other plan\n  takes longer.\nIn sample case #2, all of the tours leave at the same time and are the\n  same duration. After finishing any tour, you can immediately take another\n  tour. If we number the tours from 1 to 8 in the order in which they appear in\n  the test case, one optimal plan is: 1, 5, 4, 7, 6, 2, 3, 8.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerC: the number of camps. Then, 2 ×Cmore lines follow.\n  The i-th of these lines (counting starting from 1) represents one hiking tour\n  starting at camp number floor((i + 1) / 2), and contains three integersEi,Li, andDi, as\n  described above. Note that this format guarantees that exactly two tours\n  start at each camp.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of hours that it will take you to achieve your goal,\n  as described above.",
        "sample_input": "2\n2\n2 1 5\n2 0 3\n1 4 4\n1 6 3\n4\n3 0 24\n2 0 24\n4 0 24\n4 0 24\n2 0 24\n1 0 24\n3 0 24\n1 0 24",
        "sample_output": "Case #1: 32\nCase #2: 192",
        "source": "2017\\round_3\\mountain_tour"
    },
    {
        "problem_name": "Slate Modern",
        "problem_statement": "The prestigious Slate Modern gallery specializes in the latest art craze:\n  grayscale paintings that follow very strict rules. Any painting in the\n  gallery must be a grid withRrows andCcolumns. Each cell in\n  the grid is painted with a color of a certain positive integerbrightness value; to make sure the art is not too visually startling,\n  the brightness values of any two cells that share an edge (not just a corner)\n  must differ by no more thanDunits.\nYour artist friend Cody-Jamal is working on a canvas for the gallery. Last\n  night, he became inspired and filled inNdifferent particular cells\n  with certain positive integer brightness values. You just told him about the\n  gallery's rules today, and now he wants to know whether it is possible to\n  fill in all of the remaining cells with positive integer brightness values\n  and complete the painting without breaking the gallery's rules. If this is\n  possible, he wants to make the sum of the brightness values as large as\n  possible, to save his black paint. Can you help him find this sum or\n  determine that the task is impossible? Since the output can be a really big\n  number, we only ask you to output the remainder of dividing the result by the\n  prime 109+7 (1000000007).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line with four\n  integers:R,C,N, andD, as described above.\n  Then,Nlines follow; the i-th of these has three integersRi,Ci, andBi,\n  indicating that the cell in theRith row andCith column of the grid has brightness valueBi. The rows and columns of the grid are numbered starting\n  from 1.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif it is impossible to complete the\n  picture, or else the value of the maximum possible sum of all brightness\n  values modulo the prime 109+7 (1000000007).\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤N≤ 200.1 ≤D≤ 109.1 ≤Ri≤R, for all i.\n  1 ≤Ci≤C, for all i.\n  1 ≤Bi≤ 109, for all i.\n  (Note that the upper bound only applies to cells that Cody-Jamal already\n  painted. You can assign brightness values larger than 109to other\n  cells.)N<R×C. (There is at least one empty\n    cell.)Ri≠Rjand/orCi≠Cjfor all i ≠ j.\n  (All of the given cells are different cells in the grid.)\nTime limit: 40 seconds.1 ≤R≤ 200.1 ≤C≤ 200.\nTime limit: 80 seconds.1 ≤R≤ 109.1 ≤C≤ 109.\nIn Sample Case #1, the optimal way to finish the painting is:\n6 7 94 6 8\nand the sum is 40.\nIn Sample Case #2, the optimal way to finish the painting is:\n2000000000 1000000000\nand the sum is 3000000000; modulo 109+7, it is 999999986.\nIn Sample Case #3, the task is impossible. No matter what value you choose\n  for the cell in row 2, it will be too different from at least one of the\n  two neighboring filled-in cells.\nIn Sample Case #4, the two cells that Cody-Jamal filled in already have\n  brightness values that are too far apart, so it is impossible to continue.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line with four\n  integers:R,C,N, andD, as described above.\n  Then,Nlines follow; the i-th of these has three integersRi,Ci, andBi,\n  indicating that the cell in theRith row andCith column of the grid has brightness valueBi. The rows and columns of the grid are numbered starting\n  from 1.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLEif it is impossible to complete the\n  picture, or else the value of the maximum possible sum of all brightness\n  values modulo the prime 109+7 (1000000007).",
        "sample_input": "4\n2 3 2 2\n2 1 4\n1 2 7\n1 2 1 1000000000\n1 2 1000000000\n3 1 2 100\n1 1 1\n3 1 202\n2 2 2 2\n2 1 1\n2 2 4",
        "sample_output": "Case #1: 40\nCase #2: 999999986\nCase #3: IMPOSSIBLE\nCase #4: IMPOSSIBLE",
        "source": "2017\\round_3\\slate_modern"
    },
    {
        "problem_name": "Dice Straight",
        "problem_statement": "You have a special set ofNsix-sided dice, each of which has six\n  different positive integers on its faces. Different dice may have different\n  numberings.\nYou want to arrange some or all of the dice in a row such that the faces\n  on top form astraight(that is, they show consecutive integers). For\n  each die, you can choose which face is on top.\nHow long is the longest straight that can be formed in this way?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line withN,\n  the number of dice. Then,Nmore lines follow; each of them has six\n  positive integersDij. The j-th number on the i-th of these\n  lines gives the number on the j-th face of the i-th die.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the length of the longest straight that can be formed.\nMemory limit: 1 GB.1 ≤T≤ 100.1 ≤Dij≤ 106for all i, j.\nTime limit: 60 seconds.1 ≤N≤ 100.\nTime limit: 120 seconds.1 ≤N≤ 50000.The sum ofNacross all test cases ≤ 200000.\nIn sample case #1, a straight of length 4 can be formed by taking the 2 from\n  the fourth die, the 3 from the third die, the 4 from the first die, and the\n  5 from the second die.\nIn sample case #2, there is no way to form a straight larger than the\n  trivial straight of length 1.\nIn sample case #3, you can take a 1 from one die, a 2 from another, and\n  a 3 from the remaining unused die. Notice that this case demonstrates that\n  there can be multiple dice with the same set of values on their faces.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line withN,\n  the number of dice. Then,Nmore lines follow; each of them has six\n  positive integersDij. The j-th number on the i-th of these\n  lines gives the number on the j-th face of the i-th die.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the length of the longest straight that can be formed.",
        "sample_input": "3\n4\n4 8 15 16 23 42\n8 6 7 5 30 9\n1 2 3 4 55 6\n2 10 18 36 54 86\n2\n1 2 3 4 5 6\n60 50 40 30 20 10\n3\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 4 2 6 5 3",
        "sample_output": "Case #1: 4\nCase #2: 1\nCase #3: 3",
        "source": "2017\\world_finals\\dice_straight"
    },
    {
        "problem_name": "Omnicircumnavigation",
        "problem_statement": "Intrepid globetrotter K, who may or may not be the author of this problem,\n  has been traveling a lot lately. On one of her recent trips, she traveled\n  from San Francisco to Frankfurt to Johannesburg to Abu Dhabi to Singapore to\n  Tokyo and back to San Francisco. On this trip, she circumnavigated the Earth\n  by traveling along a closed path that touches every meridian. In other words,\n  for every possible longitude, there is at least one point along this path at\n  that longitude.\nK is not sure that this trip qualifies as beingsuper awesome, however,\n  since it would also be possible to circumnavigate the Earth by flying to the\n  North Pole and then walking around it, which does not seem to be particularly\n  difficult (other than the part about flying to the North Pole). So she has\n  decided to come up with a more generalized definition of circumnavigation.\n  The new concept is calledomnicircumnavigation— a closed path\n  around the Earth (which we assume to be a sphere) that is a circumnavigation\n  regardless of where one places the poles. In other words, an\n  omnicircumnavigation is a closed path on the surface of a sphere that touches\n  every possible hemisphere. (Touching the edge of a hemisphere is sufficient.)\n  Equivalently, an omnicircumnavigation intersects every possible great circle\n  — a circle of greatest possible diameter on the surface of a sphere.\nYou are given a sequence ofNpoints on a sphere of radius 1. You need\n  to check whether a path connecting those points in order is an\n  omnicircumnavigation. The path is formed by connecting each pair of\n  successive points along the shortest possible surface route, and connecting\n  the last point to the first one in the same way. No two successive points\n  (including the pair of the last point and the first point) are collinear with\n  the origin. (That is, they are not antipodes — polar opposites —\n  and they do not represent the same point on the surface of the sphere.)\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containingN,\n  the number of cities visited by K. The nextNlines contain three\n  integersXi,YiandZieach. The i-th point in the list is given by the coordinates\n  (Xi/\n  sqrt(Xi2+Yi2+Zi2),Yi/\n  sqrt(Xi2+Yi2+Zi2),Zi/\n  sqrt(Xi2+Yi2+Zi2)).\nFor each test case, output one line containingCase #x: y,\n  wherexis the case number andyis eitherYESorNOdepending on whether the route is an\n  omnicircumnavigation or not.\nMemory limit: 1 GB.1 ≤T≤ 200.-106≤Xi≤ 106, for all i.-106≤Yi≤ 106, for all i.-106≤Zi≤ 106, for all i.At least one of the values in (Xi,Yi,Zi) ≠ 0, for all i.\n  For all i, j such that (i + 1 = j) or (i =N- 1 and j = 0),\n    neither of (Xi,Yi,Zi) and (Xj,Yj,Zj) is an integer multiple of the other.\n    (No two successive points, including the last and first, are antipodes or\n     represent the same point on the sphere.)\nTime limit: 60 seconds.3 ≤N≤ 50.\nTime limit: 300 seconds.3 ≤N≤ 5000.\nIn Sample Case #1, the three points are the surface points of one octant of\n  the sphere, and the path traces out that octant. There are many hemispheres\n  that do not overlap that path at all.\nIn Sample Case #2, the eight points are the corners of a cube inscribed in\n  the sphere; any hemisphere will contain at least some parts of that path.\n  Note that dividing all values by 5 would produce an equivalent case (with the\n  same set of points).\nIn Sample Case #3, the path is itself a great circle, and so every other\n  great circle must intersect it somewhere.\nSample Case #4 uses the same three points as in Sample Case #3, except that\n  the first two points are visited twice each. Note that a case may include\n  multiple representations of the same point, and that a path may include the\n  same points or connections more than once.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containingN,\n  the number of cities visited by K. The nextNlines contain three\n  integersXi,YiandZieach. The i-th point in the list is given by the coordinates\n  (Xi/\n  sqrt(Xi2+Yi2+Zi2),Yi/\n  sqrt(Xi2+Yi2+Zi2),Zi/\n  sqrt(Xi2+Yi2+Zi2)).",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the case number andyis eitherYESorNOdepending on whether the route is an\n  omnicircumnavigation or not.",
        "sample_input": "4\n3\n1 0 0\n0 1 0\n0 0 1\n8\n5 5 5\n5 -5 5\n-5 -5 5\n-5 5 5\n-5 5 -5\n-5 -5 -5\n5 -5 -5\n5 5 -5\n3\n1 0 0\n-1 1 0\n-1 -1 0\n5\n1 0 0\n-1 1 0\n2 0 0\n-2 2 0\n-1 -1 0",
        "sample_output": "Case #1: NO\nCase #2: YES\nCase #3: YES\nCase #4: YES",
        "source": "2017\\world_finals\\omnicircumnavigation"
    },
    {
        "problem_name": "Operation",
        "problem_statement": "Here at Code Jam, we love to play a game called \"Operation\". (No, it has\n  nothing to do with surgery; why would you think that?) The game is played\n  with cards, each card is labeled with a basic arithmetic operation\n  (addition, subtraction, multiplication or division)Oiand an integer right operandVifor that operation. For\n  example, a card might say+ 0, or- -2, or/ -4— note that operands can be negative or zero,\n  although a card with a division operation will never have 0 as an operand.\nIn each round of the game, a starting integer valueSis chosen, and\n  a set ofCcards is laid out. The player must\n  choose an order for the cards, using each card exactly once. After that, the\n  operations are applied, in order, to the starting valueS, and a final\n  result is obtained.\nAlthough all of the operands on the cards are integers, the operations are\n  executed on rational numbers. For instance, suppose that the initial value\n  is 5, and the cards are+ 1,- 2,* 3,\n  and/ -2. If we put them in the order given above, the final\n  result is (5 + 1 - 2) * 3 / (-2) = -6. Notice that the operations are\n  performed in the order given by the cards, disregarding any operator\n  precedence. On the other hand, if we choose the order- 2,/ -2,+ 1,* 3, the result is\n  ((5 - 2) / (-2) + 1) * 3 = -3 / 2. That example turns out to be the maximum\n  possible value for this set of cards.\nGiven a set of cards, can you figure out the maximum possible final value\n  that can be obtained? Please give the result as an irreducible fraction with\n  a positive denominator.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with two\n  integersSandC: the starting value for the game, and the\n  number of cards. Then,Clines follow. The i-th of these lines\n  represents one card, and contains one characterOirepresenting the operation (which is either+,-,*, or/) and one integerVirepresenting the operand.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1), andyandzare integers such thaty/zis the maximum possible final value of the\n  game,yandzdo not have common\n  divisors other than 1 and -1, andzis strictly greater than 0.\nMemory limit: 1 GB.1 ≤T≤ 100.-1,000 ≤S≤ 1,000.Oiis one of+,-,*, or/, for all i.-1,000 ≤Vi≤ 1,000, for all\n  i.IfOi=/, thenVi≠\n    0, for all i.\nTime limit: 60 seconds.1 ≤C≤ 15.\nTime limit: 120 seconds.1 ≤C≤ 1000.\nIn Sample Case #1, the optimal strategy is to play the* 2card\n  before the- 3card, which yields a result of -1. The unique\n  rational expression of this as specified in the problem is -1 1.\nSample Case #2 is the one described in the third paragraph of the problem\n  statement.\nIn Sample Case #3, we get the same answer regardless of the order in which\n  we use the cards. Notice that the numerator of the answer is too large to\n  fit in 64-bit integer.\nIn Sample Case #4, the largest result we can achieve is 1. One way is:/ -1,* 0,- -1.\nIn Sample Case #5, note that the only valid representation of the answer is0 1.0 2is invalid because it can be reduced.0 -1is invalid because the denominator must be positive.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with two\n  integersSandC: the starting value for the game, and the\n  number of cards. Then,Clines follow. The i-th of these lines\n  represents one card, and contains one characterOirepresenting the operation (which is either+,-,*, or/) and one integerVirepresenting the operand.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1), andyandzare integers such thaty/zis the maximum possible final value of the\n  game,yandzdo not have common\n  divisors other than 1 and -1, andzis strictly greater than 0.",
        "sample_input": "5\n1 2\n- 3\n* 2\n5 4\n+ 1\n- 2\n* 3\n/ -2\n1000 7\n* -1000\n* -1000\n* 1000\n* 1000\n* 1000\n* 1000\n* 1000\n-1 3\n- -1\n* 0\n/ -1\n0 1\n+ 0",
        "sample_output": "Case #1: -1 1\nCase #2: -3 2\nCase #3: 1000000000000000000000000 1\nCase #4: 1 1\nCase #5: 0 1",
        "source": "2017\\world_finals\\operation"
    },
    {
        "problem_name": "Spanning Planning",
        "problem_statement": "Aspanning treeof an undirected graph with N nodes is a tree with\n  N-1 edges that uses only edges from N and includes all nodes in N.\nPlease construct a graph with at least 2 nodes, and no more than 22 nodes,\n  such that the graph hasexactlyKdifferent spanning trees.\n  (Two spanning trees are considered different if and only if the sets of edges\n  that they use are different.) The graph must have at most one edge per pair\n  of nodes, and must not contain a loop (an edge from a node to itself).\nIt is guaranteed that at least one such graph exists for everyKwithin the limits below.\nThis problem has only 1 Small dataset and no Large dataset. You will be able\n  to retry the dataset (with a time penalty).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerK: the desired number of spanning trees.\nFor each test case, first output one line containingCase #x: y,\n  wherexis the test case number (starting from 1), andyis the number of nodes in your graph. (ymust be\n  between 2 and 22, inclusive.) Then, outputymore lines. The\n  i-th of these lines represents the i-th node in the graph, and must contain\n  exactly y characters. The j-th character on the i-th line should be1if the i-th node and the j-th node are connected with an edge,\n  and0otherwise. Note that this matrix will be symmetric and it\n  will have all0s along its main diagonal.\nIf multiple answers are possible, you may output any of them. Note that we\n  guarantee that at least one valid answer exists for everyKwithin\n  the limits below.\nTime limit: 240 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 300.\n3 ≤K≤ 10000.\nIn Case #1, the graph is a triangle, and removing any one edge creates a\n  different spanning tree.\nIn Case #2, the available edges in our solution tree are 1-2, 1-3, 1-4,\n  2-4, and 3-4. The eight different spanning trees are defined by these\n  sets of edges:\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line with an integerK: the desired number of spanning trees.",
        "output_description": "For each test case, first output one line containingCase #x: y,\n  wherexis the test case number (starting from 1), andyis the number of nodes in your graph. (ymust be\n  between 2 and 22, inclusive.) Then, outputymore lines. The\n  i-th of these lines represents the i-th node in the graph, and must contain\n  exactly y characters. The j-th character on the i-th line should be1if the i-th node and the j-th node are connected with an edge,\n  and0otherwise. Note that this matrix will be symmetric and it\n  will have all0s along its main diagonal.",
        "sample_input": "2\n3\n8",
        "sample_output": "Case #1: 3\n011\n101\n110\nCase #2: 4\n0111\n1001\n1001\n1110",
        "source": "2017\\world_finals\\spanning_planning"
    },
    {
        "problem_name": "Stack Management",
        "problem_statement": "You are playing a solitaire game in which there areNstacks of\n  face-up cards, each of which initially hasCcards. Each card has avalueand asuit, and no two cards in the game have the same\n  value/suit combination.\nIn one move, you can do one of the following things:\nYou win the game if you can make a sequence of moves such that eventually,\n  each stack contains at most one card. Given a starting arrangement, determine\n  whether it is possible to win the game.\nThe first line of the input gives the numberPof premade stacks that will\n  be used in the test cases. Then,Plines follow. The i-th of those lines\n  begins with an integerCi, the number of cards in the i-th\n  of those premade stacks, and continues withCiordered pairs\n  of integers. The j-th of these ordered pairs has two integersVijandSij, representing the value and suit\n  of the j-th card from the top in the i-th premade stack.\nThen, there is another line with one integerT, the number of test cases.Ttest cases follow. Each case begins with one line with two integersNandC: the number of stacks, and the number of cards in each of\n  those stacks. Then, there is one line withNintegersPi, representing the indexes (starting from 0) of the test\n  case's set of premade stacks.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisPOSSIBLEif it is possible to win the game, orIMPOSSIBLEotherwise.\nTime limit: 20 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.2 ≤P≤ 60000.0 ≤Pi<P, for all i.ThePi-th premade stack has exactlyCcards.No two cards in a test case have the same value/suit combination.\n2 ≤N≤ 4.2 ≤Ci≤ 13, for all i.2 ≤C≤ 13.1 ≤Vij≤ 13, for all i and j.1 ≤Sij≤ 4, for all i and j.\n2 ≤N≤ 50000.2 ≤Ci≤ 50000, for all i.2 ≤C≤ 50000.4 ≤N×C≤ 105.1 ≤Vij≤ 50000, for all i and j.1 ≤Sij≤ 50000, for all i and j.\nIn sample case #1, there are two stacks, each of which has two cards. The\n  first stack has a 7 of suit 2 on top and a 7 of suit 1 below that. The second\n  stack has a 3 of suit 2 on top and a 6 of suit 2 below that.\nIt is possible to win the game as follows:\nIn sample case #2, there are three stacks, each of which has two cards. It\n  is not possible to win the game in this case; the only possible move is\n  to remove the 5 of suit 4 on top of the third stack, and this does not open\n  up any new moves.\n",
        "input_description": "The first line of the input gives the numberPof premade stacks that will\n  be used in the test cases. Then,Plines follow. The i-th of those lines\n  begins with an integerCi, the number of cards in the i-th\n  of those premade stacks, and continues withCiordered pairs\n  of integers. The j-th of these ordered pairs has two integersVijandSij, representing the value and suit\n  of the j-th card from the top in the i-th premade stack.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisPOSSIBLEif it is possible to win the game, orIMPOSSIBLEotherwise.",
        "sample_input": "5\n2 7 2 7 1\n2 6 4 7 4\n2 3 2 6 2\n2 4 2 10 2\n2 5 4 7 3\n2\n2 2\n0 2\n3 2\n4 1 3",
        "sample_output": "Case #1: POSSIBLE\nCase #2: IMPOSSIBLE",
        "source": "2017\\world_finals\\stack_management"
    },
    {
        "problem_name": "Teleporters",
        "problem_statement": "A short, short time into the future, in a nearby galaxy, you find yourself\n  wanting to take a little trip and get away from the responsibilities of being\n  Planet Thundera's only manufacturer of yarn. You decide to travel to Planet\n  Care-a-Lot, the most relaxing planet there is. To travel, you are going to\n  use the network of interstellar teleporters.\nA teleporter is a small machine floating around somewhere in space. You can\n  use it remotely from any point in space, but, due to the conservation of\n  teleportation distance principle, it can teleport you to any other point in\n  space at exactly the same L1 distance from the teleporter as your\n  L1 distance to it before the teleportation. The L1 distance between two points\n  at coordinates (x0, y0, z0) and\n  (x1, y1, z1) is given by\n  |x0-  x1| + |y0- y1|\n  + |z0- z1|. Unfortunately, your space jetpack is broken,\n  so you cannot move around on your own; to travel, you can only use the\n  teleporters.\n  You start at Planet Thundera. You can use a teleporter to travel from Planet\n  Thundera to a point p1, then use another to get from p1to p2, and so on. The last teleportation must take you exactly to\n  Planet Care-a-Lot.\nGiven the locations in 3-dimensional space of both planets and all the\n  available teleporters, find out if it is possible for you to make the trip\n  using only teleporters. If the trip can be made, what is the minimum number\n  of teleportations needed to get to your destination? (Even if two\n  teleportations use the same teleporter, they still count as separate\n  teleportations.)\nThe input is given as points with coordinates that are all integers that fall\n  within a certain range. However, you are allowed to teleport to intermediate\n  points with integer or non-integer coordinates, and there are no range\n  restrictions on the points you can visit.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a single line with a\n  single integerN, the number of teleporters available. Then,N+2 lines follow, each containing three integersXi,Yi, andZi. The first of these lines\n  represents the coordinates of your home planet, Thundera. The second of these\n  lines represents the coordinates of your destination planet, Care-A-Lot. Each\n  of the remainingNlines represents the coordinates of one of the\n  teleporters.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif it is not possible to get from Thundera to\n  Care-A-Lot using only the available teleporters, or, if it is possible, an\n  integer representing the minimum number of teleportations needed.\nMemory limit: 1 GB.1 ≤T≤ 100.(Xi,Yi,Zi) ≠\n  (Xj,Yj,Zj) for all i\n    ≠ j. (No two described objects have the same coordinates.)\nTime limit: 180 seconds.1 ≤N≤ 100.-103≤Xi≤ 103, for all i.-103≤Yi≤ 103, for all i.-103≤Zi≤ 103, for all i.\nTime limit: 360 seconds.1 ≤N≤ 150.-1012≤Xi≤ 1012, for all i.-1012≤Yi≤ 1012, for all i.-1012≤Zi≤ 1012, for all i.\nIn Sample Case #1, the only teleporter is exactly 3 units away from Thundera,\n  and we can only use it to go to another position that isexactly3\n  units away from the teleporter. From that position, we can still only reach\n  other positions that are exactly 3 units away from the teleporter. Since\n  Care-a-Lot is 1 unit away from the teleporter, we can never reach it.\nIn Sample Case #2, the optimal strategy is to first use the teleporter at\n  (0, 0, 3) to travel to (0, 0, 5). Then, from there, use the teleporter at\n  (0, 0, 0) to travel to (0, 0, -5). Finally, from there, use the teleporter\n  at (0, 0, 3) again to travel to (0, 0, 11). Note that the two uses of the\n  teleporter at (0, 0, 3) cause us to travel different distances, because we\n  are at different distances from the teleporter each time. Also note that the\n  two uses of that teleporter count as two separate teleportations.\nIn Sample Case #3, the optimal strategy is to first use the teleporter at\n  (3, 0, 0) to travel to (6, 0, 0). Then, from there, use the teleporter at\n  (6, 1, 0) to travel to (6, 2, 0). Note that even though there was a\n  teleporter at (6, 0, 0), merely occupying the same point as a teleporter\n  does not count as using it.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a single line with a\n  single integerN, the number of teleporters available. Then,N+2 lines follow, each containing three integersXi,Yi, andZi. The first of these lines\n  represents the coordinates of your home planet, Thundera. The second of these\n  lines represents the coordinates of your destination planet, Care-A-Lot. Each\n  of the remainingNlines represents the coordinates of one of the\n  teleporters.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif it is not possible to get from Thundera to\n  Care-A-Lot using only the available teleporters, or, if it is possible, an\n  integer representing the minimum number of teleportations needed.",
        "sample_input": "3\n1\n0 0 0\n0 4 0\n0 3 0\n2\n0 0 1\n0 0 11\n0 0 3\n0 0 0\n3\n0 0 0\n6 2 0\n6 0 0\n3 0 0\n6 1 0",
        "sample_output": "Case #1: IMPOSSIBLE\nCase #2: 3\nCase #3: 2",
        "source": "2017\\world_finals\\teleporters"
    },
    {
        "problem_name": "Bathroom Stalls",
        "problem_statement": "A certain bathroom hasN+ 2 stalls in a single row; the stalls on the\n  left and right ends are permanently occupied by the bathroom guards. The\n  otherNstalls are for users.\nWhenever someone enters the bathroom, they try to choose a stall that is as far\n  from other people as possible. To avoid confusion, they follow deterministic\n  rules: For each empty stall S, they compute two\n  values LSand RS, each of which is the number of empty\n  stalls between S and the closest occupied stall to the left or right,\n  respectively. Then they consider the set of stalls with the farthest closest\n  neighbor, that is, those S for which min(LS, RS) is\n  maximal. If there is only one such stall, they choose it; otherwise, they choose\n  the one among those where max(LS, RS) is maximal. If there\n  are still multiple tied stalls, they choose the leftmost stall among those.\nKpeople are about to enter the bathroom; each one will choose their\n  stall before the next arrives. Nobody will ever leave.\nWhen the last person chooses their stall S, what will the values of\n  max(LS, RS) and min(LS, RS)\n  be?\nThe first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with two integersNandK, as described above.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis max(LS, RS), andzis min(LS, RS) as calculated by the last person to\n  enter the bathroom for their chosen stall S.\n1 ≤T≤ 100.1 ≤K≤N.Time limit: 60 seconds per test set.Memory limit: 1GB.\n1 ≤N≤ 1000.\n1 ≤N≤ 106.\n1 ≤N≤ 1018.\nIn Sample Case #1, the first person occupies the leftmost of the middle two\n  stalls, leaving the following configuration (Ostands for an\n  occupied stall and.for an empty one):O.O..O.\n  Then, the second and last person occupies the stall immediately to the right,\n  leaving 1 empty stall on one side and none on the other.\nIn Sample Case #2, the first person occupies the middle stall, getting toO..O..O. Then, the second and last person occupies the leftmost\n  stall.\nIn Sample Case #3, the first person occupies the leftmost of the two middle\n  stalls, leavingO..O...O. The second person then occupies the\n  middle of the three consecutive empty stalls.\nIn Sample Case #4, every stall is occupied at the end, no matter what the\n  stall choices are.\nIn Sample Case #5, the first and only person chooses the leftmost middle\n  stall.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each line describes a test case with two integersNandK, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis max(LS, RS), andzis min(LS, RS) as calculated by the last person to\n  enter the bathroom for their chosen stall S.",
        "sample_input": "5\n4 2\n5 2\n6 2\n1000 1000\n1000 1",
        "sample_output": "Case #1: 1 0\nCase #2: 1 0\nCase #3: 1 1\nCase #4: 0 0\nCase #5: 500 499",
        "source": "2018\\practice_session\\bathroom_stalls"
    },
    {
        "problem_name": "Number Guessing",
        "problem_statement": "This problem is a well-known classic; we present it primarily as an opportunity\n  for you to try out the interactive judging system.\nWe are thinking of an integer P within the range (A,B] —\n  that is,A< P ≤B. You haveNtries to guess our\n  number. After each guess that is not correct, we will tell you whether P is\n  higher or lower than your guess.\nThis problem isinteractive, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See theFAQfor an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it. To help you debug, a local testing tool script (in Python) is\n  provided at the very end of the problem statement.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nFor each test case, your program will read a single line with two integersAandB, representing the exclusive lower bound and inclusive\n  upper bound, as described above. In the next line, you will read a single\n  integerN, representing the maximum number of guesses you can make.\n  Your program will process up toNexchanges with our judge.\nFor each exchange, your program needs to use standard output to send a single\n  line with one integer Q: your guess. In response to your guess, the judge\n  will print a single line with one word to your input stream, which your\n  program must read through standard input. The word will beCORRECTif your guess is correct,TOO_SMALLif your\n  guess is less than the correct answer, andTOO_BIGif your guess\n  is greater than the correct answer. Then, you can start another exchange.\nIf your program gets something wrong (e.g., wrong output format, or\n  out-of-bounds values), the judge will sendWRONG_ANSWERto your input\n  stream and it will not send any other output after that. If your program\n  continues to wait for the judge after receivingWRONG_ANSWER,\n  your program will time out, resulting in a Time Limit Exceeded error. Notice\n  that it is your responsibility to have your program exit in time to receive\n  the appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\nIf your test case is solved withinNtries, you will receive theCORRECTmessage from the judge, as mentioned above, and then\n  continue to get input (a new line with two integersAandB,\n  etc.) for the next test case. AfterNtries, if the test case is not\n  solved, the judge will printWRONG_ANSWERand then stop sending output\n  to your input stream.\nYou should not send additional information to the judge after solving all test\n  cases. In other words, if your program keeps printing to standard output after\n  receivingCORRECTfor the last test case, you will get a Wrong Answer judgment.\n1 ≤T≤ 20.A= 0.N= 30.Time limit: 10 seconds per test set.Memory limit: 1GB.\nB= 30.\nB= 109.\nHere is a piece of pseudocode that demonstrates an interaction for one test set.\n  Suppose there are three test cases in this test set. The pseudocode first reads an\n  integer t, representing the number of test cases. Then the first test case begins.\n  Suppose the correct answer P is 9 for the first test case. The pseudocode first\n  reads three integers a, b, and n, representing the guessing range and maximum\n  number of tries, respectively, and then outputs a guess 30. Since 30 is greater\n  than 9, the stringTOO_BIGis received through stdin from the judge.\n  Then the pseudocode guesses 5 and receivesTOO_SMALLin response.\n  The guess 10 is subsequently printed to stdout which is again too big. Finally\n  the pseudocode guesses 9, and receivesCORRECTbecause 9 is the\n  correct answer.\nThe second test case shows what happens if the code continues to read from stdin\n  after the judge stops sending info. In this example, the contestant guesses 31,\n  which is outside the range (0, 30]. As a result, the judging system sendsWRONG_ANSWERto the input stream of the pseudocode and stops sending anything after that.\n  However, after readingWRONG_ANSWERinto string s, the code continues to read for\n  the next test case. Since there is nothing in the input stream (judge has stopped\n  sending info), the code hangs and will eventually receive a Time Limit Exceeded Error.\nIf the code in the example above exits immediately after readingWRONG_ANSWER,\n  it will receive a Wrong Answer judgment instead.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2018\\practice_session\\number_guessing"
    },
    {
        "problem_name": "Senate Evacuation",
        "problem_statement": "A small fire started in the senate room, and it needs to be evacuated!\nThere are some senators in the senate room, each of whom belongs to of one ofNpolitical parties. Those parties are named after the firstN(uppercase) letters of the English alphabet.\nThe emergency door is wide enough for up to two senators, so in each step of\nthe evacuation, you may choose to remove either one or two senators from the\nroom.\nThe senate rules indicate the senators in the room may vote on any bill at any\ntime, even in the middle of an evacuation! So, the senators must be evacuated\nin a way that ensures that no party ever has an absolute majority. That is, it\ncan never be the case after any evacuation step that more than half of the\nsenators in the senate room belong to the same party.\nCan you construct an evacuation plan? The senate is counting on you!\nThe first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case consists of two lines. The first line\ncontains a single integerN, the number of parties. The second line\ncontainsNintegers,P1,P2, ...,PN, wherePirepresents the number of\nsenators of the party named after the i-th letter of the alphabet.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe evacuation plan. The plan must be a space-separated list of instructions,\nin the order in which they are to be carried out, where each instruction is\neither one or two characters, representing the parties of the senators to\nevacuate in each step.\nIt is guaranteed that at least one valid evacuation plan will exist. If\nmultiple evacuation plans are valid, you may output any of them.\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 50.No party will have an absolute majority before the start of the evacuation.1 ≤Pi≤ 1000, for all i.\n2 ≤N≤ 3.sum of allPi≤ 9.\n2 ≤N≤ 26.sum of allPi≤ 1000.\nThe sample output displays one set of answers to the sample cases. Other\nanswers may be possible.\nIn Case #1, there are two senators from each of the parties A and B. If we\nremove one from each party every time, the perfect balance is maintained until\nevacuation is complete.\nCase #2 proceeds as follows:\nInitially in the room: 3 A, 2 B, 2 C.Evacuate AA. Still in the room: 1 A, 2 B, 2 C.Evacuate BC. Still in the room: 1 A, 1 B, 1 C.Evacuate C. Still in the room: 1 A, 1 B.Evacuate AB. Evacuation complete!\nNote that it would not be valid to begin the evacuation with BC, which would\nleave 3 A, 1 B, and 1 C in the room; party A would have an absolute majority (3\nout of 5 = 60%).\nFor Case #3, note thatCC ABwould also be a valid answer, andC C ABis also valid even though it requires three evacuation\nsteps instead of two.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.  Each test case consists of two lines. The first line\ncontains a single integerN, the number of parties. The second line\ncontainsNintegers,P1,P2, ...,PN, wherePirepresents the number of\nsenators of the party named after the i-th letter of the alphabet.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis\nthe evacuation plan. The plan must be a space-separated list of instructions,\nin the order in which they are to be carried out, where each instruction is\neither one or two characters, representing the parties of the senators to\nevacuate in each step.",
        "sample_input": "4\n2\n2 2\n3\n3 2 2\n3\n1 1 2\n3\n2 3 1",
        "sample_output": "Case #1: AB BA\nCase #2: AA BC C BA\nCase #3: C C AB\nCase #4: BA BB CA",
        "source": "2018\\practice_session\\senate_evacuation"
    },
    {
        "problem_name": "Steed 2: Cruise Control",
        "problem_statement": "Annie is a bus driver with a high-stress job. She tried to unwind by going on\n  a Caribbean cruise, but that also turned out to be stressful, so she has\n  recently taken up horseback riding.\nToday, Annie is riding her horse to the east along a long and narrow one-way\n  road that runs west to east. She is currently at kilometer 0 of the road, and\n  her destination is at kilometerD; kilometers along the road are\n  numbered from west to east.\nThere areNother horses traveling east on the same road; all of them\n  will go on traveling forever, and all of them are currently between Annie's\n  horse and her destination. The i-th of these horses is initially at kilometerKiand is traveling at its maximum speed ofSikilometers per hour.\nHorses are very polite, and a horse H1will not pass (move ahead\n  of) another horse H2that started off ahead of H1. (Two\n  or more horses can share the same position for any amount of time; you may\n  consider the horses to be single points.) Horses (other than Annie's) travel\n  at their maximum speeds, except that whenever a horse H1catches\n  up to another slower horse H2, H1reduces its speed to\n  match the speed of H2.\nAnnie's horse, on the other hand, does not have a maximum speed and can\n  travel at any speed that Annie chooses, as long as it does not pass another\n  horse. To ensure a smooth ride for her and her horse, Annie wants to choose\n  a single constant \"cruise control\" speed for her horse for the entire trip,\n  from her current position to the destination, such that her horse will not\n  pass any other horses. What is the maximum such speed that she can choose?\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with two integersDandN: the destination position of all of the horses (in kilometers)\n  and the number of other horses on the road. Then,Nlines follow. The\n  i-th of those lines has two integersKiandSi: the initial position (in kilometers) and maximum speed\n  (in kilometers per hour) of the i-th of the other horses on the road.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum constant speed (in kilometers per hour) that Annie can use\n  without colliding with other horses.ywill be considered\n  correct if it is within an absolute or relative error of 10-6of\n  the correct answer. See theFAQfor an explanation of what\n  that means, and what formats of real numbers we accept.\n1 ≤T≤ 100.0 <Ki<D≤ 109, for all i.Ki≠Kj, for all i ≠ j. (No two\n    horses start in the same position.)1 ≤Si≤ 10000.Time limit: 20 seconds per test set.Memory limit: 1GB.\n1 ≤N≤ 2.\n1 ≤N≤ 1000.\nIn Sample Case #1, there is one other (very slow!) horse on the road; it will\n  reach Annie's destination after 25 hours. Anything faster than 101 kilometers\n  per hour would cause Annie to pass the horse before reaching the destination.\nIn Sample Case #2, there are two other horses on the road. The faster horse\n  will catch up to the slower horse at kilometer 240 after 2 hours. Both horses\n  will then go at the slower horse's speed for 1 more hour, until the horses\n  reach Annie's destination at kilometer 300. The maximum speed that Annie can\n  choose without passing another horse is 100 kilometers per hour.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with two integersDandN: the destination position of all of the horses (in kilometers)\n  and the number of other horses on the road. Then,Nlines follow. The\n  i-th of those lines has two integersKiandSi: the initial position (in kilometers) and maximum speed\n  (in kilometers per hour) of the i-th of the other horses on the road.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum constant speed (in kilometers per hour) that Annie can use\n  without colliding with other horses.ywill be considered\n  correct if it is within an absolute or relative error of 10-6of\n  the correct answer. See theFAQfor an explanation of what\n  that means, and what formats of real numbers we accept.",
        "sample_input": "3\n2525 1\n2400 5\n300 2\n120 60\n60 90\n100 2\n80 100\n70 10",
        "sample_output": "Case #1: 101.000000\nCase #2: 100.000000\nCase #3: 33.333333",
        "source": "2018\\practice_session\\steed_2_cruise_control"
    },
    {
        "problem_name": "Cubic UFO",
        "problem_statement": "A mysterious cubic alien ship has appeared in the sky over Toronto! In this\n  problem, Toronto is a plane in three-dimensional space that is parallel to\n  the xz plane at y = -3 km. The alien ship is a solid cube with side length\n  1 km, centered at (0 km, 0 km, 0 km), with its eight corners at (+/- 0.5 km,\n  +/- 0.5 km, +/- 0.5 km). The ship is casting an ominous shadow onto the\n  plane; formally, the shadow is the orthogonal projection of the cube onto the\n  plane. (We consider the sun to be a point infinitely far above the Toronto\n  plane along the y-axis.)\nThe military is willing to tolerate the ship as long as the aliens meet their\n  bureaucratic demand: the shadow must cover an area of the plane that is\n  acceptably close toAkm2(see the Output section for a\n  precise definition). They have hired you, a geometric linguistics expert, to\n  convey this demand to the aliens. In your communications so far, you have\n  learned that the ship cannot change size, and the center of the ship cannot\n  move, but the ship is able to rotate arbitrarily in place.\nPlease find a way that the aliens can rotate the ship so that the shadow's\n  area is close toA. Express your rotation using three points: the\n  centers of any three non-pairwise-opposing faces.\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with a rationalA, the desired area of the shadow, in km2,\n  with exactly six digits after the decimal point.\nIt is guaranteed that there is always a way to rotate the ship in the desired\n  manner for the values ofAallowed in this problem.\nFor each test case, first output one line containingCase #x:,\n  wherexis the test case number (starting from 1). Then, output\n  three more lines with three rational values each: the x, y, and z coordinates\n  of one of your three provided face-centers, as described above. You are\n  welcome to use decimal (e.g., 0.000123456) or scientific notation (e.g.,\n  1.23456e-4).\nYour answer will be considered correct if and only if all of the following\n  are true:\nPlease note that you might need to output more than 6 digits after the\n  decimal point to safely pass the checks mentioned above. If there are\n  multiple acceptable answers, you may output any one of them.\n1 ≤T≤ 100.Time limit: 30 seconds per test set.Memory limit: 1GB.\n1.000000 ≤A≤ 1.414213\n1.000000 ≤A≤ 1.732050\nIn Sample Case #1, there is no need to rotate the cube at all; with two of its\n  faces already parallel to the plane, the cube is already casting a shadow\n  that is a square with side length 1.\nIn Sample Case #2, one possible solution is to tell the aliens to give the\n  cube a 45 degree turn around the x = y = 0 line, creating a shadow that is a\n  rectangle with dimensions of 1 and sqrt(2).\nThe following rough image shows the cubes and shadows for Sample Cases #1 and\n  #2. The sun is shown for clarity, but remember that it is actually a point\n  infinitely far away along the y-axis.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with a rationalA, the desired area of the shadow, in km2,\n  with exactly six digits after the decimal point.",
        "output_description": "For each test case, first output one line containingCase #x:,\n  wherexis the test case number (starting from 1). Then, output\n  three more lines with three rational values each: the x, y, and z coordinates\n  of one of your three provided face-centers, as described above. You are\n  welcome to use decimal (e.g., 0.000123456) or scientific notation (e.g.,\n  1.23456e-4).",
        "sample_input": "2\n1.000000\n1.414213",
        "sample_output": "Case #1:\n0.5 0 0\n0 0.5 0\n0 0 0.5\nCase #2:\n0.3535533905932738 0.3535533905932738 0\n-0.3535533905932738 0.3535533905932738 0\n0 0 0.5",
        "source": "2018\\qualification_round\\cubic_ufo"
    },
    {
        "problem_name": "Go, Gopher!",
        "problem_statement": "The Code Jam team has just purchased an orchard that is a two-dimensional\n  matrix of cells of unprepared soil, with 1000 rows and 1000 columns. We plan\n  to use this orchard to grow a variety of trees — AVL, binary, red-black,\n  splay, and so on — so we need topreparesome of the cells by\n  digging holes:\nNote that the above also implies that none of the cells outside of that\n  rectangle can be prepared. We want the orchard to look tidy!\nFor example, whenA=11, although the eleven prepared cells in the left\n  figure below form a 3x4 rectangle (that is, with 3 rows and 4 columns), the\n  cell in the center of the rectangle is not prepared. As a result, we have not\n  yet completed preparing our orchard, since not every cell of the 3x4 rectangle\n  is prepared. However, after just preparing the center cell, the rectangle of\n  size at least 11 is fully filled, and the orchard is ready.\nSee below for another example. In this case,A=6. Note that the middle\n  figure prepares a cell outside the 3x2 rectangle, so although the rightmost\n  figure prepares a rectangle of size 6, the entire set of the prepared cells\n  does not form a rectangle (due to the extra cell on the left). As a result,\n  the orchard is not ready.\nDigging is hard work for humans, so we have borrowed theGo gopherfrom theGoogle Goteam and trained it to help us\n  out by preparing cells. We candeploythe gopher by giving it the\n  coordinates of atarget cellin the matrix that is not along any of\n  the borders of the matrix. However, we have not yet perfected the gopher's\n  training, so it will choose a cell uniformly at(pseudo-)randomfrom the 3x3 block of nine cells centered on the target\n  cell, and then prepare the cell it has chosen. (If it chooses a cell that\n  was already prepared, it will uselessly prepare it again.)\nWe can only deploy the gopher up to 1000 times before it gets too tired to\n  keep digging, so we need your help in figuring out how to deploy it\n  strategically. When you deploy the gopher, you will be told which cell the\n  gopher actually prepared, and you can take this information into account\n  before deploying it again, if needed. Note that you do not have to declare\n  the dimensions or location of a rectangle in advance.\nThis problem isinteractive, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See theFAQfor an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it. To help you debug, a local testing tool script (in Python) is\n  provided at the very end of the problem statement. In addition, sample solutions\n  to a previous Code Jam interactive problem (in all of our supported languages) are\n  provided in the analysis forNumber Guessing.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nFor each test case, your program will read a single line containing a single\n  integerAindicating the minimum required prepared rectangular area.\n  Then, your program will process up to 1000 exchanges with our judge.\nFor each exchange, your program needs to use standard output to send a single\n  line containing two integers I and J: the row and column number you want to\n  deploy the gopher to. The two integers must be between 2 and 999, and written\n  in base-10 without leading zeroes. If your output format is wrong (e.g., out\n  of bounds values), your program will fail, and the judge will send you a single\n  line with-1 -1which signals that\n  your test has failed, and it will not send anything to your input stream after\n  that. Otherwise, in response to your deployment, the judge will print a single\n  line containing two integers I' and J' to your input stream, which your\n  program must read through standard input.\nIf the last deployment caused the set of prepared cells to be a rectangle\n  of area at leastA, you will get I' = J' = 0, signaling the end of the\n  test case. Otherwise, I' and J' are the row and column numbers of the cell\n  that was actually prepared by the gopher, with abs(I'-I) ≤ 1 and abs(J'-J) ≤ 1.\n  Then, you can start another exchange.\nIf your program gets something wrong (e.g. wrong output format, or\n  out-of-bounds values), as mentioned above, the judge will send I' = J' = -1,\n  and stop sending output to your input stream afterwards. If your program\n  continues to wait for the judge after reading in I' = J' = -1, your program\n  will time out, resulting in a Time Limit Exceeded error. Notice that it is\n  your responsibility to have your program exit in time to receive the\n  appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\nIf the test case is solved within 1000 deployments, you will receive the\n  I' = J' = 0 message from the judge, as mentioned above, and then continue to\n  solve the next test case. After 1000 exchanges, if the test case is not\n  solved, the judge will send the I' = J' = -1 message, and stop sending output\n  to your input stream after.\nYou should not send additional information to the judge after solving all test\n  cases. In other words, if your program keeps printing to standard output after\n  receiving I' = J' = 0 message from the judge for the last test case, you will\n  receive a Wrong Answer judgment.\nPlease be advised that for a given test case, the cells that the gopher will pick\n  from each 3x3 block are (pseudo-)random and independent of each other, but\n  they are determined using the same seed each time for the same test case,\n  so a solution that gives an incorrect result for a test case will do so\n  consistently across all attempts for the same test case. We have also set\n  different seeds for different test cases.\n1 ≤T≤ 20.Memory limit: 1 GB.\nA= 20.Time limit (for the entire test set): 20 seconds.\nA= 200.Time limit (for the entire test set): 60 seconds.\nThe pseudocode above is the first half of a sample interaction for one test set.\n  Suppose there are only two test cases in this test set. The pseudocode first reads\n  the number of test cases into an integert. Then the first test case begins.\n  For the first test case, supposeAis 3 (although, in the real test sets,Ais always either 20 or 200). The pseudocode first reads the value ofAinto an integera, and outputs10 10the location of\n  the cell to prepare. By (pseudo-)random choice, the cell at location 10 11 is\n  prepared, so the code reads10 11in response. Next, the code\n  outputs cell10 10again for preparation, and the gopher prepares10 10this time. The code subsequently sends10 12with\n  the goal of finishing preparing a rectangle of size 3, but only gets cell10 11prepared again.10 10is then sent out, and this time11 10is prepared. Notice that although the prepared area is of size 3,\n  a rectangle has not been formed, so the preparation goes on. In the end, the pseudocode\n  decides to try out cell11 10, and0 0is sent back, which\n  implies that cell 11 11 has been prepared, completing a rectangle (or square, rather)\n  or size 4. As a result, the first test case is successfully solved.\nNow the pseudocode is ready for the second test case. It again first reads an integera = 3and decides to send cell10 10to prepare.\n  However, this time, the code forgets to\n    flush the stdout buffer! As a result, 10 10 is buffered and not sent to the judge.\n  Both the judge and the code wait on each other, leading to a deadlock and eventually a\n  Time Limit Exceeded error.\nThe code above is another example. Suppose for the second test case, the code\n  remembers to flush the output buffer, but sends out cell1 1to prepare.\n  Remember that the row and column of the chosen cell must both be in the range\n  [2, 999], so 1 1 is illegal! As a result, the judge sends back-1 -1.\n  However, after reading-1 -1into x and y, the code proceeds to\n  send another cell location to the judge, and wait. Since there is nothing in\n  the input stream (the judge has stopped sending info), the code hangs and will\n  eventually receive a Time Limit Exceeded error.\nNote that if the code in the example above exits immediately after reading-1 -1, it will receive a Wrong Answer instead:\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2018\\qualification_round\\go_gopher"
    },
    {
        "problem_name": "Saving The Universe Again",
        "problem_statement": "An alien robot is threatening the universe, using a beam that will destroy\n  all algorithms knowledge. We have to stop it!\nFortunately, we understand how the robot works. It starts off with a beam\n  with a strength of 1, and it will run a program that is a series of\n  instructions, which will be executed one at a time, in left to right order.\n  Each instruction is of one of the following two types:\nFor example, if the robot's program isSCCSSC, the robot will\n  do the following when the program runs:\nIn that case, the program would do a total of 9 damage.\nThe universe's top algorithmists have developed a shield that can withstand\n  a maximum total ofDdamage. But the robot's current program might do\n  more damage than that when it runs.\nThe President of the Universe has volunteered to fly into space to hack the\n  robot's program before the robot runs it. The only way the President can hack\n  (without the robot noticing) is by swapping two adjacent instructions. For\n  example, the President could hack the above program once by swapping the\n  third and fourth instructions to make itSCSCSC. This would\n  reduce the total damage to 7. Then, for example, the president could hack the\n  program again to make itSCSSCC, reducing the damage to 5, and\n  so on.\nTo prevent the robot from getting too suspicious, the President does not\n  want to hack too many times. What is this smallest possible number of hacks\n  which will ensure that the program does no more thanDtotal damage,\n  if it is possible to do so?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing an integerDand a stringP: the maximum total damage our shield can\n  withstand, and the robot's program.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis either the minimum number of hacks needed to accomplish\n  the goal, orIMPOSSIBLEif it is not possible.\n1 ≤T≤ 100.1 ≤D≤ 109.2 ≤ length ofP≤ 30.Every character inPis eitherCorS.Time limit: 20 seconds per test set.Memory limit: 1GB.\nThe robot's program contains either zero or oneCcharacters.\nNo additional restrictions to the Limits section.\nNote that the last three sample cases would not appear in test set 1.\nIn Sample Case #1, the President can swap the two instructions to reduce the\n  total damage to 1, which the shield can withstand.\nIn Sample Case #2, the President does not need to hack the program at all,\n  since the shield can already withstand the 2 total damage it will cause.\nIn Sample Case #3, the program will do more damage than the shield can\n  withstand, and hacking will do nothing to change this. The universe is doomed.\nSample Case #4 uses the program described in the problem statement. The\n  statement demonstrates one way to reduce the total damage to 5 using two\n  hacks. It is not possible to reduce the damage to 6 or less by using only one\n  hack; remember that the President can only swap adjacent instructions.\nIn Sample Case #5, the robot will never shoot, and so it will never do any\n  damage. No hacking is required.\nIn Sample Case #6, five hacks are required. Notice that even if two hacks\n  swap the instructions at the same two positions, they still count as separate\n  hacks.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing an integerDand a stringP: the maximum total damage our shield can\n  withstand, and the robot's program.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis either the minimum number of hacks needed to accomplish\n  the goal, orIMPOSSIBLEif it is not possible.",
        "sample_input": "6\n1 CS\n2 CS\n1 SS\n6 SCCSSC\n2 CC\n3 CSCSS",
        "sample_output": "Case #1: 1\nCase #2: 0\nCase #3: IMPOSSIBLE\nCase #4: 2\nCase #5: 0\nCase #6: 5",
        "source": "2018\\qualification_round\\saving_the_universe_again"
    },
    {
        "problem_name": "Trouble Sort",
        "problem_statement": "Deep in Code Jam's secret algorithm labs, we devote countless hours to\n  wrestling with one of the most complex problems of our time: efficiently\n  sorting a list of integers into non-decreasing order. We have taken a careful\n  look at the classicbubble sortalgorithm, and we are pleased to announce a new variant.\nThe basic operation of the standard bubble sort algorithm is to examine a\n  pair of adjacent numbers, and reverse that pair if the left number is\n  larger than the right number. But our algorithm examines a group ofthreeadjacent numbers, and if the leftmost number is larger than the\n  rightmost number, it reverses that entire group. Because our algorithm is a\n  \"triplet bubble sort\", we have named it Trouble Sort for short.\nFor example, for L = 5 6 6 4 3, Trouble Sort would proceed as follows:\nWe were looking forward to presenting Trouble Sort at the Special Interest\n  Group in Sorting conference in Hawaii, but one of our interns has just\n  pointed out a problem: it is possible that Trouble Sort does not correctly\n  sort the list! Consider the list 8 9 7, for example.\nWe need your help with some further research. Given a list ofNintegers, determine whether Trouble Sort will successfully sort the list into\n  non-decreasing order. If it will not, find the index (counting starting from\n  0) of the first sorting error after the algorithm has finished: that is, the\n  first value that is larger than the value that comes directly after it when\n  the algorithm is done.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines: one line\n  with an integerN, the number of values in the list, and then another\n  line withNintegersVi, the list of values.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisOKif Trouble Sort correctly sorts the list, or the index\n  (counting starting from 0) of the first sorting error, as described above.\n1 ≤T≤ 100.0 ≤Vi≤ 109, for all i.Memory limit: 1GB.\n3 ≤N≤ 100.Time limit (for the entire test set): 10 seconds.\n3 ≤N≤ 105.Time limit (for the entire test set): 20 seconds.\nNotice that test set 2 for this problem has a large amount of input, so\n  using a non-buffered reader might lead to slower input reading. In addition,\n  keep in mind that certain languages have a small input buffer size by default.\nSample Case #1 is similar to the first one described in the problem\n  statement. Trouble Sort correctly sorts this list, so the answer isOK.\nSample Case #2 is the second one described in the problem statement. Trouble\n  Sort does not correctly sort this list, since it terminates with the list\n  7 9 8. The 9 is the first value in the list that is larger than\n  the next value, so the index of the first sorting error is 1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of two lines: one line\n  with an integerN, the number of values in the list, and then another\n  line withNintegersVi, the list of values.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisOKif Trouble Sort correctly sorts the list, or the index\n  (counting starting from 0) of the first sorting error, as described above.",
        "sample_input": "2\n5\n5 6 8 4 3\n3\n8 9 7",
        "sample_output": "Case #1: OK\nCase #2: 1",
        "source": "2018\\qualification_round\\trouble_sort"
    },
    {
        "problem_name": "Bit Party",
        "problem_statement": "These days, robots can drive cars, but can they throw a good party? The Code\n  Jam team's research into this topic is still at an early stage. We just\n  deployedRrobot shoppers to our local supermarket to buy party\n  supplies for our World Finals in Toronto, but their first-order model of a\n  Canadian party was very simple: they just boughtB\"bits\" (a bit being\n  a small donut-like treat found in the area). We will work on improving their\n  AI later, but for now, we want to help them purchase all of those bits as\n  quickly as possible.\nThe supermarket hasCcashiers who can scan customers' purchases. The\n  i-th cashier will:\nThat is, a customer who brings N bits to the i-th cashier (where N must be\n  less than or equal toMi) will spend a total ofSi× N +Piseconds interacting\n  with that cashier.\nBefore the robots interact with any cashiers, you will distribute the bits\n  among the robots however you want. (Bits must remain intact; you cannot\n  break them up into fractional pieces!) Any robot that gets no bits will not\n  get to interact with a cashier, and will go away disappointed.\nThen, for each robot with at least one bit, you will choose adifferentsingle cashier. (Two robots cannot use the same cashier, and\n  a robot cannot use more than one cashier.) The robots all start interacting\n  with their cashiers at time 0. Note that once a robot finishes interacting\n  with its cashier, it cannot be given more bits and cannot interact with other\n  cashiers.\nIf you help the robots make optimal choices, what is the earliest time at\n  which all of the robots can finish interacting with their cashiers?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with three integersR,B, andC: the numbers of robot shoppers, bits, and\n  cashiers. Then, there areCmore lines. The i-th of these represents\n  the i-th cashier, and it has three integersMi,Si, andPi: the maximum number of bits,\n  scan time per bit (in seconds), and payment/packaging time (in seconds) for\n  that cashier, as described above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the earliest time (in seconds) at which all robots can finish interacting\n  with their cashiers.\n1 ≤T≤ 100.1 ≤Mi≤ 109, for all i.1 ≤Si≤ 109, for all i.1 ≤Pi≤ 109, for all i.The sum of theRlargest values ofMi≥B. (It is possible for at least one subset ofRcashiers to\n    handle all of the bits.)Time limit: 15 seconds per test set.Memory limit: 1GB.\n1 ≤R≤C≤ 5.1 ≤B≤ 20.\n1 ≤R≤C≤ 1000.1 ≤B≤ 109.\nIn Sample Case #1, there are two robots, two bits, and two cashiers, and\n  each cashier can only handle one item. So, you must give one bit to each\n  robot. Cashier 1 takes 5 seconds, and Cashier 2 takes 3 seconds, so the time\n  required is 5 seconds.\nSample Case #2 is similar to the previous case, except that now Cashier 2\n  can handle up to 2 items. So, it is best to give all the bits to one robot\n  and have that robot use Cashier 2. This takes 1 second per item plus 2\n  seconds = 4 seconds.\nIn Sample Case #3, the optimal strategy is to send one robot with 2 bits to\n  cashier 2, and two robots with 1 bit each to any of the other cashiers.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with three integersR,B, andC: the numbers of robot shoppers, bits, and\n  cashiers. Then, there areCmore lines. The i-th of these represents\n  the i-th cashier, and it has three integersMi,Si, andPi: the maximum number of bits,\n  scan time per bit (in seconds), and payment/packaging time (in seconds) for\n  that cashier, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the earliest time (in seconds) at which all robots can finish interacting\n  with their cashiers.",
        "sample_input": "3\n2 2 2\n1 2 3\n1 1 2\n2 2 2\n1 2 3\n2 1 2\n3 4 5\n2 3 3\n2 1 5\n2 4 2\n2 2 4\n2 5 1",
        "sample_output": "Case #1: 5\nCase #2: 4\nCase #3: 7",
        "source": "2018\\round_1a\\bit_party"
    },
    {
        "problem_name": "Edgy Baking",
        "problem_statement": "The baker Mr. Maillard has rolled out some cookie dough and cut it up to\n  createNcookies, each of which is a rectangle. He was just about to\n  put them in the oven when he remembered that the crispy, caramelized edges of\n  cookies taste particularly delicious. Specifically, he thinks he would be\n  happiest if the sum of the perimeters of all the cookies were as close as\n  possible toPmillimeters (mm), without going over. (If the batch of\n  cookies istooedgy, it might burn!)\nFor each cookie, Mr. Maillard can decide whether to leave it as is, or make a\n  single straight cut to separate it into two (not necessarily rectangular)\n  halves with equal area. (Note that such a cut must necessarily go through the\n  center of the cookie.) The two new cookies created in this way cannot\n  themselves be cut again.\nIf Mr. Maillard makes optimal decisions, what is the closest he can come toPwithout exceeding it?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandP: the number of cookies, and the desired perimeter sum\n  (in mm), respectively. Then,Nlines follow. The i-th of these has two\n  integersWiandHi: the width and height\n  (both in mm) of the i-th cookie.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a real number: the largest possible sum (in mm) of the perimeters of all\n  cookies (after Mr. Maillard is done cutting) that does not exceedP.ywill be considered correct if it is within an absolute or\n  relative error of 10-6of the correct answer. See theFAQfor an explanation of what that means, and what formats of real numbers we\n  accept.\n1 ≤T≤ 100.1 ≤N≤ 100.1 ≤Wi≤ 250, for all i.1 ≤Hi≤ 250, for all i.P≥ 2 × the sum of (Wi+Hi) over all i. (Pis at least as large as the\n  sum of the perimeters of all cookies before any cuts are made.)P≤ 108.Time limit: 15 seconds per test set.Memory limit: 1GB.\nWi=Wj, for all i and j.Hi=Hj, for all i and j.(All of the provided cookies have the same dimensions.)\nNo additional limits beyond the general ones. (In particular, the provided\n  cookies do not all necessarily have the same dimensions.)\nNote that the last sample case would not appear in test set 1.\nIn Sample Case #1, there is only one cookie, and it is a square with side\n  length 1. Mr. Maillard can cut from one corner to a diagonally opposite\n  corner, which creates two right triangles, each of which has side lengths 1,\n  1, and sqrt(2). Then the perimeter sum is 4 + 2 × sqrt(2); this is\n  smaller thanP= 7, but it is not possible to get any closer.\nIn Sample Case #2, Mr. Maillard can cut the first cookie along its longer\n  axis to create two new 25 x 120 rectangles, and leave the second cookie\n  alone. The total perimeter is then 580 + 340 = 920, which is exactlyP.\nIn Sample Case #3, Mr. Maillard can cut the cookie to make two trapezoids,\n  each of which has side lengths of 2, 4, 5, and 5. Then the new perimeter sum\n  is 32, which is exactlyP.\nIn Sample Case #4, the initial perimeter sum is exactlyP, so Mr.\n  Maillard should not make any cuts.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandP: the number of cookies, and the desired perimeter sum\n  (in mm), respectively. Then,Nlines follow. The i-th of these has two\n  integersWiandHi: the width and height\n  (both in mm) of the i-th cookie.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a real number: the largest possible sum (in mm) of the perimeters of all\n  cookies (after Mr. Maillard is done cutting) that does not exceedP.ywill be considered correct if it is within an absolute or\n  relative error of 10-6of the correct answer. See theFAQfor an explanation of what that means, and what formats of real numbers we\n  accept.",
        "sample_input": "4\n1 7\n1 1\n2 920\n50 120\n50 120\n1 32\n7 4\n3 240\n10 20\n20 30\n30 10",
        "sample_output": "Case #1: 6.828427\nCase #2: 920.000000\nCase #3: 32.000000\nCase #4: 240.000000",
        "source": "2018\\round_1a\\edgy_baking"
    },
    {
        "problem_name": "Waffle Choppers",
        "problem_statement": "The diners at the Infinite House of Pancakes have gotten tired of circular\n  pancakes, so the chefs are about to offer a new menu option: waffles! As a\n  publicity stunt, they have made one large waffle that is a grid of square\n  cells withRrows andCcolumns. Each cell of the waffle is\n  either empty, or contains a single chocolate chip.\nNow it is time for the chefs to divide up the waffle among their hungry\n  diners. Ahorizontal cutruns along the entire gridline between two\n  of the rows; avertical cutruns along the entire gridline between\n  two of the columns. For efficiency's sake, one chef will make exactlyHdifferent horizontal cuts and another chef will make exactlyVdifferent vertical cuts. This will conveniently create one piece for each of\n  the (H+ 1) × (V+ 1) diners. The pieces will not\n  necessarily all be of equal sizes, but that is fine; market research has\n  shown that the diners do not care about that.\nWhat the diners do care about is the number of chocolate chips they get, so\n  each piece must have exactly the same number of chocolate chips. Can you\n  determine whether the chefs can accomplish this goal using the given numbers\n  of horizontal and vertical cuts?\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each begins with one line containing four\n  integersR,C,H, andV: the number of rows and\n  columns in the waffle, and the exact numbers of horizontal and vertical cuts\n  that the chefs must make. Then, there areRmore lines ofCcharacters each; the j-th character in the i-th of these lines represents the\n  cell in the i-th row and the j-th column of the waffle. Each character is\n  either@, which means the cell has a chocolate chip, or., which means the cell is empty.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyisPOSSIBLEif the chefs can accomplish the goal\n  as described above, orIMPOSSIBLEif they cannot.\n1 ≤T≤ 100.Time limit: 6 seconds per test set.Memory limit: 1GB.\n2 ≤R≤ 10.2 ≤C≤ 10.H= 1.V= 1.\n2 ≤R≤ 100.2 ≤C≤ 100.1 ≤H<R.1 ≤V<C.\nNote that the last two sample cases would not appear in test set 1.\nIn Sample Case #1, one possible strategy is to make the horizontal cut between\n  the second and third rows from the top, and make the vertical cut between the\n  fourth and fifth columns from the left. That creates the following pieces,\n  each of which has exactly two chocolate chips:.@@. .@.... .@@.@. @@In Sample Case #2, no matter where you make the horizontal cut and the\n  vertical cut, you will create pieces with unequal numbers of chocolate chips,\n  so the case is impossible.In Sample Case #3, there are no chocolate chips in the waffle. Any cutting\n  strategy creates pieces which have the same number of chocolate chips (zero),\n  so the diners are happy... but maybe not as happy as they would have been if\n  they had gotten chocolate chips!In Sample Case #4, just as in Sample Case #2, you cannot succeed regardless\n  of where you make your horizontal cut and your vertical cut.In Sample Case #5, the chefs can make the only two possible horizontal cuts,\n  and make the two vertical cuts to the right of the first and third columns.Although Sample Case #6 would be possible for other numbers of horizontal and\n  vertical cuts, remember that you must use exactlyHhorizontal cuts\n  and exactlyVvertical cuts. No matter where you make your one\n  horizontal cut and two vertical cuts, you cannot succeed.\n.@@. .@.... .@@.@. @@\nIn Sample Case #2, no matter where you make the horizontal cut and the\n  vertical cut, you will create pieces with unequal numbers of chocolate chips,\n  so the case is impossible.\nIn Sample Case #3, there are no chocolate chips in the waffle. Any cutting\n  strategy creates pieces which have the same number of chocolate chips (zero),\n  so the diners are happy... but maybe not as happy as they would have been if\n  they had gotten chocolate chips!\nIn Sample Case #4, just as in Sample Case #2, you cannot succeed regardless\n  of where you make your horizontal cut and your vertical cut.\nIn Sample Case #5, the chefs can make the only two possible horizontal cuts,\n  and make the two vertical cuts to the right of the first and third columns.\nAlthough Sample Case #6 would be possible for other numbers of horizontal and\n  vertical cuts, remember that you must use exactlyHhorizontal cuts\n  and exactlyVvertical cuts. No matter where you make your one\n  horizontal cut and two vertical cuts, you cannot succeed.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each begins with one line containing four\n  integersR,C,H, andV: the number of rows and\n  columns in the waffle, and the exact numbers of horizontal and vertical cuts\n  that the chefs must make. Then, there areRmore lines ofCcharacters each; the j-th character in the i-th of these lines represents the\n  cell in the i-th row and the j-th column of the waffle. Each character is\n  either@, which means the cell has a chocolate chip, or., which means the cell is empty.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyisPOSSIBLEif the chefs can accomplish the goal\n  as described above, orIMPOSSIBLEif they cannot.",
        "sample_input": "6\n3 6 1 1\n.@@..@\n.....@\n@.@.@@\n4 3 1 1\n@@@\n@.@\n@.@\n@@@\n4 5 1 1\n.....\n.....\n.....\n.....\n4 4 1 1\n..@@\n..@@\n@@..\n@@..\n3 4 2 2\n@.@@\n@@.@\n@.@@\n3 4 1 2\n.@.@\n@.@.\n.@.@",
        "sample_output": "Case #1: POSSIBLE\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\nCase #4: IMPOSSIBLE\nCase #5: POSSIBLE\nCase #6: IMPOSSIBLE",
        "source": "2018\\round_1a\\waffle_choppers"
    },
    {
        "problem_name": "Mysterious Road Signs",
        "problem_statement": "The town of Signfield is on a perfectly straight and infinitely long road\n  running from west to east. Along that road, there is a sequence ofSmysterious road signs with numbers on both sides. The i-th sign (numbered in\n  order from west to east) is at a pointDikilometers east\n  of Signfield, and has a numberAion the west-facing side\n  and a numberBion the east-facing side.\nNobody in Signfield knows what these signs are trying to say. You think\n  that the numbers on the west sides of the signs are intended for drivers\n  traveling east, and that they represent distances to some particular\n  destination. Similarly, you think that the numbers on the east sides of the\n  signs are for drivers traveling west, and that they represent distances to\n  some particular destination. You suspect that not all of the signs may be\n  consistent with this theory, though.\nTo start testing your theory, you are interested in finding valid sets of\n  signs that obey the following rules:\nWhat is the largest possible number of signs in a valid set as described\n  above, and how many different valid sets of that size are there?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing one integerS: the number of road signs. Then,Smore lines follow. The\n  i-th of these lines represents the i-th sign (in west-to-east order), and\n  contains three integersDi,Ai, andBi: the sign's distance (in kilometers) east of Signfield,\n  the number on its west side, and the number on its east side.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1), andyandzare the largest possible number of signs\n  in a valid set and the number of valid sets of that size, as described in\n  the problem statement.\n1 ≤T≤ 60.1 ≤Di≤ 106, for all i.Di<Dj, for all i < j.1 ≤Ai≤ 106, for all i.1 ≤Bi≤ 106, for all i.Time limit (for each test set): 10 seconds.Memory limit: 1GB.\n1 ≤S≤ 100 for all test cases.\n1 ≤S≤ 100 for all but 3 test cases.S= 105for 3 test cases.\nIn Sample Case #1, there is only one sign. If we choose just that sign as our\n  set, there are many possible values of M and N that work — for example:\nSo, the set consisting of just that one sign is valid. That is the only set\n  of that length, so the answer is1 1.\nIn Sample Case #2, note that the first, second, fourth, and fifth signs would\n  be consistent with M = 9 and N = -1, but they do not form a contiguous\n  subsequence. (The 1 on the back of the third sign cannot be used as if it\n  were on the front.) As it turns out, there is no valid set of four signs.\n  There are two different valid sets of three signs. Note that although there\n  are two different M/N pairs that make the second set of three signs valid,\n  that set counts only once:\nIn Sample Case #3, the entire sequence is a valid set, with M = 4 and N = 2.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing one integerS: the number of road signs. Then,Smore lines follow. The\n  i-th of these lines represents the i-th sign (in west-to-east order), and\n  contains three integersDi,Ai, andBi: the sign's distance (in kilometers) east of Signfield,\n  the number on its west side, and the number on its east side.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1), andyandzare the largest possible number of signs\n  in a valid set and the number of valid sets of that size, as described in\n  the problem statement.",
        "sample_input": "3\n1\n1 1 1\n5\n2 7 12\n6 3 11\n8 10 1\n11 11 12\n13 9 14\n5\n1 3 3\n2 2 2\n3 1 1\n4 2 2\n5 3 3",
        "sample_output": "Case #1: 1 1\nCase #2: 3 2\nCase #3: 5 1",
        "source": "2018\\round_1b\\mysterious_road_signs"
    },
    {
        "problem_name": "Rounding Error",
        "problem_statement": "To finally settle the age-old question of which programming language is the\n  best, you are asking a total ofNpeople to tell you their favorite\n  language. This is an open-ended question: each person is free to name any\n  language, and there are infinitely many languages in the world.\nSome people have already responded, and you have gathered this information as\n  a list of counts. For example,1 2means that you have asked 3\n  people so far, and one picked a particular language, and the other two picked\n  some other language.\nYou plan to publish the results in a table listing each language and the\n  percentage of people who picked it. You will round each percentage to the\n  nearest integer, rounding up any percentage with a decimal part equal to or\n  greater than 0.5. So, for example, 12.5% would round up to 13%, 99.5% would\n  round up to 100%, and 12.4999% would round down to 12%.\nIn surveys like this, sometimes the rounded percentages do not add up to\n  exactly 100. After you are done surveying the remaining people, what is the\n  largest value that the rounded percentages could possibly add up to?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line\n  consists of two integersNandL: the total number of people\n  in the survey, and the total number of different languages represented\n  among the people who have already responded. The second line consists ofLintegersCi; the i-th of these is the number of\n  people who said that the i-th of the represented languages was their\n  favorite.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest value that the percentages could possibly add up to, as\n  described above.\n1 ≤T≤ 100.1 ≤L<N.1 ≤Ci, for all i.The sum of allCivalues <N.Time limit: 10 seconds per test set.Memory limit: 1GB.\n2 ≤N≤ 25.\n2 ≤N≤ 250.\n2 ≤N≤ 105.\nIn Sample Case #1, two people have already responded, and they have chosen\n  different languages. One person has not yet responded. If that person chooses\n  a third language, then the rounded percentages will add up to 33 + 33 + 33 =\n  99. However, if that person chooses one of the already-chosen languages, then\n  the rounded percentages will add up to 67 + 33 = 100. So 100 is the maximum\n  possible sum.\nIn Sample Case #2, regardless of what the other four people choose, the\n  percentages for the various languages will always be exact multiples of 10\n  that do not need to be rounded, and they will add up to exactly 100.\nIn Sample Case #3, one optimal scenario is as follows: each of the remaining\n  two people chooses an unchosen language, so the rounded percentages add up to\n  50 + 17 + 17 + 17 = 101.\nIn Sample Case #4, whether or not the remaining person chooses an\n  already-chosen language, the rounded percentages will add up to 99.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of two lines. The first line\n  consists of two integersNandL: the total number of people\n  in the survey, and the total number of different languages represented\n  among the people who have already responded. The second line consists ofLintegersCi; the i-th of these is the number of\n  people who said that the i-th of the represented languages was their\n  favorite.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest value that the percentages could possibly add up to, as\n  described above.",
        "sample_input": "4\n3 2\n1 1\n10 3\n1 3 2\n6 2\n3 1\n9 8\n1 1 1 1 1 1 1 1",
        "sample_output": "Case #1: 100\nCase #2: 100\nCase #3: 101\nCase #4: 99",
        "source": "2018\\round_1b\\rounding_error"
    },
    {
        "problem_name": "Transmutation",
        "problem_statement": "You are the most skilled alchemist of a country that considers metals such as\n  gold, platinum, and silver to be uninteresting, but highly values lead. There\n  areMmetals known in the world; lead is metal number 1 on your\n  periodic table. Your country's leader has asked you to use the metal in the\n  treasury to make as much lead as possible.\nFor each metal (including lead), you know exactly one formula that lets you\n  create one gram of that metal by destroying one gram each of two ingredient\n  metals. (If you are wondering about the principle of mass conservation, the\n  other gram is lost in useless waste products.) The formulas do not work with\n  partial grams. However, you can use each formula as often as you would like\n  (or not at all), as long as you have the required ingredients each time.\nIf you make optimal choices, what is the largest total amount of lead you can\n  end up with? Note that it is possible that you may have some metals other\n  than lead left over after you are done.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerM: the number of metals known in the world. Then there areMmore lines with two integersRi1andRi2each; the i-th of these lines indicates that you can create one gram of metal\n  i by destroying one gram of metalRi1and one gram of metalRi2. Finally, there is one line withMintegersG1,G2, ...,GM;Giis the number of grams of metal i in the treasury. Lead\n  is metal 1.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest amount of lead, in grams, that you can end up with.\n1 ≤T≤ 100.1 ≤Ri1<Ri2≤M,\n    for all i.Time limit: 5 seconds per test set.Memory limit: 1GB.\n2 ≤M≤ 8.0 ≤Gi≤ 8, for all i.\n2 ≤M≤ 100.0 ≤Gi≤ 100, for all i.\n2 ≤M≤ 100.0 ≤Gi≤ 109, for all i.\nIn Sample Case #1, the optimal strategy is to use 2 grams of metals 2\n  and 3 to produce 2 more grams of lead, for a total of 7 grams of lead.\nIn Sample Case #2, the optimal strategy is to first use 2 grams of metal 3\n  and 2 grams of metal 5 to produce 2 grams of metal 4, and then use 4 grams\n  of metal 3 and 4 grams of metal 4 to produce 4 grams of lead. Note that it is\n  possible for two formulas to have the same two ingredients (you just use\n  different alchemical techniques). Also note that not every metal is\n  necessarily an ingredient in some other formula; in this case, metal 2 is\n  never an ingredient.\nIn Sample Case #3, note that it is possible for a metal to be used to produce\n  itself. (Sometimes the laws of alchemy may be silly!) Unfortunately, it is\n  not possible to produce any lead in this case. Note that since formulas only\n  work on single-gram quantities, youcannot, for example, use 0.5 grams\n  of each of metals 2 and 3 to create 0.5 grams of metal 4, and then use 0.5\n  grams of each of metals 3 and 4 to create 0.5 grams of lead.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerM: the number of metals known in the world. Then there areMmore lines with two integersRi1andRi2each; the i-th of these lines indicates that you can create one gram of metal\n  i by destroying one gram of metalRi1and one gram of metalRi2. Finally, there is one line withMintegersG1,G2, ...,GM;Giis the number of grams of metal i in the treasury. Lead\n  is metal 1.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest amount of lead, in grams, that you can end up with.",
        "sample_input": "3\n3\n2 3\n1 3\n1 2\n5 2 3\n5\n3 4\n3 4\n4 5\n3 5\n1 3\n0 8 6 2 4\n4\n3 4\n2 3\n2 3\n2 3\n0 1 1 0",
        "sample_output": "Case #1: 7\nCase #2: 4\nCase #3: 0",
        "source": "2018\\round_1b\\transmutation"
    },
    {
        "problem_name": "Ant Stack",
        "problem_statement": "Scott has an ant farm containingNants. Each ant has a certain\n  length and weight.\nToday, as a challenge for the ants, Scott has placed some food at the top of\n  the ant farm. The ants will try to reach it by arranging themselves into a\n  vertical stack, with each ant in the stack directly holding the next on its\n  back. In this way, each ant bears the weight of all ants above it. Scott's\n  ants are very strong for their size and are able to carry up to 6 times\n  their own weight. For example, an ant that weights 8 milligrams can carry\n  two other ants weighing 24 milligrams each! Each ant also has a body\n  length; the exact lengths are not important, except that they are all\n  different.\nWhat is the maximum number of these ants that can form such a stack?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerN: the number of ants in the colony.\n  Then, a second line follows containingNintegersW1,W2, ...,WN, whereWiis the weight in milligrams of the i-th ant. The ants are listed in strictly\n  increasing order of length. Notice that no actual length values are given;\n  only the order is important.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the maximum number of the given ants that can form a stack\n  that obeys the rules above.\n7 ≤T≤ 100.Time limit: 15 seconds per test set.Memory limit: 1GB.\nFor exactly 6 cases,N= 100; for the otherT- 6 cases,\n    2 ≤N≤ 50.1 ≤Wi≤ 1000, for all i.\nFor exactly 6 cases,N= 105; for the otherT- 6\n    cases, 2 ≤N≤ 500.1 ≤Wi≤ 109, for all i.\nIn Sample Case #1, there are two ants. The first weighs 9 mg; the second\n  weighs 1 mg, and is longer than the first ant.\n  The first ant is strong enough to hold the second ant (since it can hold up to\n  9 × 6 mg), but it cannot, because the second ant is longer.\n  The second ant is not strong enough to hold the first ant (since it can only\n  hold up to 1 × 6 mg, which is less than 9 mg).\n  So it is only possible to make a \"stack\" of one of the two ants.\nIn Sample Case #2, it is possible for all three ants to form a stack, with\n  the third holding up the second, which holds up the first.\nIn Sample Case #3, the optimal solution has the ninth ant on the bottom, and\n  then seven of the other ants above it.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerN: the number of ants in the colony.\n  Then, a second line follows containingNintegersW1,W2, ...,WN, whereWiis the weight in milligrams of the i-th ant. The ants are listed in strictly\n  increasing order of length. Notice that no actual length values are given;\n  only the order is important.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the maximum number of the given ants that can form a stack\n  that obeys the rules above.",
        "sample_input": "3\n2\n9 1\n3\n8 4 100\n9\n10 10 10 10 10 10 10 10 100",
        "sample_output": "Case #1: 1\nCase #2: 3\nCase #3: 8",
        "source": "2018\\round_1c\\ant_stack"
    },
    {
        "problem_name": "A Whole New Word",
        "problem_statement": "Vincent and Desta are childhood friends. Today, Vincent is showingNdistinctL-letter words to Desta by using some letter tiles. Each tile\n  contains one uppercase English alphabet letter, and one number between 1 andL. A word consists of the letters spelled out byLtiles with\n  numbers from 1 throughL, in order. (Vincent's words are not\n  necessarily real English words.)\nFor example, if Vincent hasN= 3 words withL= 4, and the\n  words are {CAKE,TORN,SHOW}, then\n  Vincent must show the following to Desta:\nDesta feels that creating words must be easy, and he wants to create a new\n  word that obeys the rules above and is not one of Vincent's existing words.\n  However, Desta does not have any tiles of his own, so he must use some of\n  Vincent's tiles.\nFor instance, if Vincent has the words from the previous example, then Desta\n  can make a new word such asCORNorSAKEorCHRE(Desta's words are also not necessarily real English words).\n  Each of the example is illustrated in the following image:\nNote that the three rows in the image above are independent. Desta only needs\n  to make one new word.\nHowever, in the above example, Desta cannot makeWAKE, for\n  example, because there is no W tile with a number 1. Nor can he makeCOO, since it is not the right length.\nNotice that it may be impossible for Desta to make a new word. For example, if\n  Vincent has only one word, then Desta cannot make anything new. Or, if Vincent\n  has the words {AA,AB,BA,BB}, then any word that Desta can form is already present.\nHelp Desta to choose a word that he can show to Vincent using only the tiles\n  used by Vincent, or indicate that it is impossible to do so.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandL: the number of Vincent's words, and the length of each\n  word. Then,Nmore lines follow. The i-th of these lines contains\n  a string ofLuppercase English letters representing the i-th of\n  Vincent's words.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a valid word to be chosen by Desta, or-(a single dash\n  character of ASCII value 45) if there is no valid word to be chosen by Desta.\n  If there is more than one valid word that Desta can make, you can output any\n  of them.\n1 ≤T≤ 100.Time limit: 15 seconds per test set.Memory limit: 1GB.No two of Vincent's words are the same.\n1 ≤N≤ 262.1 ≤L≤ 2.\n1 ≤N≤ 2000.1 ≤L≤ 10.\nNote that the last two sample cases would not appear in test set 1.\nIn Sample Case #1, the only words that can be construted using the tiles used\n  by Vincent areA,B,C,D.\n  However, all of those words already appear in Vincent's list of words, so\n  Desta is not allowed to choose them.\nIn Sample Case #2, there are 12 possible new words that Desta can make, one of\n  which isWA.\nSample Case #3 was explained in the problem description above; there is no new\n  word that Desta can make.\nSample Case #4 was explained in the problem description above; other answers\n  such asSAKEare possible.\nIn Sample Case #5, other answers such asTRAPJAMare possible.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersNandL: the number of Vincent's words, and the length of each\n  word. Then,Nmore lines follow. The i-th of these lines contains\n  a string ofLuppercase English letters representing the i-th of\n  Vincent's words.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a valid word to be chosen by Desta, or-(a single dash\n  character of ASCII value 45) if there is no valid word to be chosen by Desta.\n  If there is more than one valid word that Desta can make, you can output any\n  of them.",
        "sample_input": "5\n4 1\nA\nB\nC\nD\n4 2\nWW\nAA\nSS\nDD\n4 2\nAA\nAB\nBA\nBB\n3 4\nCAKE\nTORN\nSHOW\n5 7\nHELPIAM\nTRAPPED\nINSIDEA\nCODEJAM\nFACTORY",
        "sample_output": "Case #1: -\nCase #2: WA\nCase #3: -\nCase #4: CORN\nCase #5: HOLIDAY",
        "source": "2018\\round_1c\\a_whole_new_word"
    },
    {
        "problem_name": "Lollipop Shop",
        "problem_statement": "You own a lollipop shop. At the start of the day, you makeNlollipops, each of a single unique flavor, like huckleberry, cherry or lime.Ncustomers come into the shop during the day, one at a time. Each\n  customer gives you a list of which of your lollipop flavors they like. You\n  can sell them one lollipop of any of those flavors, as long as you have not\n  already sold someone else the same flavor earlier in the day (since there is\n  only one lollipop of each flavor). If none of the flavors they like are still\n  available, you cannot sell them a lollipop, and they leave your shop\n  disappointed.\nYou do not know what each customer's flavor preferences are going to be until\n  they arrive. Each customer decides if they like or dislike each flavor\n  randomly, independently of whether they like any other flavor, or what\n  flavors anyone else likes. However, your market studies have shown that some\n  flavors may have a higher probability of being liked in general! For example,\n  the lime flavor might have a 10% chance of being liked by any particular\n  customer, whereas that chance might be 1% for the cherry flavor. These values\n  are always chosen independently and uniformly at random from the interval\n  [0.005, 0.1].\nObviously, you want to sell lollipops to as many of theNcustomers\n  as possible! But, since you do not know what flavors your customers will ask\n  for ahead of time, you cannot always make an optimal decision —\n  sometimes you might sell a customer one flavor, and then later wish you had\n  sold them another.\nSuppose that you somehow knew all the customers' preferences in advance and\n  could plan ahead; then there is some maximum number M of lollipops that you\n  could possibly sell. You do not know the customers' preferences in advance,\n  but we require you to sell a number of lollipops that is at least 90% of M\n  foreachinput case.\nThis problem isinteractive, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See theFAQfor an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nFor each test case, your program should read a single line with one integerN, the number of lollipops (which is the same as the number of\n  customers).\nThen, for each of the customers, your program should read a single line,\n  which will contain space-separated integers. The first integer isD,\n  the number of flavors that customer likes. Then,Dintegers follow,\n  the ID numbers of those flavors, in strictly increasing order. Flavors have\n  unique ID numbers in the range [0,N- 1]. Note thatDmight be\n  zero for some or all customers.\nAfter each of these lines, your program must write a single line to standard\n  output, containing the ID number of one of theDflavors to sell to the\n  customer, or-1if no lollipop is to be sold to the customer.\n  After you have written theNth line for the test case,\n  your program should terminate if it was the last test case; otherwise, it\n  should start reading data for the next test case.\nIf your program gets something wrong (e.g., tries to sell a customer a flavor\n  that was already sold, or tries to sell a customer a flavor they don't like,\n  or uses the wrong output format, or outputs an out-of-bounds value), the\n  judge will send-1to your input\n  stream and it will not send any other output after that. If your program\n  continues to wait for the judge after receiving-1,\n  your program will time out, resulting in a Time Limit Exceeded error. Notice\n  that it is your responsibility to have your program exit in time to receive\n  the appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\n  Not selling enough lollipops for a test case will not cause you to get the-1message.\nYou should not send additional information to the judge after processing all\n  test cases. In other words, if your program keeps printing to standard output\n  after the last test case, you will get a Wrong Answer judgment.\nAt the start of each test case, the judge will determine all customers'\n  preferences. That is, it will use a (hidden) list of probabilities\n  Pibetween 0.005 and 0.1, one for each flavor; each customer has\n  a probability Piof liking the i-th flavor. That is, the random\n  variables indicating whether customer j likes flavor i are independent and\n  identically distributed. These preferences are constant throughout the test\n  and will not be modified e.g. in response to your choices.\nT= 50.N= 200.0 ≤D≤N.Time limit (for the entire test set): 25 seconds.Memory limit: 1GB.\nNote that this sample interaction has smaller values ofTandNthan the real data.  The local testing tool also uses smaller cases.\nThe pseudocode above demonstrates the following scenario.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2018\\round_1c\\lollipop_shop"
    },
    {
        "problem_name": "Costume Change",
        "problem_statement": "Supervin is a well-known choreographer. Today is theN-th anniversary\n  of his choreography career. To celebrate it, he is planning a dance on a stage\n  that is a square grid of sizeNbyN. Exactly one dancer will\n  stand in each grid cell.\nEach dancer will wear a costume; each costume has a single color, and is made\n  out of either wool or cotton as its material. Supervin hasNcolors to\n  choose from when designing the costumes for his dancers, indexed from 1 toN.\nEach dancer wants to feel special. If two or more dancers share a row or\n  column and also have costumes of the same color and material, they will no\n  longer feel special.\nSupervin wants all of his dancers to feel special. Therefore, Supervin is\n  prepared to change the color and/or material of dancers' costumes so that no\n  dancer shares a row or column with another dancer with the same costume (same\n  color and same material). What is the minimum number of dancers whose costumes\n  must be changed in order to make this happen? (Note that a change to both the\n  color and material of a costume still counts as only one change.)\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing an integerN: the side length (in unit cells) of the square grid of dancers.\n  Then,Nlines follow; each containsNnon-zero integersAi, j. The j-th value on the i-th line represents the\n  costume of the dancer in the i-th row and j-th column of the grid. The\n  magnitude of the value gives the color and the sign of the value gives the\n  material (- for wool, + for cotton).\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of dancers whose costumes must be changed, as described\n  above.\n1 ≤T≤ 100.-N≤Ai, j≤N, for all i, j.Ai, j≠ 0, for all i, j.Time limit: 15 seconds per test set.Memory limit: 1GB.\n2 ≤N≤ 4.\n2 ≤N≤ 100.\nIn Sample Case #1, no costumes need to be changed, since no dancer shares a\n  row or column with another dancer with the same costume.\nIn Sample Case #2, one optimal solution is to change the value ofAinto the following (bold indicates changed values):\nOther optimal solutions are possible. Note that changing both the color and\n  the material of a dancer's costume only counts as one change.\nIn Sample Case #3, one optimal solution is to change the value ofAinto the following (bold indicates changed values):\nOther optimal solutions are possible.\nIn Sample Case #4, one optimal solution is to change the value ofAinto the following (bold indicates changed values):\nOther optimal solutions are possible.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing an integerN: the side length (in unit cells) of the square grid of dancers.\n  Then,Nlines follow; each containsNnon-zero integersAi, j. The j-th value on the i-th line represents the\n  costume of the dancer in the i-th row and j-th column of the grid. The\n  magnitude of the value gives the color and the sign of the value gives the\n  material (- for wool, + for cotton).",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of dancers whose costumes must be changed, as described\n  above.",
        "sample_input": "4\n2\n1 2\n2 1\n2\n1 1\n2 1\n2\n1 2\n1 2\n2\n2 2\n-2 2",
        "sample_output": "Case #1: 0\nCase #2: 1\nCase #3: 2\nCase #4: 1",
        "source": "2018\\round_2\\costume_change"
    },
    {
        "problem_name": "Falling Balls",
        "problem_statement": "A certain toy consists of a grid of 2 or more columns and 1 or more rows,\n  where each cell of the grid contains either a\\ramp or a/ramp, or is empty. The leftmost and rightmost columns are\n  empty and the bottom row is also empty. Balls are dropped into the top row\n  and fall vertically, sliding on ramps. To prevent balls from getting stuck,\n  a cell with a\\ramp is never immediately to the left of a cell\n  with a/ramp.\nWhen a ball is dropped into the top row, it moves deterministically as\n  follows:\nTo see the mechanism to its full extent, the user drops exactly one ball into\n  each column. Balls do not interfere with each other, and it is possible for a\n  cell to contain multiple balls.\nYour friend has a toy withCcolumns and an unknown number of rows.\n  They just dropped one ball into the top row of each column, and waited for\n  all balls to stop moving. Then, they counted how many balls ended up in each\n  of the cells of the bottom row, and gave you those results... but you think\n  it is possible that they made a mistake. Can you create a layout that is\n  consistent with the results and uses as few rows as possible, or determine\n  that no such layout exists?\nFor example, if your friend reported the values3 0 0 2 0 1,\n  one possible solution would be the following. (Note that it is not necessary\n  to use a minimal number of ramps, or for every ramp to affect the balls.)\n.//\\.../\\./.......\nHere are the paths that the balls would take when falling through that grid:\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing an integerC: the number of columns in your friend's falling ball toy. Then,\n  there is one more line containingCintegersBi. The\n  i-th of these integers represents the number of balls that ended up in the\n  i-th cell from the left of the bottom row of your friend's falling ball toy,\n  according to the data they gave you.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLE, or the number of rows in\n  your layout, as described above. Ifyis notIMPOSSIBLE, outputymore rows, representing the\n  rows of your proposed falling ball toy layout, in order from top to bottom.\n  Use.to represent a cell with no ramp, and\\or/to represent the ramps. The layout must obey all of the rules\n  in the problem statement.\n1 ≤T≤ 100.0 ≤Bi≤C, for all i.The sum (over all i from 1 toC, inclusive) of allBivalues =C.Time limit: 10 seconds per test set.Memory limit: 1GB.\n2 ≤C≤ 5.\n2 ≤C≤ 100.\nNote that the last sample case would not appear in Test set 1.\nThe following layout is the only valid solution for Sample Case #1. (There\n  must be at least one row, and including any more rows would make the solution\n  use more rows than needed. It is not legal to include any ramps in the\n  bottom row.)\n....\nIn Sample Case #2, there is no way to prevent the leftmost ball from falling\n  to the bottom of its column without adding a ramp, but ramps cannot be added\n  to that column.\nSample Case #3 is the one described at the end of the problem statement. Note\n  that the followinginvalidlayout for Sample Case #3 breaks several\n  rules: it has more rows than needed, it has ramps in the three illegal zones\n  (left column, right column, bottom row), and it contains a\\ramp immediately to the left of a/ramp.\n\\\\..\\/../.\\/./../...../.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing an integerC: the number of columns in your friend's falling ball toy. Then,\n  there is one more line containingCintegersBi. The\n  i-th of these integers represents the number of balls that ended up in the\n  i-th cell from the left of the bottom row of your friend's falling ball toy,\n  according to the data they gave you.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis eitherIMPOSSIBLE, or the number of rows in\n  your layout, as described above. Ifyis notIMPOSSIBLE, outputymore rows, representing the\n  rows of your proposed falling ball toy layout, in order from top to bottom.\n  Use.to represent a cell with no ramp, and\\or/to represent the ramps. The layout must obey all of the rules\n  in the problem statement.",
        "sample_input": "3\n4\n1 1 1 1\n3\n0 2 1\n6\n3 0 0 2 0 1",
        "sample_output": "Case #1: 1\n....\nCase #2: IMPOSSIBLE\nCase #3: 3\n.//\\..\n./\\./.\n......",
        "source": "2018\\round_2\\falling_balls"
    },
    {
        "problem_name": "Graceful Chainsaw Jugglers",
        "problem_statement": "You are the manager of the Graceful Chainsaw Jugglers performance group, and\n  you are trying to succeed in the very competitive chainsaw juggling business.\n  You have an unlimited number of identical talented jugglers, and each of them\n  knows how to juggle any number of chainsaws. To run a show, you will choose\n  some number of jugglers, and then distribute your red chainsaws and blue\n  chainsaws among them, so that each juggler gets at least one chainsaw. For\n  example, one juggler might juggle two red chainsaws and three blue chainsaws,\n  and another juggler might juggle just one red chainsaw. During the show, each\n  chainsaw is used by only one juggler; the jugglers do not pass chainsaws\n  around, because it is already hard enough just to juggle them!\nAccording to your market research, your audience is happiest when the show\n  uses as many jugglers and chainsaws as possible, but the audience also\n  demands variety: no two jugglers in the show can use both the same number\n  of red chainsawsandthe same number of blue chainsaws.\nYou haveRred chainsaws andBblue chainsaws, and you must\n  use all of them in the show. What is the largest number of jugglers that you\n  can use in the show while satisfying the audience's demands?InputThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with two\n  integersRandB: the numbers of red and blue chainsaws that\n  you must use in the show.OutputFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest number of jugglers that you can use in the show while\n  satisfying the audience's demands, as described above.Limits1 ≤T≤ 100.R+B> 0.Time limit: 25 seconds per test set.Memory limit: 1GB.Test set 1 (Visible)0 ≤R≤ 50.0 ≤B≤ 50.Test set 2 (Hidden)0 ≤R≤ 500.0 ≤B≤ 500.SampleSample Inputsave_altcontent_copyCopied!2\n2 0\n4 5Sample Outputsave_altcontent_copyCopied!Case #1: 1\nCase #2: 5In Sample Case #1, the only possible strategy is to give both red chainsaws\n  to one juggler.In Sample Case #2, one optimal strategy is to have:one juggler with one red chainsawone juggler with two red chainsawsone juggler with one blue chainsawone juggler with three blue chainsawsone juggler with one red chainsaw and one blue chainsaw\nInputThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with two\n  integersRandB: the numbers of red and blue chainsaws that\n  you must use in the show.OutputFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest number of jugglers that you can use in the show while\n  satisfying the audience's demands, as described above.Limits1 ≤T≤ 100.R+B> 0.Time limit: 25 seconds per test set.Memory limit: 1GB.Test set 1 (Visible)0 ≤R≤ 50.0 ≤B≤ 50.Test set 2 (Hidden)0 ≤R≤ 500.0 ≤B≤ 500.SampleSample Inputsave_altcontent_copyCopied!2\n2 0\n4 5Sample Outputsave_altcontent_copyCopied!Case #1: 1\nCase #2: 5In Sample Case #1, the only possible strategy is to give both red chainsaws\n  to one juggler.In Sample Case #2, one optimal strategy is to have:one juggler with one red chainsawone juggler with two red chainsawsone juggler with one blue chainsawone juggler with three blue chainsawsone juggler with one red chainsaw and one blue chainsaw\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with two\n  integersRandB: the numbers of red and blue chainsaws that\n  you must use in the show.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest number of jugglers that you can use in the show while\n  satisfying the audience's demands, as described above.\n1 ≤T≤ 100.R+B> 0.Time limit: 25 seconds per test set.Memory limit: 1GB.\n0 ≤R≤ 50.0 ≤B≤ 50.\n0 ≤R≤ 500.0 ≤B≤ 500.\nIn Sample Case #1, the only possible strategy is to give both red chainsaws\n  to one juggler.\nIn Sample Case #2, one optimal strategy is to have:\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test case consists of one line with two\n  integersRandB: the numbers of red and blue chainsaws that\n  you must use in the show.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest number of jugglers that you can use in the show while\n  satisfying the audience's demands, as described above.",
        "sample_input": "2\n2 0\n4 5",
        "sample_output": "Case #1: 1\nCase #2: 5",
        "source": "2018\\round_2\\graceful_chainsaw_jugglers"
    },
    {
        "problem_name": "Gridception",
        "problem_statement": "The master thief Jom Codd is able to infiltrate the dreams of others. Since\n  dream-viewing technology is not very good yet, Codd sees a dream as adream gridof unit cells, each of which is white or black.\nGiven a starting dream grid, Codd cango deeperby replacing each\n  white cell with a 2x2 grid of white cells, and each black cell with a 2x2\n  grid of black cells; this creates a new dream grid that is four times\n  larger. He can go deeper again from that grid, and so on. For example, given\n  this starting dream grid:\nBBBBWBBBB\nthen going deeper once produces this new dream grid:\nBBBBBBBBBBBBBBWWBBBBWWBBBBBBBBBBBBBB\nand going deeper again produces this new dream grid:\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBWWWWBBBBBBBBWWWWBBBBBBBBWWWWBBBBBBBBWWWWBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\nand so on.\nCodd has just infiltrated a dream and viewed its starting dream grid. He is\n  on a very difficult mission, and he knows that he will need to go deeper many\n  times. To help him navigate, he is looking at variouspatternsin the\n  starting dream grid. A pattern consists of a single group of cells connected\n  by shared edges (shared corners do not count as connections), plus their\n  colors. A pattern might contain internal gaps (as long as the pattern's cells\n  are a single connected group); such gaps are not considered part of the\n  pattern. Two patterns are the same if and only if they have the same number\n  and arrangement of cells (not reflected or rotated), with the same colors.For example, in the grids above, the following 8-cell pattern is present in\n  the starting grid:BBBB BBBBIt is not present after going deeper once, but it is present after going\n  deeper twice, and three times, and so on for every deeper dream grid.Codd wants to find the largest pattern from the starting dream grid that will\n  be present in at least a googol (10100) of deeper dream grids.\n  For the given example, the pattern above is the largest such pattern. Even\n  though it is not present after going deeper once, it is present in at least\n  a googol of deeper levels. Other such patterns of smaller sizes also meet\n  this condition, but there is no 9-cell pattern that does; the only such\n  pattern would have to be identical to the entire starting dream grid, and\n  that pattern will never show up in any deeper dream grid, let alone in a\n  googol of them.InputThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersRandC: the numbers of rows and columns, respectively, in the\n  dream grid. Each case continues withRmore lines ofCcharacters each; every such character is eitherBorW. These lines directly represent the dream grid.OutputFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest possible size of at least one pattern that meets Codd's\n  requirements, as described above.Limits1 ≤T≤ 100.Time limit: 30 seconds per test set.Memory limit: 1GB.Test set 1 (Visible)1 ≤R≤ 3.1 ≤C≤ 4.Test set 2 (Hidden)1 ≤R≤ 20.1 ≤C≤ 20.SampleSample Inputsave_altcontent_copyCopied!5\n3 3\nBBB\nBWB\nBBB\n2 3\nBBB\nWBW\n1 1\nW\n3 3\nWBW\nBWB\nWBW\n2 4\nBBWW\nBBWWSample Outputsave_altcontent_copyCopied!Case #1: 8\nCase #2: 5\nCase #3: 1\nCase #4: 4\nCase #5: 8Sample Case #1 is the one described in the problem statement.In Sample Case #2, one possible largest pattern is:BBBWBAnother equally large one is:BBBW WIn Sample Case #3, the entire starting dream grid is a largest pattern.In Sample Case #4, note that the fiveWs would not form a valid\n  pattern, because they are not connected. However, this is a largest pattern:WBBWIn Sample Case #5, the entire starting dream grid is a largest pattern.\n  Note that even though this grid happens to be what Codd would get by going\n  deeper starting fromBW, that is irrelevant; Codd will never \"go\n  shallower\".\nFor example, in the grids above, the following 8-cell pattern is present in\n  the starting grid:\nBBBB BBBB\nIt is not present after going deeper once, but it is present after going\n  deeper twice, and three times, and so on for every deeper dream grid.\nCodd wants to find the largest pattern from the starting dream grid that will\n  be present in at least a googol (10100) of deeper dream grids.\n  For the given example, the pattern above is the largest such pattern. Even\n  though it is not present after going deeper once, it is present in at least\n  a googol of deeper levels. Other such patterns of smaller sizes also meet\n  this condition, but there is no 9-cell pattern that does; the only such\n  pattern would have to be identical to the entire starting dream grid, and\n  that pattern will never show up in any deeper dream grid, let alone in a\n  googol of them.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersRandC: the numbers of rows and columns, respectively, in the\n  dream grid. Each case continues withRmore lines ofCcharacters each; every such character is eitherBorW. These lines directly represent the dream grid.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest possible size of at least one pattern that meets Codd's\n  requirements, as described above.\n1 ≤T≤ 100.Time limit: 30 seconds per test set.Memory limit: 1GB.\n1 ≤R≤ 3.1 ≤C≤ 4.\n1 ≤R≤ 20.1 ≤C≤ 20.\nSample Case #1 is the one described in the problem statement.\nIn Sample Case #2, one possible largest pattern is:\nBBBWB\nAnother equally large one is:\nBBBW W\nIn Sample Case #3, the entire starting dream grid is a largest pattern.\nIn Sample Case #4, note that the fiveWs would not form a valid\n  pattern, because they are not connected. However, this is a largest pattern:\nWBBW\nIn Sample Case #5, the entire starting dream grid is a largest pattern.\n  Note that even though this grid happens to be what Codd would get by going\n  deeper starting fromBW, that is irrelevant; Codd will never \"go\n  shallower\".\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with two integersRandC: the numbers of rows and columns, respectively, in the\n  dream grid. Each case continues withRmore lines ofCcharacters each; every such character is eitherBorW. These lines directly represent the dream grid.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the largest possible size of at least one pattern that meets Codd's\n  requirements, as described above.",
        "sample_input": "5\n3 3\nBBB\nBWB\nBBB\n2 3\nBBB\nWBW\n1 1\nW\n3 3\nWBW\nBWB\nWBW\n2 4\nBBWW\nBBWW",
        "sample_output": "Case #1: 8\nCase #2: 5\nCase #3: 1\nCase #4: 4\nCase #5: 8",
        "source": "2018\\round_2\\gridception"
    },
    {
        "problem_name": "Fence Construction",
        "problem_statement": "You are an employee of the Fence Construction Company and have been\n  tasked with the construction ofFfences. Each fence runs in a\n  straight line from one point to another. Formally, each fence is a segment\n  connecting two different points in two-dimensional space. Fences do not\n  intersect each other, except possibly at their endpoints.\n  The fences are all connected, that is, for any pair of fences f and g there\n  exists a path f = f1, f2, ..., fk= g such that\n  fishares an endpoint with fi+1.\nAt the time you begin your work, no fences have been built. Construction is\n  done using a special fence-shooting 3D printer. There is only one such\n  device, so fences are built one at a time. The printer is small enough that\n  you can consider it a single point on the plane.\nTo build a fence f, you must first position the printer at a point p in the\n  plane such that the printer can see all of f without being obstructed by\n  previously constructed fences. Formally, p has to be such that:\nTo position the printer, you can move it from its current position in a\n  contiguous and not necessarily straight line through the plane, as long as\n  the line does not intersect any previously built fences (not even at an\n  endpoint). You can choose any position for the printer to be at before the\n  first fence is built and after the last fence is built.\nHaving to follow this procedure means that you cannot necessarily build the\n  fences in any order. For example, you might choose an order that blocks off\n  the printer and prevents you from moving it to where it needs to be.\nThe director of the organization has drafted a relative ordering involvingKof the fences (but none of these have been built yet) without giving\n  much thought to it.\n  To avoid angering them, you need to use this ordering, inserting\n  the remainingF-Kfences anywhere you like to complete the\n  ordering.\nGiven these restrictions, find an order in which to build the fences. It is\n  guaranteed that at least one valid order exists.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing two integersFandK: the total number of fences and the number of fences in\n  the director's incomplete ordering. Then,Fmore lines follow; the i-th\n  of these lines (counting starting from 1) contains four integersAi,Bi,CiandDi, indicating that the i-th fence is a line segment from\n  (Ai,Bi) to (Ci,Di). The firstKfences given in the input are theKfences in the director's ordering.\nFor each test case, output one line beginningCase #x: y, wherexis the test case number (starting from 1), and y is a\n  space-separated ordering of the integers between 1 andF, inclusive,\n  giving a valid order in which to build the fences.\n1 ≤T≤ 100.4 ≤F≤ 300.-105≤Ai≤ 105, for all i.-105≤Bi≤ 105, for all i.-105≤Ci≤ 105, for all i.-105≤Di≤ 105, for all i.(Ai,Bi) ≠ (Ci,Di), for all i.If p is a non-endpoint point on a fence, then p is not a point of any other\n    fence.The given fences are connected, as defined in the statement.There is at least one ordering of the fences that satisfies all the\n    construction restrictions in the statement.Time limit: 10 seconds per test set.Memory limit: 1GB.\n1 ≤K≤ 2.\n1 ≤K<F.\nNote that the last sample case would not appear in test set 1.\nIn Sample Case #1, it is possible to build the fences in the order they are\n  given: 1, 2, 3, 4, 5, 6. Note that fence 1 must come earlier in the order\n  than fence 2, per the director's list.\nIn Sample Case #2, it is not possible to build the fences in the given order!\n  One possible order is: 5, 6, 1, 2, 3, 4. Note that when the director's list\n  includes only one fence, the relative order condition is always trivially\n  satisfied.\nIn Sample Case #3, it is possible to build the fences in the order: 11, 10,\n  7, 8, 9, 1, 2, 3, 6, 5, 4. Note that fences 1, 2, 3 and 4 must be built in\n  that relative order.\nThe following pictures illustrate one valid way of building the fences for\n  Sample Case #1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing two integersFandK: the total number of fences and the number of fences in\n  the director's incomplete ordering. Then,Fmore lines follow; the i-th\n  of these lines (counting starting from 1) contains four integersAi,Bi,CiandDi, indicating that the i-th fence is a line segment from\n  (Ai,Bi) to (Ci,Di). The firstKfences given in the input are theKfences in the director's ordering.",
        "output_description": "For each test case, output one line beginningCase #x: y, wherexis the test case number (starting from 1), and y is a\n  space-separated ordering of the integers between 1 andF, inclusive,\n  giving a valid order in which to build the fences.",
        "sample_input": "3\n6 2\n0 0 7 7\n15 -2 10 0\n0 0 0 10\n0 0 10 0\n0 10 10 10\n10 0 10 10\n6 1\n0 0 0 10\n0 0 10 0\n0 10 10 10\n10 0 10 10\n0 0 7 7\n15 -2 10 0\n11 4\n-10 0 10 0\n-10 0 0 10\n10 0 0 10\n0 2 0 5\n0 2 10 0\n10 0 0 5\n15 3 18 3\n15 3 15 9\n18 3 15 9\n15 3 16 5\n0 10 15 3",
        "sample_output": "Case #1: 1 2 3 4 5 6\nCase #2: 5 6 1 2 3 4\nCase #3: 11 10 7 8 9 1 2 3 6 5 4",
        "source": "2018\\round_3\\fence_construction"
    },
    {
        "problem_name": "Field Trip",
        "problem_statement": "Npeople from an elementary school — one teacher andN-1\n  kids — are on a field trip. They are exploring a grassy field that is\n  an infinite two-dimensional grid of unit cells. Each person is currently\n  occupying one of the cells; there may be multiple people in the same cell.\nWhen it is time to go home, the teacher and kids must all gather in one cell;\n  it does not matter which one, since their bus can pick them up anywhere. The\n  kids have been taught an algorithm that makes it easier to gather:\nIf the teacher makes choices that minimize the number of turns, what is that\n  number of turns?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerN: the number of people on the field trip. Then, there areNmore lines. The i-th of these represents the i-th person, and has two\n  integersRiandCi: the row and column\n  numbers (on the grid) of the cell that the i-th person initially occupies.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the smallest possible number of turns required, as described above.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.\n2 ≤N≤ 10.0 ≤Ri≤ 8, for all i.0 ≤Ci≤ 8, for all i.\n2 ≤N≤ 104.0 ≤Ri≤ 109, for all i.0 ≤Ci≤ 109, for all i.\nIn Sample Case #1, the teacher is at (3, 2) — that is, row 3 and column\n  2. Kid 2 is at (0, 2), and Kid 3 is at (0, 0). One optimal strategy for the\n  teacher is as follows:\nIn Sample Case #2, the teacher and the two kids start off in the same cell,\n  so no turns are required.\nIn Sample Case #3, the teacher can remain in place, and all of the kids will\n  move to the teacher's cell by the end of the first turn.\nIn Sample Case #4, the teacher should move diagonally four times to reach\n  (4, 4).\nIn Sample Case #5, the teacher should begin by moving to (1, 1); then kids 2,\n  3, and 4 will all move to (1, 2). Note that even though all the kids are now\n  in the same cell, the teacher is not, and must start another turn. On the\n  second turn, the teacher can move to (1, 2) to join the kids, and the kids\n  will not move.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerN: the number of people on the field trip. Then, there areNmore lines. The i-th of these represents the i-th person, and has two\n  integersRiandCi: the row and column\n  numbers (on the grid) of the cell that the i-th person initially occupies.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the smallest possible number of turns required, as described above.",
        "sample_input": "5\n3\n3 2\n0 2\n0 0\n3\n2 2\n2 2\n2 2\n9\n1 1\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n2\n8 0\n0 8\n4\n1 0\n1 3\n2 2\n0 2",
        "sample_output": "Case #1: 2\nCase #2: 0\nCase #3: 1\nCase #4: 4\nCase #5: 2",
        "source": "2018\\round_3\\field_trip"
    },
    {
        "problem_name": "Name-Preserving Network",
        "problem_statement": "A research consortium is building a new datacenter. In the datacenter,\n  a set of computers is set up to work together and communicate via a network.\n  The network works only with direct bidirectional links between computers.\n  A pair of computers c1and c2that are not connected\n  by a direct link can still communicate with each other, as long as there is\n  at least one path of links l1, l2, ..., lksuch that links liand li+1share an endpoint,\n  c1is an endpoint of l1, and c2is an\n  endpoint of lk. Any two computers can have at most one direct link between\n  them.\nThe consortium has asked you to submit a design that illustrates how many\n  computers will be in the network and how they will be connected to each other.\n  Each network design you submit must comply with a specific set of\n  restrictions:\nTo elaborate on the last point: each of the N computers in a network design\n  is initially assigned a unique integer between 1 and N that identifies it.\n  However, it is possible that after some downtime, the system will boot up\n  and the indentifiers will be permuted — that is, each computer will\n  still have a unique integer between 1 and N, but not necessarily the original\n  one. The network must be able to recover the original identifying integers\n  without having access to any information other than the existing direct links.\nTo evaluate your network designs, the research consortium has set up an\n  automated program. The program will receive one of your network designs,\n  validate conditions 1-3 above, and then send back a copy of the network\n  design with the following changes:\nYou need to be able to determine exactly how the IDs were changed. Formally,\n  the automated program will create a secret random permutation f of the\n  integers 1 through N, and it will assign those numbers to computers in a\n  \"blank copy\" of the network with all of the previous links removed. Then, for\n  each link between computers i and j in your network design, it will add a\n  link between f(i) and f(j) to the copy. You then must recreateexactlythe f that the automated program created. If there exists a different f' that\n  yields the same result and you return f', the consortium will not accept your\n  network design, as in such a case, you cannot ensure that the recovered IDs\n  are the original ones.\nFor every N between 10 and 100, inclusive, there exists at least one network\n  of N computers that complies with all restrictions above and has the property\n  that applying two different permutations f and f' to it produces two\n  different sets of links.\nThis problem isinteractive,\n  which means that the concepts of input and output are different than in\n  standard Code Jam problems. You will interact with a separate process that\n  both provides you with information and evaluates your responses. All\n  information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output. Remember that many\n  programming languages buffer the output by default, so make sure your output\n  actually goes out (for instance, by flushing the buffer) before blocking to\n  wait for a response. See theFAQfor an explanation of what it means to flush the buffer. Anything your\n  program sends through standard error is ignored, but it might consume some\n  memory and be counted against your memory limit, so do not overflow it. To\n  help you debug, a local testing tool script (in Python) is provided at the\n  very end of the problem statement. In addition, sample solutions to a\n  previous Code Jam interactive problem (in all of our supported languages) are\n  provided in the analysis forNumber Guessing.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nFor each test case, your program will first read a single line containing two\n  integersLandUindicating the inclusive range of values for\n  the number of computers in your network design.\nThen, you need to create a network design with N computers and print 2N+1\n  lines representing that design. The first line must contain a single integer\n  N. The remaining 2N lines must contain two integers A and B each, each\n  representing a different link between computers A and B, where A != B. Notice\n  that if you list link A B, you may not list A B nor B A again.\nUpon reading your network design, the judge will first check the first three\n  conditions listed in the statement above. If any of those is not met, the\n  judge will send you a single line containing a single-1, and\n  then finish all communication and wait for your program to finish. If your\n  program does finish correctly and without violating other limits, it\n  will receive a Wrong Answer verdict.\nIf all of the conditions are met, the judge will send you 2N+1 lines. The\n  first line will contain a single integer N (the same N you sent). Then, the\n  next 2N lines will contain two integers each, describing the links of the\n  copy of the network design, in the same format as you used. The copy is\n  generated as described above, with the permutation f chosen uniformly at\n  random from all possible permutations, independently of your network design.\nTo finish a test case, you need to send the judge a single line with N\n  integers X1, X2, ..., XN, representing that\n  the computer to which you assigned number i was assigned number Xiin the judge's copy, for all i.\nIf the list is not the list the judge generated, you will receive a Wrong\n  Answer verdict. If it was in the last test case, the judge will send no\n  additional communication. Otherwise, the judge will send a single line\n  containing a single -1, and then no additional communication. In both cases,\n  the judge will wait for your program to end, and assign the Wrong Answer\n  verdict only if it ended normally and without violating any resource limits.\nYou should not send additional information to the judge after solving all\n  test cases. In other words, if your program keeps printing to standard output\n  after printing the list of Xs for the last test case, you will receive a\n  Wrong Answer judgment.\nNotice that you are allowed to submit the same network design for different\n  test cases, as long as that design complies with all restrictions for both\n  cases. Additionally, the seed from random generation in the judge is fixed,\n  so sending the same set of original network designs in the same order will\n  get back the same set of copies.\n1 ≤T≤ 30.Time limit: 10 seconds per test set.Memory limit: 1GB.\nL= 10.U= 50.\n10 ≤L≤ 50.L=U.\nNote that this sample interaction uses a smaller value ofLthan the\n  real data, for ease of illustration. Also note that there is no network of\n  exactly 6 computers with the property that applying two different\n  permutations f and f' to it produces two different sets of links, so it would\n  be a bad idea to design a network of exactly 6 computers, even if the\n  problem's limits allowed it!\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2018\\round_3\\name-preserving_network"
    },
    {
        "problem_name": "Raise the Roof",
        "problem_statement": "Anthropologists have learned something surprising about a certain ancient\n  Greek society of geometers: they loved partying as much as they loved\n  mathematics! In fact, they kept hosting larger and larger parties over the\n  years, so they needed to raise the roof of their ballroom to keep the noise\n  level tolerable.\nWe know that the roof of their ballroom was always supported by the tips of\n  exactly three columns; these columns were infinitely thin line segments that\n  originated on the floor and rose up perpendicular to the floor. Whenever the\n  society wanted to raise the roof, they would begin by removing the existing\n  roof. Then, they would build a new column in a location where there was not\n  already a column. Finally, they would rest a new roof on the tips of the new\n  column and the two most recently built of the previously existing columns.\n  For mystical reasons, no three column bases were ever collinear, and no four\n  column tips were ever coplanar.\nEach roof was a convex polygon that was part of the plane defined by the three tips that\n  supported it. For each column c built before the supporting ones, the\n  roof did not intersect c at any point and was large enough to cover the\n  space above c. The roof did not touch the floor. The different roofs did not necessarily\n  all have the same shape.\nOn an archeological dig, you found allNcolumns that the society ever\n  built, but no roof. You want to determine a possible order in which the\n  columns could have been built that is consistent with the rules above. A\n  possible order is an ordering of theNcolumns such that, for each\n  prefix of length at least 4 of the ordering, there is a roof (convex polygon)\n  that contains the tips of the last three columns in the prefix, and for each other\n  column in the prefix with a tip at (x, y, h) the roof contains a point (x, y, z)\n  with z > h.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line containing an\n  integerN: the number of columns. Then,Nmore lines follow;\n  the i-th of these lines contains three integersXi,Yi, andHi, representing the X and Y\n  coordinates and height above the ground of the tip of the i-th column.\nFor each test case, output one line containingCase #x: y1 y2 ... yN, wherexis the test case\n  number (starting from 1), and eachyiis a different integer\n  between 1 throughN. These represent a possible ordering of the\n  columns, with yi being the index in the input of the i-th built column.\nIt is guaranteed that at least one valid answer always exists. If there are\n  multiple possible answers, you may output any of them.\n1 ≤T≤ 100.-106≤Xi≤ 106, for all i.-106≤Yi≤ 106, for all i.1 ≤Hi≤ 106, for all i.(Xi,Yi),\n  (Xj,Yj), and\n  (Xk,Yk) are not collinear, for all\n  distinct i, j, k.(Xi,Yi,Hi),\n  (Xj,Yj,Hj),\n  (Xk,Yk,Hk), and\n  (Xl,Yl,Hl) are not\n  coplanar, for all distinct i, j, k, l.Time limit: 12 seconds per test set.Memory limit: 1GB.\n4 ≤N≤ 10.\n4 ≤N≤ 1000.\nThe following pictures illustrate Sample Case #1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line containing an\n  integerN: the number of columns. Then,Nmore lines follow;\n  the i-th of these lines contains three integersXi,Yi, andHi, representing the X and Y\n  coordinates and height above the ground of the tip of the i-th column.",
        "output_description": "For each test case, output one line containingCase #x: y1 y2 ... yN, wherexis the test case\n  number (starting from 1), and eachyiis a different integer\n  between 1 throughN. These represent a possible ordering of the\n  columns, with yi being the index in the input of the i-th built column.",
        "sample_input": "3\n5\n-1 0 3\n1 2 4\n1 -2 4\n3 1 3\n3 -1 2\n4\n1 1 1\n2 2 3\n2 3 4\n10 11 120\n4\n1 1 1\n2 2 3\n2 3 4\n10 11 12",
        "sample_output": "Case #1: 5 4 3 1 2\nCase #2: 3 2 1 4\nCase #3: 1 2 4 3",
        "source": "2018\\round_3\\raise_the_roof"
    },
    {
        "problem_name": "Jurisdiction Restrictions",
        "problem_statement": "The city of Gridtopia is a matrix of square cells (\"blocks\") withRrows andCcolumns; rows are numbered (starting from 1) from\n  top to bottom, and columns are numbered (starting from 1) from left to right.\n  The city is served bySdifferent police stations; the i-th station is\n  in the block located in theRith row and theCith column, and no block contains more than one station.\nEach station is only able to patrol blocks that are no more thanDiblocks away from that station, either horizontally or\n  vertically. That is, the i-th station can only patrol the block in row R' and\n  column C' if max(|R' -Ri|, |C'-Ci|)\n  ≤Di. Put another way, the i-th station can patrol only\n  blocks within the square of side length 2Di+ 1 centered\n  on that station.\nAs the new police commissioner, you need to assign some blocks within the city\n  to exactly one station that is able to patrol it. Blocks that contain stations\n  and blocks that no station is able to patrol should not be assigned. All other\n  blocks have to be assigned. Moreover, you must distribute this assignment load as\n  evenly as possible among stations. Let Aidenote the\n  number of blocks assigned to the i-th station; then your goal is to minimize\n  the difference between the maximum of all the Aivalues and the\n  minimum of all of the Aivalues. If you make optimal assignments,\n  what is the smallest possible difference?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with three\n  integersR,C, andS: respectively, the numbers of rows\n  and columns in the grid of cells, and the number of stations. Then, there\n  areSmore lines. The i-th of these has three integersRi,Ci, andDi:\n  respectively, the row and column in which the i-th station is located, and\n  the parameter that determines which blocks that station is able to patrol, as\n  described above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the difference described above.\n1 ≤T≤ 100.2 ≤S≤ 15.1 ≤Ri≤R, for all i.1 ≤Ci≤C, for all i.For all i ≠ j,Ri≠Rjand/orCi≠Cj. (No two stations are in\n    the same block.)1 ≤Di< max(R,C), for all i.Time limit: 30 seconds per test set.Memory limit: 1GB.\n1 ≤R≤ 20.1 ≤C≤ 20.\n1 ≤R≤ 109.1 ≤C≤ 109.\nIn Sample Case #1, the city consists of a grid with 3 rows and 4 columns,\n  with one station in the upper left block and one station in the block to the\n  left of the lower right block. The first station can only patrol the three\n  blocks that touch the edge or corner of its block; every other block is at a\n  horizontal or vertical distance of more than 1 away. The second station\n  can patrol any block in the grid (except for the blocks containing the\n  stations). The difference in number of blocks assigned is minimized if you\n  assign station 1 all three of the blocks it can patrol, and then assign the\n  remaining seven blocks to station 2.\nIn Sample Case #2, one optimal strategy is to assign the blocks as follows.\n  In this picture,1represents station 1,2represents station 2,!represents a block assigned to station\n  1,@represents a block assigned to station 2, and.represents a block assigned to neither station (because\n  neither station can patrol it). Notice that a station's assigned blocks do\n  not need to form a single continuous area.\n@@@@.!!!@.!2!@.1!!@.!@!@.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line with three\n  integersR,C, andS: respectively, the numbers of rows\n  and columns in the grid of cells, and the number of stations. Then, there\n  areSmore lines. The i-th of these has three integersRi,Ci, andDi:\n  respectively, the row and column in which the i-th station is located, and\n  the parameter that determines which blocks that station is able to patrol, as\n  described above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the difference described above.",
        "sample_input": "2\n3 4 2\n1 1 1\n3 3 2\n5 5 2\n4 1 2\n3 2 2",
        "sample_output": "Case #1: 4\nCase #2: 0",
        "source": "2018\\world_finals\\jurisdiction_restrictions"
    },
    {
        "problem_name": "Swordmaster",
        "problem_statement": "You are a duelist aspiring to become the next Swordmaster. You will work\n  toward this title by dueling with opponents until you win\n  against every opponent. Every opponent is always available for dueling, and\n  opponents do not duel each other.\nEach duelist (including you) knows at least one attack, and at least one\n  defense. There are at mostPpairs of attacks and defenses in the\n  world; the i-th defense only counters the i-th attack, and the i-th attack is\n  only countered by the i-th defense. It is possible that there are attacks\n  and/or defenses that no duelist knows. You can use any attack or defense that\n  you know as many times as you like; they do not get \"used up\".\nHere are the rules for each individual duel with an opponent:\nYou can fight as many duels as you want, including multiple duels with the\n  same opponent, regardless of the outcomes of any previous duels. You do not\n  need to determine a complete schedule of duels in advance; you can base your\n  next decision on what has already happened. Once you have won at least once\n  against every opponent, you become the Swordmaster!\nYou are an especially quick learner. After each duel, regardless of the\n  outcome of the duel, you can add the attack and the defense (if any) used by\n  the opponent to your own set of known attacks/defenses. (Note that if an\n  opponent uses an unfamiliar defense against you, you do not learn it during\n  the duel itself, so you cannot use it against the opponent's attack in the\n  same duel.) Only you have this advantage; the attacks and defenses known by\n  your opponents never change.\nMoreover, after you win against an opponent, and before your next duel,\n  that opponent will teach you all of the attacks and defenses that they know\n  and that you do not already know. (Once they have lost to you, it looks\n  better for them if you eventually do become the Swordmaster!)\nYou know which attacks and defenses each opponent knows. If you make optimal\n  choices, is it possible to guarantee that you will become the Swordmaster,\n  regardless of what choices your opponents make?\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisYESif you can guarantee that you will become the Swordmaster\n  (as described in the problem statement), orNOotherwise.\n1 ≤T≤ 100.2 ≤N≤ 1000.1 ≤P≤ 1000.1 ≤Attacksi≤P, for all i.1 ≤Defensesi≤P, for all i.1 ≤Aij<Ai(j+1)≤P,\n    for all i and j.1 ≤Dij<Di(j+1)≤P,\n    for all i and j.The sum of allAttacksi+ the sum of allDefensesi,\n  over all i, does not exceed 50000.Time limit: 10 seconds per test set.Memory limit: 1GB.\nAi1= 1, for all i. (Attack 1 is known by all the duelists,\n    including you.)Di1= 1, for all i. (Defense 1 is known by all the\n    duelists, including you.)\nNo extra restrictions.\nNote that the last four sample cases would not appear in Test set 1.\nIn Sample Case #1, as long as your opponent keeps choosing defense 1 and\n  attack 1, you cannot win the duel. There is no guarantee that your opponent\n  will ever choose attack 2 or choose not to use defense 1, so it is not\n  possible to guarantee that you will become the Swordmaster.\nIn Sample Case #2, you know attack 1 and defense 2, and your (only) opponent\n  knows attack 2 and defense 1. The following strategy is guaranteed to make\n  you the Swordmaster:\nIn Sample Case #3, in your first duel, if your opponent always chooses attack\n  4, you will never be able to defend, since nobody knows the defense to that\n  attack. So, there is no way for you to ever become the swordmaster. Note that\n  there can be attacks and/or defenses that exist in the world, but are not\n  known by any of the duelists in this problem.\nIn Sample Case #4, there is an opponent that knows every defense, so you\n  cannot guarantee that you will ever win against them (they would have to\n  be nice and not defend!)\nHere is one guaranteed winning strategy for Sample Case #5:\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisYESif you can guarantee that you will become the Swordmaster\n  (as described in the problem statement), orNOotherwise.",
        "sample_input": "5\n2 2\n1 2\n1\n1 2\n2 1\n1 2\n1\n2 2\n1 1\n1\n2\n1 1\n2\n1\n2 5\n1 1\n2\n3\n2 1\n2 4\n2\n3 5\n3 2\n1 2 3\n3 4\n2 4\n3 4\n2 3 4 5\n2 5\n4 5\n1 2 3 4 5\n4 4\n1 1\n1\n4\n2 3\n2 3\n2 3 4\n1 3\n4\n1 2 4\n1 3\n4\n1 3 4",
        "sample_output": "Case #1: NO\nCase #2: YES\nCase #3: NO\nCase #4: NO\nCase #5: YES",
        "source": "2018\\world_finals\\swordmaster"
    },
    {
        "problem_name": "The Cartesian Job",
        "problem_statement": "You may have heard of the platinum-iridium cylinder that serves as the\n  standard for the kilogram, but did you know that there is a special line\n  segment used as the standard for the kilometer? It runs from (0, 0) to\n  (0, 1000) in a 2D plane in a confidential and very flat location.\nNaturally, this segment is extremely valuable, so it is protected byNrotating surveillance lasers, which are rays in the 2D plane. Each laser\n  has a fixed endpoint, and it rotates around that endpoint at a constant speed\n  of 1 revolution per second. Whether each laser rotates clockwise or\n  counterclockwise is chosen uniformly and independently at random by the\n  security system.\nLasers are not blocked by other lasers or their endpoints, or the segment\n  itself. No laser has an endpoint on the segment.\nYou have been hired to audit the security system, but all you have to work\n  with is a single snapshot from an instant in time, which shows the endpoint\n  and orientation (at that instant) of each laser. Since the image is just a\n  snapshot, you have no way of inferring the rotation directions of the lasers.\nYou have determined that the segment could be stolen in a heist if there is\n  ever a non-empty open interval of time during which no laser is touching the\n  segment. What is the probability of this happening?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing one\n  integerN: the number of lasers. Then,Nmore lines follow.\n  The i-th of these lines represents the ray that is the i-th laser, and\n  contains four integersXi,Yi,Xi', andYi', representing the 2D\n  coordinates of the endpoint of the ray, followed by the 2D coordinates of\n  some other point on the ray.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the probability described above.ywill be considered correct\n  if it is within an absolute or relative error of 10-6of the\n  correct answer. See theFAQfor an explanation of what that means, and what formats of real numbers we\n  accept.\n1 ≤T≤ 100.Time limit: 40 seconds per test set.Memory limit: 1GB.-106≤Xi≤ 106, for all i.-106≤Yi≤ 106, for all i.-106≤Xi'≤ 106, for all\n    i.-106≤Yi'≤ 106, for all\n    i.(Xi,Yi) ≠ (Xi',Yi'), for all i.IfXi= 0, then eitherYi< 0 orYi> 1000, for all i. (No laser's endpoint is on the\n    segment.)\n1 ≤N≤ 10.\n1 ≤N≤ 10000.There are at most 8 cases withN> 100.\nIn Sample Case #1, note that multiple lasers might share the same endpoint\n  and initial orientation, but this does not necessarily imply that they\n  rotate in the same direction. (Also note that the second and third lasers\n  have the same initial orientation even though it is specified differently.)\n  Regardless of their rotation directions, though, each of these lasers only\n  touches the segment at the instant that it is pointing in the negative y\n  direction, so there is clearly some other open interval during which no laser\n  is touching the segment, and the answer is 1.\nIn Sample Case #2, each of the lasers touches the segment during exactly 1/4\n  of its rotation, and the segment will be touched by a laser at all times if\n  and only if lasers 1 and 4 rotate in the same direction, and lasers 2 and 3\n  rotate in the same direction. The probability of that is 1/4, so the answer is 3/4.\nSample Case #3 is like Sample Case #2, but with a slight difference that\n  guarantees that there will be an instant at which no laser is touching the\n  segment, even if the lasers are all rotating the same way. So the answer is 1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing one\n  integerN: the number of lasers. Then,Nmore lines follow.\n  The i-th of these lines represents the ray that is the i-th laser, and\n  contains four integersXi,Yi,Xi', andYi', representing the 2D\n  coordinates of the endpoint of the ray, followed by the 2D coordinates of\n  some other point on the ray.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the probability described above.ywill be considered correct\n  if it is within an absolute or relative error of 10-6of the\n  correct answer. See theFAQfor an explanation of what that means, and what formats of real numbers we\n  accept.",
        "sample_input": "3\n5\n0 1001 -1 1001\n0 1001 -1 1001\n0 1001 -2 1001\n0 1001 0 500\n0 1002 1234 5678\n4\n500 500 1000 1000\n500 500 0 1000\n500 500 0 0\n500 500 1000 0\n4\n500 500 1000 1001\n500 500 0 1000\n500 500 0 0\n500 500 1000 0",
        "sample_output": "Case #1: 1.000000\nCase #2: 0.750000\nCase #3: 1.000000",
        "source": "2018\\world_finals\\the_cartesian_job"
    },
    {
        "problem_name": "Two-Tiling",
        "problem_statement": "Your game company just ordered a lot of square game boards with 64 blank unit\n  cells, intending to turn them into chessboards, but your boss has suddenly\n  declared that chess is out of fashion. To make the best use of all of these\n  boards, you have designed a new puzzle that usestiles.\nA tile is a contiguous set of unit cells, connected edge-to-edge, that can\n  fit inside a 3x3 square of unit cells. For example, the following are\n  examples of valid tiles (with each@denoting a piece of the\n  tile, and extra.characters for padding):\n... @@@ @@@ .@@... @@@ @.@ @.@.@. @@@ @.. @@@\nThe following would NOT be valid tiles:\n@@. @.@ .@@.... .@. @@@@.@@ @.@ .@@.\nWhen the solver of your new puzzle places a tile on the board, its unit cells\n  must exactly overlap some unit cells on the board that have not already been\n  covered by other tiles. A tile is still considered the same type of tile even\n  after being arbitrarily translated, rotated (by multiples of 90 degrees),\n  and/or reflected, and the solver is allowed to do any of those things to a\n  tile while placing it. For example, all of these are considered to be\n  the same tile (and other variants of that tile are possible):\n.@. ..@ @.. ... @@.@@. .@@ @@. .@@ .@@@.. .@. .@. @@. ...\nTo make your puzzle, you will color one or more of the cells on the board\n  red. The solver will solve the puzzle by placing tiles on the board such that\n  all red cells are covered up, but no other cell is covered up. To save on\n  manufacturing costs, the solver receives only one type of tile, but they are\n  given exactly enough copies of it to be able to cover all of the red cells.\nYour job is to decide which of the board's cells to color red. Unfortunately,\n  your boss is still deciding which of two particular tiles to use for the\n  game. You are tired of waiting, so you have decided to try to color a set of\n  cells such that the puzzle can be solved regardless of which of the tiles\n  ends up being used.\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of four lines. Each of the first\n  three lines has three characters, then a single space, then three more\n  characters. The fourth line is a blank line.\nWhen looking at an entire case, the space characters separate a 3x3 grid on\n  the left and a 3x3 grid on the right. Each grid represents a frame in which\n  one of the two tiles is displayed. In each grid, each character is either@, representing a cell that is part of the tile, or., representing a cell that is not part of the tile. Note that\n  these.cells have nothing to do with the puzzle or the board,\n  and are just padding to make the shape of the tile clear. It is guaranteed\n  that the two tiles are not the same, as described in the statement above.\nOutputFor each test case, output one line withCase #x: y, wherexis the test case number (starting from 1), andyisPOSSIBLEif there is a solution to the problem, andIMPOSSIBLEif there is not. Then, if there is a solution, output\n  eight more lines of seventeen characters each, forming two 8x8 grids with one\n  column of space characters in between. Each grid must use dot\n  (.) characters to denote any blank cells, or characters from the\n  following set of 64:!?0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZto denote the individual tiles used in a solution to the puzzle. Within each\n  8x8 grid, each non-dot character must denote a part of the same single tile,\n  and different characters must denote different tiles. Each tile in the grid\n  on the left must be the same as the tile on the left in input, up to\n  rotations, translations and reflections. Each tile in the grid on the right\n  must be the same as the tile on the right in input, up to rotations,\n  translations and reflections. The set of cells that are not dots in both 8x8\n  grids must be the same, and must be nonempty.If there are multiple valid solutions, you may output any one of them.Limits for Test set 1 (Visible; the only test set)T= 595. (Every possible test case, up to isomorphism, is included.)Time limit: 30 seconds.Memory limit: 1GB.The cells in each tile in the input form a single contiguous group via their\n    edge-to-edge connections.The two tiles in the input are not the same, as described in the statement.SampleSample Inputsave_altcontent_copyCopied!4\n.@@ .@.\n.@. .@.\n.@@ @@.\n\n@@@ @@@\n@.@ @@@\n@@@ @@@\n\n.@. ...\n@@. .@@\n@.. ...\n\n... ..@\n... ..@\n@.. ...Sample Outputsave_altcontent_copyCopied!Case #1: POSSIBLE\n....11.. ....11..\n...221.. ...221..\n...211.. ...321..\n...22... ...32...\n.333.... .433....\n4343.... 5444....\n444..... 555.....\n........ ........\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\n........ ........\n..T..I.. ..T..I..\n.TT..II. .tT..Ii.\n.T....I. .t....i.\n........ ........\n.LL..EE. .LL..EE.\n..LLEE.. ..llee..\n........ ........\nCase #4: POSSIBLE\nthe.CODE AAB.CDDE\nJam.2018 FFB.CGGE\n........ ........\nWorld... HHIIJ...\n.FiNALS. .KLLJMM.\n.cup.... .KNN....\n........ ........\nTRIUMPH! OOPPQQRRThe sample output displays one set of answers to the sample cases. Other\n  answers may be possible.In Sample Case #2, there is no possible set of red cells that would make\n  the puzzle solvable regardless of which of the two tiles is chosen.In Sample Cases #3 and #4, note that the chosen set of red cells is not\n  required to be contiguous. Also note that the dots in the input for a tile\n  are not considered part of the tile, and have no significance in creating\n  the puzzle. For example, the given answer would also be acceptable for the\n  following input:... ....@. .@.... .@.Moreover, that input is isomorphic with Sample Case #4, and would not appear\n  in the same test set along with Sample Case #4.\nFor each test case, output one line withCase #x: y, wherexis the test case number (starting from 1), andyisPOSSIBLEif there is a solution to the problem, andIMPOSSIBLEif there is not. Then, if there is a solution, output\n  eight more lines of seventeen characters each, forming two 8x8 grids with one\n  column of space characters in between. Each grid must use dot\n  (.) characters to denote any blank cells, or characters from the\n  following set of 64:\n!?0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\nto denote the individual tiles used in a solution to the puzzle. Within each\n  8x8 grid, each non-dot character must denote a part of the same single tile,\n  and different characters must denote different tiles. Each tile in the grid\n  on the left must be the same as the tile on the left in input, up to\n  rotations, translations and reflections. Each tile in the grid on the right\n  must be the same as the tile on the right in input, up to rotations,\n  translations and reflections. The set of cells that are not dots in both 8x8\n  grids must be the same, and must be nonempty.\nIf there are multiple valid solutions, you may output any one of them.\nT= 595. (Every possible test case, up to isomorphism, is included.)Time limit: 30 seconds.Memory limit: 1GB.The cells in each tile in the input form a single contiguous group via their\n    edge-to-edge connections.The two tiles in the input are not the same, as described in the statement.\nThe sample output displays one set of answers to the sample cases. Other\n  answers may be possible.\nIn Sample Case #2, there is no possible set of red cells that would make\n  the puzzle solvable regardless of which of the two tiles is chosen.\nIn Sample Cases #3 and #4, note that the chosen set of red cells is not\n  required to be contiguous. Also note that the dots in the input for a tile\n  are not considered part of the tile, and have no significance in creating\n  the puzzle. For example, the given answer would also be acceptable for the\n  following input:\n... ....@. .@.... .@.\nMoreover, that input is isomorphic with Sample Case #4, and would not appear\n  in the same test set along with Sample Case #4.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of four lines. Each of the first\n  three lines has three characters, then a single space, then three more\n  characters. The fourth line is a blank line.",
        "output_description": "For each test case, output one line withCase #x: y, wherexis the test case number (starting from 1), andyisPOSSIBLEif there is a solution to the problem, andIMPOSSIBLEif there is not. Then, if there is a solution, output\n  eight more lines of seventeen characters each, forming two 8x8 grids with one\n  column of space characters in between. Each grid must use dot\n  (.) characters to denote any blank cells, or characters from the\n  following set of 64:",
        "sample_input": "4\n.@@ .@.\n.@. .@.\n.@@ @@.\n\n@@@ @@@\n@.@ @@@\n@@@ @@@\n\n.@. ...\n@@. .@@\n@.. ...\n\n... ..@\n... ..@\n@.. ...",
        "sample_output": "Case #1: POSSIBLE\n....11.. ....11..\n...221.. ...221..\n...211.. ...321..\n...22... ...32...\n.333.... .433....\n4343.... 5444....\n444..... 555.....\n........ ........\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\n........ ........\n..T..I.. ..T..I..\n.TT..II. .tT..Ii.\n.T....I. .t....i.\n........ ........\n.LL..EE. .LL..EE.\n..LLEE.. ..llee..\n........ ........\nCase #4: POSSIBLE\nthe.CODE AAB.CDDE\nJam.2018 FFB.CGGE\n........ ........\nWorld... HHIIJ...\n.FiNALS. .KLLJMM.\n.cup.... .KNN....\n........ ........\nTRIUMPH! OOPPQQRR",
        "source": "2018\\world_finals\\two-tiling"
    },
    {
        "problem_name": "Cryptopangrams",
        "problem_statement": "On the Code Jam team, we enjoy sending each otherpangrams, which are\n  phrases that use each letter of the English alphabet at least once. One\n  common example of a pangram is \"the quick brown fox jumps over the lazy dog\".\n  Sometimes our pangrams contain confidential information — for example,CJ QUIZ: KNOW BEVY OF DP FLUX ALGORITHMS— so we need to\n  keep them secure.\nWe looked through a cryptography textbook for a few minutes, and we learned\n  that it is very hard to factor products of two large prime numbers, so we\n  devised an encryption scheme based on that fact. First, we made some\n  preparations:\nNow, whenever we want to send a pangram as a message, we first remove all\n  spacing to form a plaintext message. Then we write down the product of the\n  prime for the first letter of the plaintext and the prime for the second\n  letter of the plaintext. Then we write down the product of the primes for the\n  second and third plaintext letters, and so on, ending with the product of the\n  primes for the next-to-last and last plaintext letters. This new list of\n  values is our ciphertext. The number of values is one smaller than the number\n  of characters in the plaintext message.\nFor example, suppose thatN= 103 and we chose to use the first 26 odd\n  prime numbers, because we worry that it is too easy to factor even numbers.\n  ThenA= 3,B= 5,C= 7,D= 11, and so on, up toZ= 103. Also suppose that\n  we want to encrypt theCJ QUIZ... pangram above, so our\n  plaintext isCJQUIZKNOWBEVYOFDPFLUXALGORITHMS. Then the first\n  value in our ciphertext is 7 (the prime forC) times 31 (the\n  prime forJ) =217; the next value is1891, and so on, ending with3053.\nWe will give you a ciphertext message and the value ofNthat we used.\n  We will not tell you which primes we used, or how to decrypt the ciphertext.\n  Do you think you can recover the plaintext anyway?\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each test case consists of two lines. The\n  first line contains two integers:N, as described above, andL,\n  the length of the list of values in the ciphertext. The second line containsLintegers: the list of values in the ciphertext.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a string ofL+ 1 uppercase English alphabet letters: the\n  plaintext.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1 GB.25 ≤L≤ 100.The plaintext contains each English alphabet letter at least once.\n101 ≤N≤ 10000.\n101 ≤N≤ 10100.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each test case consists of two lines. The\n  first line contains two integers:N, as described above, andL,\n  the length of the list of values in the ciphertext. The second line containsLintegers: the list of values in the ciphertext.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a string ofL+ 1 uppercase English alphabet letters: the\n  plaintext.",
        "sample_input": "2\n103 31\n217 1891 4819 2291 2987 3811 1739 2491 4717 445 65 1079 8383 5353 901 187 649 1003 697 3239 7663 291 123 779 1007 3551 1943 2117 1679 989 3053\n10000 25\n3292937 175597 18779 50429 375469 1651121 2102 3722 2376497 611683 489059 2328901 3150061 829981 421301 76409 38477 291931 730241 959821 1664197 3057407 4267589 4729181 5335543",
        "sample_output": "Case #1: CJQUIZKNOWBEVYOFDPFLUXALGORITHMS\nCase #2: SUBDERMATOGLYPHICFJKNQVWXZ",
        "source": "2019\\qualification_round\\cryptopangrams"
    },
    {
        "problem_name": "Dat Bae",
        "problem_statement": "A research consortium has built a new database system for their new\n  data center. The database is made up of one master computer andNworker computers, which are given IDs from 0 toN-1. Each worker\n  stores exactly one bit of information... which seems rather wasteful, but\n  this is very important data!\nYou have been hired to evaluate the following instruction for the database:\nDuring normal operation,TEST_STOREshould return the same\n  string of bits that it read in, but unfortunately,Bof the workers\n  are broken!\nThe broken workers are correctly able to store the bits given to them,\n  but whenever the master tries to read from a broken worker, no bit is\n  returned.\n\n  This causes theTEST_STOREoperation to return onlyN-Bbits, which are the bits stored on the non-broken workers\n  (in ascending order of their IDs).\n\n  For example, supposeN= 5 and the 0th and 3rd workers are broken\n  (soB= 2). Then:\nFor security reasons, the database is hidden in an underground mountain\n  vault, so calls toTEST_STOREtake a very long time.\n\n  You have been tasked with working out which workers are broken using at mostFcalls toTEST_STORE.\nThis is an interactive problem. You should make sure you have read the information in\n  the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nFor each test case, your program will first read a single line containing three\n  integersN,B, andF, indicating the number of workers,\n  the number of broken workers, and the number of lines you may send (as\n  described below).\nThen you may send the judge up toFlines, each containing a string of\n  exactlyNcharacters, each either0or1.\n  Each time you send a line, the judge will check that you have not made more\n  thanFcalls. If you have, the judge will send you a single line\n  containing a single-1, and then finish all communication and\n  wait for your program to finish. Otherwise, the judge will send a string of\n  lengthN-B: the string returned byTEST_STORE, as\n  described above.\nOnce your program knows the index of theBbroken workers, it can\n  finish the test case by sendingBspace-separated integers: the IDs of\n  the broken workers, in sorted order. This does not count as one of yourFcalls.\nIf theBintegers are not exactly the IDs of theBbroken\n  workers, you will receive a Wrong Answer verdict, and the judge will send a\n  single line containing-1, and then no additional communication.\n  If your answer was correct, the judge will send a single line with1, followed by the line that begins the next test case (or exit,\n  if that was the last test case).\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤N≤ 1024.1 ≤B≤ min(15,N-1).\nF= 10.\nF= 5.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThe following interaction meets the limits for Test set 1.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\qualification_round\\dat_bae"
    },
    {
        "problem_name": "Foregone Solution",
        "problem_statement": "Someone just won the Code Jam lottery, and we owe themNjamcoins!\n  However, when we tried to print out an oversized check, we encountered a\n  problem. The value ofN, which is an integer, includes at least one\n  digit that is a4... and the4key on the keyboard\n  of our oversized check printer is broken.\nFortunately, we have a workaround: we will send our winner two checks for\n  positive integer amounts A and B, such that neither A nor B contains any\n  digit that is a4, and A + B =N. Please help us find any\n  pair of values A and B that satisfy these conditions.\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with an integerN.\nFor each test case, output one line containingCase #x: A B,\n  wherexis the test case number (starting from 1), andAandBare positive integers as described above.\nIt is guaranteed that at least one solution exists. If there are multiple\n  solutions, you may output any one of them. (See\n  \"What if a test case has multiple correct solutions?\" in the Competing\n  section of theFAQ. This\n  information about multiple solutions will not be explicitly stated in the\n  remainder of the 2019 contest.)\n1 ≤T≤ 100.Time limit: 10 seconds per test set.Memory limit: 1GB.At least one of the digits ofNis a 4.\n1 <N< 105.\n1 <N< 109.\nSolving the first two test sets for this problem should get you a long way toward advancing.\nThe third test set is worth only 1 extra point, for extra fun and bragging rights!\n1 <N< 10100.\nIn Sample Case #1, notice that A and B can be the same. The only other\n  possible answers are1 3and3 1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of one line with an integerN.",
        "output_description": "For each test case, output one line containingCase #x: A B,\n  wherexis the test case number (starting from 1), andAandBare positive integers as described above.",
        "sample_input": "3\n4\n940\n4444",
        "sample_output": "Case #1: 2 2\nCase #2: 852 88\nCase #3: 667 3777",
        "source": "2019\\qualification_round\\foregone_solution"
    },
    {
        "problem_name": "You Can Go Your Own Way",
        "problem_statement": "You have just entered the world's easiest maze. You start in the northwest\n  cell of anNbyNgrid of unit cells, and you must reach the\n  southeast cell. You have only two types of moves available: a unit move to\n  the east, and a unit move to the south. You can move into any cell, but you\n  may not make a move that would cause you to leave the grid.\nYou are excited to be the first in the world to solve the maze, but then\n  you see footprints. Your rival, Labyrinth Lydia, has already solved the maze\n  before you, using the same rules described above!\nAs an original thinker, you do not want to reuse any of Lydia's moves.\n  Specifically, if her path includes a unit move from some cell A to some\n  adjacent cell B, your path cannot also include a move from A to B.\n  (However, in that case, it is OK for your path to visit A or visit B, as long\n  as you do not go from A to B.) Please find such a path.\nIn the following picture, Lydia's path is indicated in blue, and one\n  possible valid path for you is indicated in orange:\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each case consists of two lines. The first line\n  contains one integerN, giving the dimensions of the maze, as\n  described above. The second line contains a stringPof 2N- 2\n  characters, each of which is either uppercaseE(for east) or\n  uppercaseS(for south), representing Lydia's valid path\n  through the maze.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a string of 2N- 2 characters each of which is either uppercaseE(for east) or uppercaseS(for south),\n  representing your valid path through the maze that does not conflict with\n  Lydia's path, as described above. It is guaranteed that at least one\n  answer exists.\n1 ≤T≤ 100.Time limit: 15 seconds per test set.Memory limit: 1GB.Pcontains exactlyN- 1Echaracters and exactlyN- 1Scharacters.\n2 ≤N≤ 10.\n2 ≤N≤ 1000.\nFor at most 10 cases, 2 ≤N≤ 50000.For all other cases, 2 ≤N≤ 10000.\nIn Sample Case #1, the maze is so small that there is only one valid\n  solution left for us.\nSample Case #2 corresponds to the picture above. Notice that it is acceptable\n  for the paths to cross.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each case consists of two lines. The first line\n  contains one integerN, giving the dimensions of the maze, as\n  described above. The second line contains a stringPof 2N- 2\n  characters, each of which is either uppercaseE(for east) or\n  uppercaseS(for south), representing Lydia's valid path\n  through the maze.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a string of 2N- 2 characters each of which is either uppercaseE(for east) or uppercaseS(for south),\n  representing your valid path through the maze that does not conflict with\n  Lydia's path, as described above. It is guaranteed that at least one\n  answer exists.",
        "sample_input": "2\n2\nSE\n5\nEESSSESE",
        "sample_output": "Case #1: ES\nCase #2: SEEESSES",
        "source": "2019\\qualification_round\\you_can_go_your_own_way"
    },
    {
        "problem_name": "Alien Rhyme",
        "problem_statement": "During some extraterrestrial exploration, you found evidence of alien poetry! Your team of\nlinguists has determined that each word in the alien language has an accent on exactly one\nposition (letter) in the word; the part of the word starting from the accented letter is called\nthe accent-suffix. Two words are said to rhyme if both of their accent-suffixes are equal.\nFor example, the wordsPROLandTARPOLrhyme if the accented letter\nin both is theOor theL, but they do not rhyme if the accented\nletters are theRs, or theRinPROLand thePinTARPOL, or theOinPROLand theLinTARPOL.\nYou have recovered a list ofNwords that may be part of an alien poem. Unfortunately,\nyou do not know which is the accented letter for each word. You believe\nthat you can discard zero or more of these words, assign accented letters to the remaining\nwords, and then arrange those words into pairs such that each word rhymes only with the other\nword in its pair, and with none of the words in other pairs.\nYou want to know the largest number of words that can be arranged into pairs in this way.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line with a single integerN.\nThen,Nlines follow, each of which contains a stringWiof uppercase English letters, representing\na distinct word. Notice that the same word can have different accentuations in different test\ncases.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the size of the largest subset\nof words meeting the criteria described above.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.1 ≤ length ofWi≤ 50, for all i.Wiconsists of uppercase English letters, for all i.Wi≠Wj, for all i ≠ j.\n  (Words are not repeated within a test case.)\n2 ≤N≤ 6.\n2 ≤N≤ 1000.\nIn Sample Case #1, the two words can rhyme with an appropriate accent assignment,\n  as described above, so the largest subset is the entire input.\nIn Sample Case #2, no two words can rhyme regardless of how we assign accents, because any\n  two suffixes will differ at least in the last letter. Therefore, the largest subset\n  is the empty one, of size 0.\nIn Sample Case #3, we can use the entire set of words if we accentuateCODEJAMandJAMat theJs,HAMandNALAMat their lastAs andHUMandNOLOMat theMs.\nIn Sample Case #4, any two words can be made to rhyme, but always by making the accented letter\n  theI. Therefore, if we add two pairs to the subset, words from different pairs\n  will rhyme. We can, thus, only form a subset of size 2, by choosing any 2 of the input words.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line with a single integerN.\nThen,Nlines follow, each of which contains a stringWiof uppercase English letters, representing\na distinct word. Notice that the same word can have different accentuations in different test\ncases.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the size of the largest subset\nof words meeting the criteria described above.",
        "sample_input": "4\n2\nTARPOL\nPROL\n3\nTARPOR\nPROL\nTARPRO\n6\nCODEJAM\nJAM\nHAM\nNALAM\nHUM\nNOLOM\n4\nPI\nHI\nWI\nFI",
        "sample_output": "Case #1: 2\nCase #2: 0\nCase #3: 6\nCase #4: 2",
        "source": "2019\\round_1a\\alien_rhyme"
    },
    {
        "problem_name": "Golf Gophers",
        "problem_statement": "Last year, a bunch of pesky gophers took up residence in our orchard. We\n  tried to change our line of work by opening up a miniature golf course, but\n  it looks like the gophers have followed us here! Once again, we need to\n  figure out how many gophers there are, but we cannot observe them directly\n  because they are secretive and nocturnal, whereas we like to sleep at night.\n  We do know there are between 1 andMgophers, inclusive.\nOur mini golf course is famous for having a small electronic windmill on each\n  of its 18 holes. The i-th windmill has 2 ≤Bi≤ 18\n  blades, which are numbered from 0 toBi-1, clockwise. Each\n  night, before going to sleep, we turn off the windmills and set each one such\n  that blade 0 is pointing downward, which is important so that the windmills\n  can charge up properly for the next day. However, we have noticed that when\n  we wake up, the windmills have been disturbed. Since our mini golf course is\n  in a windless area, we think the mischievous gophers must be responsible!\nWe know that every night, all of the gophers emerge, one by one; each of them\n  chooses one of the windmills independently and uniformly at random and\n  rotates it counterclockwise by one blade. So, for example, for a windmill\n  with 3 blades for which 0 is pointing downward, the first gopher to interact\n  with it turns it so that 1 is pointing downward, and then the next gophers to\n  interact with that windmill make the downward-pointing blade have number 2,\n  then 0, then 1, and so on.\nWe have devised a plan. We designed our windmills so that we can easily\n  change the number of blades (to modulate the difficulty of our course),\n  and we will now take advantage of this! Each night, before going to sleep, we\n  can choose the number of blades on each of the 18 windmills, within the given\n  limits; we do not have to use the same number of blades on each windmill, or\n  make the same choices every night. In the morning, we will observe the number\n  on each windmill's downward-pointing blade.\nWe haveNnights in which to figure out G, the number of gophers.\n  Can you help us?\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing three integersT,NandM, the number of test cases, the number of\n  nights allowed per test case and the maximum number of gophers, respectively.\n  Then, you need to processTtest cases.\nIn each test case, your program processes up toN+ 1 exchanges\n  with our judge. You may make up toNexchanges of the following form:\nOn each night, for each gopher, the choice of which windmill the gopher turns\n  is uniform at (pseudo)-random, and independent of any other choice by any\n  gopher (including itself) on any night.\nAfter making between 0 andNexchanges as explained above, you must\n  make one more exchange of the following form:\nAfter the judge sends-1to your input stream (because of either\n  invalid data or an incorrect answer), it will not send any other output.\n  If your program continues to wait for the judge after receiving-1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n1 ≤T≤ 20.Time limit: 20 seconds per test set.Memory limit: 1GB.\nN= 365.M= 100.\nN= 7.M= 106.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThis interaction corresponds to Test set 1. Suppose that, unbeknownst to us,\n  the judge has decided that there are 10 gophers.\nNotice that even though the guess was consistent with the information we\n  received from the judge, we were still wrong because we did not find the\n  correct value.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_1a\\golf_gophers"
    },
    {
        "problem_name": "Pylons",
        "problem_statement": "Our Battlestarcraft Algorithmica ship is being chased through space by\n  persistent robots called Pylons! We have just teleported to a new galaxy to\n  try to shake them off of our tail, and we want to stay here for as long as\n  possible so we can buy time to plan our next move... but we do not want to\n  get caught!\nThis galaxy is a flat grid ofRrows andCcolumns; the rows\n  are numbered from 1 toRfrom top to bottom, and the columns are\n  numbered from 1 toCfrom left to right. We can choose which cell to\n  start in, and we must continue to jump between cells until we have visited\n  each cell in the galaxyexactlyonce. That is, we can never revisit a\n  cell, including our starting cell.\nWe do not want to make it too easy for the Pylons to guess where we will go\n  next. Each time we jump from our current cell, we must choose a destination\n  cell that does not share a row, column, or diagonal with that current cell.\n  Let (i, j) denote the cell in the i-th row and j-th column; then a jump\n  from a current cell (r, c) to a destination cell (r', c') is invalid if and\n  only if any of these is true:\nCan you help us find an order in which to visit each of theR×Ccells, such that the move between any pair of\n  consecutive cells in the sequence is valid? Or is it impossible for us to\n  escape from the Pylons?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing two\n  integersRandC: the numbers of rows and columns in this\n  galaxy.\nFor each test case, output one line containingCase #x: y,\n  whereyis a string of uppercase letters: eitherPOSSIBLEorIMPOSSIBLE, according to whether it is\n  possible to fulfill the conditions in the problem statement. Then, if it is\n  possible, outputR×Cmore lines. The i-th of these\n  lines represents the i-th cell you will visit (counting starting from 1), and\n  should contain two integers riand ci: the row and\n  column of that cell. Note that the first of these lines represents your\n  chosen starting cell.\nTime limit: 20 seconds per test set.Memory limit: 1GB.\nT= 16.2 ≤R≤ 5.2 ≤C≤ 5.\n1 ≤T≤ 100.2 ≤R≤ 20.2 ≤C≤ 20.\nIn Sample Case #1, no matter which starting cell we choose, we have nowhere\n  to jump, since all of the remaining cells share a row, column, or diagonal\n  with our starting cell.\nIn Sample Case #2, we have chosen the cell in row 2, column 3 as our starting\n  cell.  Notice that it is fine for our final cell to share a row, column, or\n  diagonal with our starting cell. The following diagram shows the order in\n  which the cells are visited:\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing two\n  integersRandC: the numbers of rows and columns in this\n  galaxy.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  whereyis a string of uppercase letters: eitherPOSSIBLEorIMPOSSIBLE, according to whether it is\n  possible to fulfill the conditions in the problem statement. Then, if it is\n  possible, outputR×Cmore lines. The i-th of these\n  lines represents the i-th cell you will visit (counting starting from 1), and\n  should contain two integers riand ci: the row and\n  column of that cell. Note that the first of these lines represents your\n  chosen starting cell.",
        "sample_input": "2\n2 2\n2 5",
        "sample_output": "Case #1: IMPOSSIBLE\nCase #2: POSSIBLE\n2 3\n1 1\n2 4\n1 2\n2 5\n1 3\n2 1\n1 5\n2 2\n1 4",
        "source": "2019\\round_1a\\pylons"
    },
    {
        "problem_name": "Draupnir",
        "problem_statement": "Odin has some magical rings which produce copies of themselves. Each\n  \"X-day ring\" produces one more X-day ring every X days after the day it came\n  into existence. These rings come in six possible varieties: 1-day, 2-day,\n  ..., all the way up to 6-day.\nFor example, a 3-day ring that came into existence on day 0 would do nothing\n  until day 3, when it would produce another 3-day ring. Then, on day 6, each\n  of those two rings would produce another 3-day ring, and so on.\nYou know that Odin had no rings before day 0. On day 0, some rings came into\n  existence. At the end of day 0, Odin had Rii-day rings, for each\n  1 ≤ i ≤ 6. You know that 0 ≤ Ri≤ 100, for all i,\n  and at least one of the Rivalues is positive.\nFortunately, you also have access to the secret well of knowledge. Each time\n  you use it, you can find out thetotalnumber of rings that Odin had\n  at the end of a particular day between day 1 and day 500, inclusive. The well\n  will give you the answer modulo 263, because even it can only hold\n  so much information! Moreover, you can only use the well up toWtimes.\nYour goal is to determine how many rings of each type Odin had at the end of\n  day 0 — that is, you must find each of the Rivalues.\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing two integersT, the number of test cases, andW, the number of times you are\n  allowed to use the well of knowledge per test case. Then, you need to\n  processTtest cases.\nIn each test case, your program processes up toW+ 1 exchanges\n  with our judge. You may make up toWexchanges of the following form:\nAfter between 0 andWexchanges as explained above, you must perform\n  one more exchange of the following form:\nAfter the judge sends-1to your input stream (because of either\n  invalid data or an incorrect answer), it will not send any other output.\n  If your program continues to wait for the judge after receiving-1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n1 ≤T≤ 50.Time limit: 20 seconds per test set.Memory limit: 1GB.\nW= 6.\nW= 2.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThis interaction corresponds to Test set 1. Suppose that, unbeknownst to us,\n  the judge has decided that Odin had one ring of each of the six types at\n  the end of day 0.\nNotice that even though the guess was consistent with the information we\n  received from the judge, we were still wrong because we did not find the\n  correct values.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_1b\\draupnir"
    },
    {
        "problem_name": "Fair Fight",
        "problem_statement": "En garde! Charles and Delila are about to face off against each other in the\n  final fight of the Swordmaster fencing tournament.\nAlong one wall of the fencing arena, there is a rack withNdifferent\n  types of swords; the swords are numbered by type, from 1 toN. As the\n  head judge, you will pick a pair of integers (L, R) (with 1 ≤ L ≤ R\n  ≤N), and only the L-th through R-th types of swords (inclusive)\n  will be available for the fight.\nDifferent types of sword are used in different ways, and being good with one\n  type of sword does not necessarily mean you are good with another! Charles\n  and Delila have skill levels ofCiandDi, respectively, with the i-th type of sword. Each of\n  them will look at the types of sword you have made available for this fight,\n  and then each will choose a type with which they are most skilled. If there\n  are multiple available types with which a fighter is equally skilled, and\n  that skill level exceeds the fighter's skill level in all other available\n  types, then the fighter will make one of those equally good choices at\n  random. Notice that it is possible for Charles and Delila to choose the same\n  type of sword, which is fine — there are multiple copies of each type of\n  sword available.\nThe fight isfairif the absolute difference between Charles's skill\n  level with his chosen sword type and Delila's skill level with her chosen\n  sword type is at mostK. To keep the fight exciting, you'd like to\n  know how many different pairs (L, R) you can choose that will result in a\n  fair fight.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with a line containing the two\n  integersNandK, as described above. Then, two more lines\n  follow. The first of these lines containsNintegersCi, giving Charles' skill levels for each type of sword, as\n  described above. Similarly, the second line containsNintegersDi, giving Delila's skill levels.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the number of choices you can make that result in a fair fight, as\n  described above.\n1 ≤T≤ 100.0 ≤K≤ 105.0 ≤Ci≤ 105, for all i.0 ≤Di≤ 105, for all i.Time limit: 30 seconds per test set.Memory limit: 1GB.\n1 ≤N≤ 100.\nN= 105, for exactly 8 test cases.1 ≤N≤ 1000, for all but 8 test cases.\nIn Sample Case #1, the fight is fair if and only if Charles can use the last\n  type of sword, so the answer is 4.\nIn Sample Case #2, there are 4 fair fights: (1, 2), (1, 3), (2, 2), and\n  (2, 3). Notice that for pairs like (1, 3), Charles and Delila both have\n  multiple swords they could choose that they are most skilled with; however,\n  each pair only counts as one fair fight.\nIn Sample Case #3, there is 1 fair fight: (1, 1).\nIn Sample Case #4, there are no fair fights, so the answer is 0.\nIn Sample Case #5, remember that theduelistsare not trying to make\n  the fights fair; they choose the type of sword that they are most skilled\n  with. For example, (1, 3) is not a fair fight, because Charles will choose\n  the first type of sword, and Delila will choose the third type of sword.\n  Delila will not go easy on Charles by choosing a weaker sword!\nIn Sample Case #6, there are 7 fair fights: (1, 3), (1, 4), (2, 3), (2, 4),\n  (3, 3), (3, 4), and (4, 4).\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with a line containing the two\n  integersNandK, as described above. Then, two more lines\n  follow. The first of these lines containsNintegersCi, giving Charles' skill levels for each type of sword, as\n  described above. Similarly, the second line containsNintegersDi, giving Delila's skill levels.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the number of choices you can make that result in a fair fight, as\n  described above.",
        "sample_input": "6\n4 0\n1 1 1 8\n8 8 8 8\n3 0\n0 1 1\n1 1 0\n1 0\n3\n3\n5 0\n0 8 0 8 0\n4 0 4 0 4\n3 0\n1 0 0\n0 1 2\n5 2\n1 2 3 4 5\n5 5 5 5 10",
        "sample_output": "Case #1: 4\nCase #2: 4\nCase #3: 1\nCase #4: 0\nCase #5: 1\nCase #6: 7",
        "source": "2019\\round_1b\\fair_fight"
    },
    {
        "problem_name": "Manhattan Crepe Cart",
        "problem_statement": "There are a lot of great streetside food vendors in Manhattan, but without a\n  doubt, the one with the tastiest food is the Code Jam Crepe Cart!\nYou want to find the cart, but you do not know where it is, except that it is\n  at some street intersection. You believe that people from across Manhattan\n  are currently walking toward that intersection, so you will try to identify\n  the intersection toward which the most people are traveling.\nFor the purposes of this problem, Manhattan is a regular grid with its axes\n  aligned to compass lines and bounded between 0 andQ, inclusive, on\n  each axis. There are west-east streets corresponding to gridlines\n  y = 0, y = 1, y = 2, …,\n  y =Qand south-north streets corresponding to gridlines\n  x = 0, x = 1, x = 2, …,\n  x =Q, and people move only along these streets.\n  The points where the lines meet — e.g., (0, 0) and (1, 2) — are\n  intersections. The shortest distance between two intersections is measured via theManhattan distance— that is, by the sum of the absolute horizontal difference and the\n  absolute vertical difference between the two sets of coordinates.\nYou know the locations ofPpeople, all of whom are standing at\n  intersections, and the compass direction each person is headed: north\n  (increasing y direction), south (decreasing y direction), east (increasing x\n  direction), or west (decreasing x direction). A person is moving toward a\n  street intersection if their current movement is on a shortest path to that\n  street intersection within the Manhattan grid. For\n  example, if a person located at (x0, y0) is moving\n  north, then they are moving toward all street intersections that have\n  coordinates (x, y) with y > y0.\nYou think the crepe cart is at the intersection toward which the most people\n  are traveling. Moreover, you believe that more southern and western parts of\n  the island are most likely to have a crepe cart, so if there are multiple\n  such intersections, you will choose the one with the smallest non-negativexcoordinate, and if there are multiple such intersections with\n  that samexcoordinate, the one among those with the smallest\n  non-negativeycoordinate. Which intersection will you choose?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with one line containing\n  two integersPandQ: the number of people, and the maximum\n  possible value of an x or y coordinate in Manhattan, as described above.\n  Then, there arePmore lines. The i-th of those lines contains two\n  integersXiandYi, the current location\n  (street corner) of a person, and a characterDi, the\n  direction that person is headed.Diis one of the uppercase\n  lettersN,S,E, orW,\n  which stand for north, south, east, and west, respectively.\nFor each test case, output one line containingCase #t: x y,\n  wheretis the test case number (starting from 1) andxandyare the horizontal and vertical coordinates\n  of the intersection where you believe the crepe cart is located.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.1 ≤P≤ 500.0 ≤Xi≤Q, for all i.0 ≤Yi≤Q, for all i.For all i, ifXi= 0,Di≠W.For all i, ifYi= 0,Di≠S.For all i, ifXi=Q,Di≠E.For all i, ifYi=Q,Di≠N.\nQ= 10.\nQ= 105.\nIn Sample Case #1, there is only one person, and they are moving north from\n  (5, 5). This means that all street corners with y ≥ 6 are possible\n  locations for the crepe cart. Of those possibilities, we choose the one with\n  lowest x ≥ 0 and then lowest y ≥ 6.\nIn Sample Case #2, there are four people, all moving toward location (2, 5).\n  There is no other location that has as many people moving toward it.\nIn Sample Case #3, six of the eight people are moving toward location (0, 4).\n  There is no other location that has as many people moving toward it.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with one line containing\n  two integersPandQ: the number of people, and the maximum\n  possible value of an x or y coordinate in Manhattan, as described above.\n  Then, there arePmore lines. The i-th of those lines contains two\n  integersXiandYi, the current location\n  (street corner) of a person, and a characterDi, the\n  direction that person is headed.Diis one of the uppercase\n  lettersN,S,E, orW,\n  which stand for north, south, east, and west, respectively.",
        "output_description": "For each test case, output one line containingCase #t: x y,\n  wheretis the test case number (starting from 1) andxandyare the horizontal and vertical coordinates\n  of the intersection where you believe the crepe cart is located.",
        "sample_input": "3\n1 10\n5 5 N\n4 10\n2 4 N\n2 6 S\n1 5 E\n3 5 W\n8 10\n0 2 S\n0 3 N\n0 3 N\n0 4 N\n0 5 S\n0 5 S\n0 8 S\n1 5 W",
        "sample_output": "Case #1: 0 6\nCase #2: 2 5\nCase #3: 0 4",
        "source": "2019\\round_1b\\manhattan_crepe_cart"
    },
    {
        "problem_name": "Bacterial Tactics",
        "problem_statement": "Becca and Terry are microbiologists who have a friendly rivalry. When they\n  need a break from their research, they like to play a game together. The game\n  is played on a matrix of unit cells withRrows andCcolumns.\n  Initially, each cell is either empty, or contains radioactive material.\nOn each player's turn, if there are no empty cells in the matrix, that player\n  loses the game. Otherwise, they choose an empty cell and place a colony of\n  bacteria there. Bacteria colonies come in two types: H (for \"horizontal\") and\n  V (for \"vertical\").\nWhenever a colony (of either type) tries to spread into a cell:\nNotice that it may be possible that all of a player's available moves would\n  cause them to lose the game, and so they are doomed. See the sample case\n  explanations below for examples of how the game works.\nBecca makes the first move, and then the two players alternate moves\n  until one of them loses the game. If both players play optimally, who will\n  win? And, if Becca will win, how many distinct winning opening moves does she\n  have? (Two opening moves are distinct if and only if they either use\n  different cells, or different kinds of colony, or both.)\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing two\n  integersRandC: the number of rows and columns, respectively,\n  in the matrix. Then, there areRmore rows ofCcharacters\n  each. The j-th character on the i-th of these lines represents the j-th\n  column of the i-th row of the matrix. Each character is either.(an empty cell) or#(a cell with radioactive\n  material).\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyis an integer: either0if Becca will not win, or, if Becca will\n  win, the number of distinct winning opening moves she can make, as described\n  above.\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.\n1 ≤R≤ 4.1 ≤C≤ 4.\n1 ≤R≤ 15.1 ≤C≤ 15.\nIn Sample Case #1, Becca cannot place an H colony in the southwest empty cell\n  or a V colony in the northeast empty cell, because those would spread onto\n  a radioactive cell and Becca would lose. She has only two possible strategies\n  that do not cause her to lose immediately:\nIf Becca chooses strategy 1, Terry can place a V colony in the southwest\n  empty cell. If Becca chooses strategy 2, Terry can place an H colony in the\n  northeast empty cell. Either way, Becca has no empty cells to choose from on\n  her next turn, so she loses and Terry wins.\nIn Sample Case #2, any of Becca's opening moves would cause a mutation.\nIn Sample Case #3, five of Becca's possible opening moves would cause a\n  mutation, but the other seven are winning. She can place an H colony in any\n  of the cells of the second row, or she can place a V colony in any of the\n  cells of the second column. In either case, she leaves two disconnected sets\n  of 1 or 2 cells each. In each of those sets, only one type of colony can be\n  played, and playing it consumes all of the empty cells in that set. So,\n  whichever of those sets Terry chooses to consume, Becca can consume the other,\n  leaving Terry with no moves.\nIn Sample Case #4, both of Becca's two distinct possible opening moves are\n  winning.\nIn Sample Case #5, Becca has no possible opening moves.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing two\n  integersRandC: the number of rows and columns, respectively,\n  in the matrix. Then, there areRmore rows ofCcharacters\n  each. The j-th character on the i-th of these lines represents the j-th\n  column of the i-th row of the matrix. Each character is either.(an empty cell) or#(a cell with radioactive\n  material).",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyis an integer: either0if Becca will not win, or, if Becca will\n  win, the number of distinct winning opening moves she can make, as described\n  above.",
        "sample_input": "5\n2 2\n..\n.#\n4 4\n.#..\n..#.\n#...\n...#\n3 4\n#.##\n....\n#.##\n1 1\n.\n1 2\n##",
        "sample_output": "Case #1: 0\nCase #2: 0\nCase #3: 7\nCase #4: 2\nCase #5: 0",
        "source": "2019\\round_1c\\bacterial_tactics"
    },
    {
        "problem_name": "Power Arrangers",
        "problem_statement": "Go, go, Power Arrangers! Everyone loves this team of five superhero high\n  school students who wear the letters A, B, C, D, and E. When they stand side\n  by side to confront evil monsters, they arrange their team in one of 120\n  possible different left-to-right orders, giving them various different\n  tactical superpowers. They are even more popular than the Teenage Permutant\n  Ninja Turtles!\nSome critics of the show claim that the team only has its arrangment gimmick\n  so that the owners of the show can sell 120 separate sets of 5 action figures,\n  each of which features the team in a different left-to-right order, glued to\n  a base so that the set cannot be rearranged. As an avid Power Arrangers fan,\n  you have collected 119 of these sets, but you do not remember which set you\n  are missing. Your 119 sets are lined up horizontally along a shelf, such that\n  there are a total of 119 × 5 = 595 action figures in left-to-right\n  order. You do not remember how the sets are arranged, but you know that\n  the permutation of the sets is selected uniformly at random from all possible\n  permutations, and independently for each case.\nYou do not want to waste any time figuring out which set you are missing, so\n  you plan to look at the letters on at mostFfigures on the shelf. For\n  instance, you might choose to look at the letter on the eighth figure from\n  the left, which would be the third figure from the left in the second set\n  from the left. When looking at a figure, you only get the letter from that\n  one figure; the letters are hard to see, and the different team members look\n  very similar otherwise!\nAfter checking at mostFfigures, you must figure out which of the\n  sets is missing, so you can complete your collection and be ready to face any\n  possible evil threat!\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing two integersT, the number of test cases, andF, the number of figures you\n  are allowed to inspect per test case. Then, you need to processTtest\n  cases.\nWithin each test case, the missing set of figures is chosen uniformly at\n  random from all possible sets, and the order of the remaining sets is chosen\n  uniformly at random from all possible orders as well. Every choice is made\n  independently of all other choices and of your inputs.\nIn each test case, your program will process up toF+ 1 exchanges\n  with our judge. You may make up toFexchanges of the following form:\nThen, after you have made as many of theFexchanges above as you\n  want, you must make one more exchange of the following form:\nAfter the judge sendsNto your input stream (because of either\n  invalid data or an incorrect answer), it will not send any other output.\n  If your program continues to wait for the judge after receivingN, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n1 ≤T≤ 50.Time limit: 40 seconds per test set.Memory limit: 1GB.The missing set, and the order of the remaining sets, are chosen uniformly\n  and independently at random.\nF= 475.\nF= 150.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThis interaction corresponds to Test set 1.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_1c\\power_arrangers"
    },
    {
        "problem_name": "Robot Programming Strategy",
        "problem_statement": "After many sleepless nights, you have finally finished teaching a robotic arm\n  to make the hand gestures required for the Rock-Paper-Scissors game. Now you\n  just need to program it to compete in the upcoming robot tournament!\nIn this tournament, each robot uses a program that is a series of moves, each\n  of which must be one of the following:R(for \"Rock\"),P(for \"Paper\"), orS(for \"Scissors\"). Paper\n  beats Rock and loses to Scissors; Rock beats Scissors and loses to Paper;\n  Scissors beats Paper and loses to Rock.\nWhen two robots face off in a match, the first robot to play a winning\n  move wins. To start, each robot plays the first move of its program. If the\n  two moves are different, one of the moves beats the other and thus one of the\n  robots wins the match. If the moves are the same, each robot plays the next\n  move in its program, and so on.\nWhenever a robot has reached the end of its program and needs its next move,\n  it returns to the start of its program. So, for example, the fifth move of a\n  robot with the programRSSPwould beR. If a match\n  goes on for over a googol (10100) of moves, the judges flip a fair\n  coin to determine the winner.\nOnce a match is over, the winning robot resets, so it has no memory of the\n  that match. In its next match, it starts by playing the first move of its\n  program, and so on.\nThe tournament is played in K rounds and has a single-elimination \"bracket\"\n  structure. There are N = 2Krobots in total, numbered 0 through\n  N - 1. In the first round, robot 0 plays a match against robot 1, robot 2\n  plays a match against robot 3, and so on, up to robots N - 2 and N - 1. The\n  losers of those matches are eliminated from the tournament. In the second\n  round, the winner of the 0-1 match faces off against the winner of the 2-3\n  match, and so on. Once we get to the K-th round, there is only one match, and\n  it determines the overall winner of the tournament.\nAll of the other contestants are so confident that they have already publicly\n  posted their robots' programs online. However, the robots have not yet been\n  assigned numbers, so nobody knows in advance who their opponents will be.\n  Knowing all of the other programs, is it possible for you to write a program\n  that isguaranteedto win the tournament, no matter how the robot\n  numbers are assigned?\nThe first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with one line containing\n  an integerA: the number of adversaries (other robots) in the\n  tournament. Then, there areAmore lines; the i-th of these contains\n  a stringCiof uppercase letters that represent the program\n  of the i-th opponent's robot.\nFor each test case, output one line containingCase #x: y. If\n  there is a string of between 1 and 500 characters that is guaranteed to\n  win the tournament, as described above, thenyshould be the\n  string of uppercase letters representing that program. Otherwise,yshould beIMPOSSIBLE, in uppercase letters.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.Each character inCiis uppercaseR,P, orS, for all i.A= 2K- 1 for some integer K ≥ 1.\n1 ≤A≤ 7.Ciis between 1 and 5 characters long, for all i.\n1 ≤A≤ 255.Ciis between 1 and 500 characters long, for all i.\nNote: Although all the opponents in each of these sample cases have programs\n  of the same length, this is not necessarily the case. Opponents within a\n  test case might have programs of different lengths.\nIn Sample Case #1, there is only one opponent, with the programRS. Our answer matches the opponent's moves for a while, and\n  the opponent loops through its program several times. As is starts its fourth\n  pass through its program, we beat it withP. Other valid\n  solutions exist, likeP,RR, andR.\nIn Sample Case #2, there are three opponents, with the programsR,P, andS. It is up to you to figure\n  out why this case isIMPOSSIBLE!\nIn Sample Case #3, all seven opponents use the same program. Using the\n  programP, for example, guarantees that you will win. Remember\n  that each robot begins at the start of its program at the start of each match\n  against a new opponent.\n",
        "input_description": "The first line of the input gives the number of test cases,T;Ttest cases follow. Each test case begins with one line containing\n  an integerA: the number of adversaries (other robots) in the\n  tournament. Then, there areAmore lines; the i-th of these contains\n  a stringCiof uppercase letters that represent the program\n  of the i-th opponent's robot.",
        "output_description": "For each test case, output one line containingCase #x: y. If\n  there is a string of between 1 and 500 characters that is guaranteed to\n  win the tournament, as described above, thenyshould be the\n  string of uppercase letters representing that program. Otherwise,yshould beIMPOSSIBLE, in uppercase letters.",
        "sample_input": "3\n1\nRS\n3\nR\nP\nS\n7\nRS\nRS\nRS\nRS\nRS\nRS\nRS",
        "sample_output": "Case #1: RSRSRSP\nCase #2: IMPOSSIBLE\nCase #3: P",
        "source": "2019\\round_1c\\robot_programming_strategy"
    },
    {
        "problem_name": "Contransmutation",
        "problem_statement": "Last year, we asked you to help usconvert expensive metals into lead.\n  (You do not need to know anything about the previous problem to solve this\n  one.) But your country's leader is still greedy for more lead!\nThere areMmetals known in the world; lead is metal number 1 on your\n  periodic table. Your country's leader has asked you to use the metals in the\n  treasury to make as much lead as possible.\nFor each metal (including lead), you know exactly one formula that lets you\n  destroy one gram of that metal and create one gram each of two metals.\n  (It is best not to think too much about the principle of mass conservation!)\n  Note that it is possible that the formula for the i-th metal might produce\n  the i-th metal as one of the products. The formulas do not work with partial\n  grams. However, you can use each formula as often as you would like (or not\n  at all), as long as you have a gram of the required ingredient.\nIf you make optimal choices, what is the largest number of grams of lead you\n  can end up with, or is it unbounded? If it is not unbounded: since the output\n  can be a really big number, we only ask you to output the remainder of\n  dividing the result by the prime 109+7 (that is, 1000000007).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerM: the number of metals known in the world. Then there areMmore lines with two integersRi1andRi2each; the i-th of these lines, counting starting from 1, indicates that you can\n  destroy one gram of metal i to create one gram of metalRi1and\n  one gram of metalRi2. Finally, there is one line withMintegersG1,G2, ...,GM;Giis the number of grams of metal i in the treasury. Lead\n  is metal 1.\nFor each test case, output one line containingCase #x: ywherexis the test case number (starting from 1). If there is no\n  bound on the maximum amount of lead that can be produced,ymust beUNBOUNDED. Otherwise,ymust be\n  the largest amount of lead, in grams, that you can end up with, modulo the\n  prime 109+7 (that is, 1000000007).\n1 ≤Ri1<Ri2≤M,\n    for all i.Time limit: 20 seconds per test set.Memory limit: 1GB.\n1 ≤T≤ 100.2 ≤M≤ 10.0 ≤Gi≤ 10, for all i.\n1 ≤T≤ 100.2 ≤M≤ 100.0 ≤Gi≤ 109, for all i.\n1 ≤T≤ 5.2 ≤M≤ 105.0 ≤Gi≤ 109, for all i.\nIn Sample Case #1, you have one formula that turns 1 gram of lead into 1\n  gram of lead and 1 gram of the second metal, and another formula that turns\n  1 gram of the second metal into 1 gram of lead and 1 gram of the second\n  metal. You can alternate between these formulas to produce as much of both\n  metals as you want.\nSample Case #2 has the same formulas as Sample Case #1, but you have no\n  metals to start with!\nIn Sample Case #3, none of the formulas help you produce more lead, so you\n  cannot end up with more lead than you started with.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with an integerM: the number of metals known in the world. Then there areMmore lines with two integersRi1andRi2each; the i-th of these lines, counting starting from 1, indicates that you can\n  destroy one gram of metal i to create one gram of metalRi1and\n  one gram of metalRi2. Finally, there is one line withMintegersG1,G2, ...,GM;Giis the number of grams of metal i in the treasury. Lead\n  is metal 1.",
        "output_description": "For each test case, output one line containingCase #x: ywherexis the test case number (starting from 1). If there is no\n  bound on the maximum amount of lead that can be produced,ymust beUNBOUNDED. Otherwise,ymust be\n  the largest amount of lead, in grams, that you can end up with, modulo the\n  prime 109+7 (that is, 1000000007).",
        "sample_input": "3\n2\n1 2\n1 2\n1 0\n2\n1 2\n1 2\n0 0\n4\n2 4\n3 4\n2 4\n2 3\n10 10 10 10",
        "sample_output": "Case #1: UNBOUNDED\nCase #2: 0\nCase #3: 10",
        "source": "2019\\round_2\\contransmutation"
    },
    {
        "problem_name": "New Elements: Part 1",
        "problem_statement": "The first two paragraphs (not counting this one) of this problem and \"New Elements: Part 2\"\nare identical. The problems can otherwise be solved independently; you do not need to read\nor solve one in order to read or solve the other.\nMuriel is on the path to discovering two new elements that she has named Codium and Jamarium.\nShe has not been able to isolate them yet, but she wants to start investigating some\nimportant properties, like their atomic weights, by indirect means.\nSince Muriel is working with a single isotope of Codium and a single isotope of Jamarium,\ntheir atomic weights are strictly positive integers.\nMuriel managed to createNdifferent molecules, each of which contains one or\nmore atoms of Codium and one or more atoms of Jamarium, and no other elements.\nFor each molecule, she knows how many atoms of each element are present in it. The molecular\nweight of a molecule is the sum of the atomic weights of all the atoms it contains.\nAs a first step towards figuring out exact molecular weights for the molecules and atomic weights\nfor the two elements, Muriel wants to sort the molecules by strictly increasing molecular weight.\nTo assess the difficulty of that task, she wants to know how many orders are valid\nconsidering only the information she has right now. An ordering of the molecules is considered\nvalid if there exist values for the atomic weights of Codium and Jamarium such that the ordering isstrictlyincreasing in molecular weight.\nTo give an example, we represent each molecule by the ordered pair of the number of\natoms of Codium and Jamarium it contains. If Muriel has 3 molecules represented\nby (1, 1), (2, 1) and (1, 2), there are two possible orderings that can be strictly increasing in\nmolecular weight:\n(1, 1), (1, 2), (2, 1) and (1, 1), (2, 1), (1, 2). The first ordering is valid for any\nassignment of atomic weights in which Codium is the heaviest of the two elements, and\nthe second is valid for any assignment in which Jamarium is the heaviest. The only case\nremaining is when both Codium and Jamarium have the same atomic weight, in which case (1, 2)\nand (2, 1) have the same molecular weight, so no strictly increasing ordering can be\nproduced for that scenario.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nThe first line of a test case contains a single integerN, the number of molecules. Each\nof the nextNlines describes a different molecule with two integersCiandJithat represent the number of Codium and Jamarium atoms in the i-th\nmolecule, respectively.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the total number of valid orderings\nas defined above.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.1 ≤Ci≤ 109, for all i.1 ≤Ji≤ 109, for all i.(Ci,Ji) ≠ (Cj,Jj)\nfor all i ≠ j. (All molecules are different.)\n2 ≤N≤ 6.\n2 ≤N≤ 300.\nSample Case #1 is explained in the statement.\nIn Sample Case #2, the two valid orderings are (1, 2), (2, 1), (2, 4), (4, 2) and\n  (2, 1), (1, 2), (4, 2), (2, 4). Notice that the ordering (1, 2), (2, 1), (4, 2), (2, 4)\n  is invalid because if (1, 2) is strictly less heavy than (2, 1), then (2, 4),\n  which is exactly twice as heavy as (1, 2), must be strictly less heavy than (4, 2), which\n  is exactly twice as heavy as (2, 1).\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nThe first line of a test case contains a single integerN, the number of molecules. Each\nof the nextNlines describes a different molecule with two integersCiandJithat represent the number of Codium and Jamarium atoms in the i-th\nmolecule, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the total number of valid orderings\nas defined above.",
        "sample_input": "3\n3\n1 1\n1 2\n2 1\n4\n1 2\n2 4\n2 1\n4 2\n3\n1 2\n1 3\n2 3",
        "sample_output": "Case #1: 2\nCase #2: 2\nCase #3: 1",
        "source": "2019\\round_2\\new_elements_part_1"
    },
    {
        "problem_name": "New Elements: Part 2",
        "problem_statement": "The first two paragraphs (not counting this one) of this problem and \"New Elements: Part 1\"\nare identical. The problems can otherwise be solved independently; you do not need to read\nor solve one in order to read or solve the other.\nMuriel is on the path to discovering two new elements that she has named Codium and Jamarium.\nShe has not been able to isolate them yet, but she wants to start investigating some\nimportant properties, like their atomic weights, by indirect means.\nSince Muriel is working with a single isotope of Codium and a single isotope of Jamarium,\ntheir atomic weights are strictly positive integers.\nMuriel managed to createNdifferent molecules, each of which contains one or\nmore atoms of Codium and one or more atoms of Jamarium, and no other elements.\nFor each molecule, she knows how many atoms of each element are present in it. The molecular\nweight of a molecule is the sum of the atomic weights of all the atoms it contains.\nAs a first step, Muriel sorted the molecules by strictly increasing molecular weight. Now she\nwants to find out possible integer values for the atomic weights of both Codium and Jamarium that\nare consistent with the ordering. Since she is aware there could be many consistent pairs of\nvalues, she wants one that minimizes the atomic weight of Codium. If there are multiple\npairs in which Codium's atomic weight is minimum, she wants the one in which Jamarium's\natomic weight is minimum.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nThe first line of a test case contains a single integerN, the number of molecules. Each\nof the nextNlines describes a different molecule with two integersCiandJithat represent the number of Codium and Jamarium atoms in the i-th\nmolecule, respectively. The molecules are given in strictly increasing order of molecular\nweight.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyisIMPOSSIBLE(in uppercase) if there is\nno pair of integer atomic weights that would make the order of the molecules strictly\nincreasing in molecular weight. Otherwise,yshould be two integersc jwhere c is the atomic weight of Codium and j is the atomic weight of\nJamarium, chosen according to the rules above.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤N≤ 10.(Ci,Ji) ≠ (Cj,Jj)\nfor all i ≠ j. (All molecules are different.)\n1 ≤Ci≤ 100, for all i.1 ≤Ji≤ 100, for all i.\n1 ≤Ci≤ 109, for all i.1 ≤Ji≤ 109, for all i.\nIn Sample Case #1, the difference between the last two molecules is having an extra\n  atom of one element or the other. Given that the one having the extra Codium is heavier\n  overall, we conclude that Codium must be heavier than Jamarium. The values 2 and 1 for\n  the atomic weights of Codium and Jamarium make the molecular weights\n  1 × 2 + 1 × 1 = 3, 1 × 2 + 2 × 1 = 4, and\n  2 × 2 + 1 × 1 = 5, respecting the strict ordering. Since Codium is heavier\n  than Jamarium in this case, 2 is Codium's minimum atomic weight, and 1 is of course\n  Jamarium's minimum atomic weight.\nLet a, b, c and d be the molecular weights of the molecules in Sample Case #2,\n  in increasing order of molecular weight. By their atom contents, d = 2 × a\n  and c = 2 × b. It follows from a < b that d = 2 × a < 2 × b = c,\n  which means there is no pair of values for the atomic weights that would make the ordering\n  strictly increasing.\nIn Sample Case #3, notice that the molecules happen to be sorted in strictly increasing order of\n  total number of atoms. Therefore, assigning both elements an atomic weight of 1 makes the atomic\n  weights be sorted in strictly increasing order.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nThe first line of a test case contains a single integerN, the number of molecules. Each\nof the nextNlines describes a different molecule with two integersCiandJithat represent the number of Codium and Jamarium atoms in the i-th\nmolecule, respectively. The molecules are given in strictly increasing order of molecular\nweight.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1), andyisIMPOSSIBLE(in uppercase) if there is\nno pair of integer atomic weights that would make the order of the molecules strictly\nincreasing in molecular weight. Otherwise,yshould be two integersc jwhere c is the atomic weight of Codium and j is the atomic weight of\nJamarium, chosen according to the rules above.",
        "sample_input": "3\n3\n1 1\n1 2\n2 1\n4\n1 2\n2 1\n4 2\n2 4\n3\n1 2\n1 3\n2 3",
        "sample_output": "Case #1: 2 1\nCase #2: IMPOSSIBLE\nCase #3: 1 1",
        "source": "2019\\round_2\\new_elements_part_2"
    },
    {
        "problem_name": "Pottery Lottery",
        "problem_statement": "The Pottery Palace is going to run a lottery featuring some valuable vases by\n  the artist Cody-Jamal. The lottery works as follows:\nYou have been hired to test the security of the lottery, and you will\n  participate in some trial runs. The company will always assign you the\n  number 100 — that is, you replace player 100.\nYou have found some ways to tamper with the lottery at night, but security\n  is tight, so you can only do so much! Specifically, after each of the first\n  99 days of the lottery, you may do exactlyoneof the following:\nYou may perform different actions on different nights, and you may choose\n  dynamically: you do not need to decide on all of your actions in advance.\nOn the 100th day, it is your turn to insert your token into a vase of your\n  choice (you do not need to choose uniformly at random). You cannot perform\n  any other actions on that day.\nYou know that if there is a winning vase with more than one token for the same player,\n  it will be obvious that cheating has occurred and nobody will win. However, it does not\n  matter if other vases contain more than one token for the same player because the\n  organizers never see those tokens.\nYour goal is to be a winner in at least 90% of the test cases.\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing a single integerTindicating the number of test cases. Then, you need to processTtest cases.\nAt the start of a test case, the judge outputs one line with one integer:\n  the number of the current day. (The judge starts on day 1, and on the\n  i-th day, it prints i.) After your program reads the integer, it should write\n  a line containing two integers V and P, with 1 ≤ V ≤ 20, and\n  0 ≤ P ≤ 100. The judge will interpret these as follows:\nNotice that on turn 100, you must put your own token in, so P must be 100.\nRemember that on the i-th day, for 1 ≤ i ≤ 99, the judge\n  simulates the action of the i-th player, as described in the statement. This\n  happens before your own action on that day.\nAfter you send your move for turn 100, your program should terminate if it\n  was the last test case; otherwise, it should start reading data for the next\n  test case. (Notice that the judge does not tell you whether you got each case\n  correct or incorrect.) The judge will only check whether you have enough\n  correct answers after you have attempted allTtest cases, so you\n  should not stop early! For example, if you answer the first 225 out of 250\n  cases correctly and then exit, or provide malformed input, your solution will\n  not be considered correct.\nIf your program outputs something illegal (e.g., gives an invalid value for P\n  or V, or tries to inspect a vase on turn 100), the judge will send\n  one line containing-1to your input stream, and it will not\n  send any other output after that. If your program continues to wait for the\n  judge after receiving-1, your program will time out, resulting\n  in a Time Limit Exceeded error. Notice that it is your responsibility to have\n  your program exit in time to receive a Wrong Answer judgment instead of a\n  Time Limit Exceeded error. As usual, if the total memory is exceeded, or your\n  program gets a runtime error, you will receive the appropriate judgment.\nT= 250.Time limit (for the entire test set): 40 seconds.Memory limit: 1GB.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_2\\pottery_lottery"
    },
    {
        "problem_name": "Datacenter Duplex",
        "problem_statement": "Two companies, Apricot Rules LLC and Banana Rocks Inc., are sharing the same datacenter.\n  The datacenter is a matrix ofRrows andCcolumns, with each cell containing\n  a single server tower. Each tower contains intellectual property belonging to exactly one of\n  the two companies.\nAt first, they built walls on the edges between cells assigned to different companies.\n  This allowed orthogonally adjacent cells belonging to the same company to remain connected.\n  Also, two cells x and y are considered connected if x is connected to a cell that is, directly\n  or indirectly, connected to y. With this definition, it was possible that two cells\n  assigned to the same company were not connected, which was unacceptable.\nBoth companies agreed to build narrow hallways running through cell corners that allow two\n  diagonally adjacent cells to be connected directly. Let us write (i, j) to represent the cell at\n  row i and column j. At most one narrow hallway can be built through any given vertex, which means\n  either (i, j) and (i + 1, j + 1) can be connected, or (i + 1, j) and (i, j + 1) can be connected,\n  or neither pair, but not both. Of course, only hallways between cells assigned to the same company\n  can be built.\nGiven a matrix where each cell is labeledAorBdepending\n  on which company it is assigned to, find a way to add\n  connections through diagonal adjacencies such that allAs are\n  connected and allBs are connected.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line containing\n  two integersRandC, the number of rows and columns of the\n  matrix representing the datacenter. Then, there areRmore\n  lines containingCcharacters each. The j-th character on the i-th of these linesMi,jis eitherAorB, indicating which company owns the cell at (i, j).\nFor each test case, first output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no way to assign the\n  diagonal connections such that theAcells are connected and\n  theBcells are connected,\n  orPOSSIBLEotherwise. Then, if you outputPOSSIBLE,\n  outputR- 1 more lines ofC- 1 characters each.\n  These characters must correspond to a valid arrangement as described in the statement above.\n  The j-th character of the i-th of those lines must be\\if cells (i, j)\n  and (i + 1, j + 1) are to be connected,/if cells (i + 1, j) and (i, j + 1)\n  are to be connected, or.if neither pair is to be connected.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.2 ≤C≤ 100.Mi,j= uppercaseAor uppercaseB,\n    for all i and j.Mi,j= uppercaseAfor at least one pair of i and j.Mi,j= uppercaseBfor at least one pair of i and j.\n2 ≤R≤ 4.\n2 ≤R≤ 100.\nIn Sample Case #1, the pair ofAcells and the pair ofBcells\n  need to be connected, but since both connections would have to cross the same vertex,\n  at most one of the connections can exist.\nIn Sample Case #2, the cells are already connected in the required way in the input,\n  so no additional connections are necessary. Note that you can add unnecessary valid\n  connections, so another valid answer would be//, but\\.would be wrong.\nIn Sample Case #3, there are also multiple solutions, one of which is displayed.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with one line containing\n  two integersRandC, the number of rows and columns of the\n  matrix representing the datacenter. Then, there areRmore\n  lines containingCcharacters each. The j-th character on the i-th of these linesMi,jis eitherAorB, indicating which company owns the cell at (i, j).",
        "output_description": "For each test case, first output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no way to assign the\n  diagonal connections such that theAcells are connected and\n  theBcells are connected,\n  orPOSSIBLEotherwise. Then, if you outputPOSSIBLE,\n  outputR- 1 more lines ofC- 1 characters each.\n  These characters must correspond to a valid arrangement as described in the statement above.\n  The j-th character of the i-th of those lines must be\\if cells (i, j)\n  and (i + 1, j + 1) are to be connected,/if cells (i + 1, j) and (i, j + 1)\n  are to be connected, or.if neither pair is to be connected.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_3\\datacenter_duplex"
    },
    {
        "problem_name": "Napkin Folding",
        "problem_statement": "Chalk has been actively traveling the world with his friends taking pictures\n  in all the coolest places. Most recently, he made his way to Europe, where he\n  studied the history ofnapkin folding.\n  Ever since, Chalk has been collecting a wide variety of napkins to\n  practice the art of napkin folding.\nChalk's napkins can be defined assimple polygons.\n  A simple polygon is a polygon in which no edges intersect except for adjacent\n  edges which meet at their shared vertex. Each vertex of the polygon is on\n  exactly two edges.\nChalk folds his napkins by first drawing afolding patternon them. A\n  folding pattern is a set ofK-1 line segments\n  which are drawn on the napkin. Each line segment connects two points with rational\n  coordinates on the border of the polygon defining the napkin and is fully contained\n  in the polygon. No two line segments in a folding pattern may touch or overlap, except possibly at\n  common endpoints. A folding pattern ofK-1 line segments\n  splits the napkin intoKpolygonal regions. Two points\n  are in the same region if there exists some continuous line (not necessarily\n  straight) between them which does not intersect any edge of the polygon or any line segment in\n  the folding pattern — even at endpoints.\nChalk is only interested inneat folding patterns. A\n  folding pattern isneatif any two regions that\n  are adjacent to the same folding line segmentFaresymmetricwith\n  respect toF. This means that folding the napkin along\n  that line segment would result in the two regions lining up perfectly.\nThe following picture illustrates a neat folding pattern withK=8 regions.\n\nChalk has been successfully folding his collection of napkins using\n  neat folding patterns. But he has some napkins in his collection that\n  he has not been able to find a neat folding pattern for. For each\n  of those napkins, Chalk needs your help to find a neat folding pattern\n  withKregions or determine that no such neat folding pattern exists.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing two\n  integersNandK: the number of points in the polygon defining\n  Chalk's napkin and the number of regions to split the napkin into with a\n  neat folding pattern containingK-1 line segments.\nThe polygon defining the napkin is represented as a list of theNvertices, as encountered when traveling along the perimeter of the polygon\n  in the clockwise direction, with the first vertex being chosen arbitrarily.\n  The nextNlines represent that list. The i-th of these\n  contains two integersXiandYi,\n  indicating that the i-th point is located at\n  (Xi,Yi) in two-dimensional space.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisPOSSIBLEif it is possible to make a neat folding pattern\n  withKregions andIMPOSSIBLEotherwise.\nIf it is possible to make a neat folding pattern withKregions, outputK-1\n  more lines listing the segments of a neat folding pattern withKregions, in any order.\n  Each line should represent a different segment asAxAyBxBy, where\n  (Ax,Ay) and\n  (Bx,By) are the two endpoints\n  of the segment, in any order. Each ofAx,Ay,Bx, andByshould be in the\n  formN/DwhereNandDare positive\n  integers (written with no leading zeroes) sharing no common prime factors,\n  and representing the rational numberN/D. There\n  must be no whitespace betweenNand/, or between/andD.\nTime limit: 60 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.3 ≤N≤ 200.1 ≤Xi≤ 1000, for all i.1 ≤Yi≤ 1000, for all i.TheNpoints are given in clockwise order.No two adjacent edges of the polygon are collinear.The polygon is a simple polygon with strictly positive area.No two edges intersect except for adjacent edges at their shared endpoint.\nK= 2.\n2 ≤K≤ 10.\nNote: Sample 2 is not valid for Test set 1. Only Sample 1 will be tested prior to\n  running Test set 1 (the same way samples normally are). Moreover, Sample 2\n  willnotbe tested prior to running Test set 2.\nFor Sample Case #1, a neat folding pattern withK=2 can be drawn using any of\n  the 4 dashed lines:\n\nFor Sample Case #2, a neat folding pattern withK=2 can be drawn as follows:\n\nFor Sample Case #3, there are no neat folding patterns:\n\nFor Sample Case #4, there are two possible neat folding patterns withK=2:\n\nFor the test set 2 sample case, a neat folding pattern withK=8 can be drawn as follows:\n\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line containing two\n  integersNandK: the number of points in the polygon defining\n  Chalk's napkin and the number of regions to split the napkin into with a\n  neat folding pattern containingK-1 line segments.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisPOSSIBLEif it is possible to make a neat folding pattern\n  withKregions andIMPOSSIBLEotherwise.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_3\\napkin_folding"
    },
    {
        "problem_name": "Pancake Pyramid",
        "problem_statement": "You have just finished cooking for some diners at the Infinite House of\n  Pancakes. There areSstacks of pancakes in all, and you have arranged\n  them in a line, such that the i-th stack from the left (counting starting\n  from 1) hasPipancakes.\nYour supervisor was about to bring out the stacks to the customers, but\n  then it occurred to her that a picture of the stacks might make for a good\n  advertisement. However, she is worried that there might be too many stacks,\n  so she intends to remove the L leftmost stacks and the R rightmost stacks,\n  where L and R are nonnegative integers such that L + R ≤S- 3.\n  (Notice that at least 3 stacks of pancakes will remain after the removal.)\nYour supervisor also thinks the remaining stacks will look aesthetically\n  pleasing if they have thepyramid property. A sequence of N stacks\n  of heights H1, H2, ... , HNhas the pyramid\n  property if there exists an integer j (1 ≤ j ≤ N) such that\n  H1≤ H2≤ ... ≤ Hj-1≤ Hjand\n  Hj≥ Hj+1≥ ... ≥ HN-1≥ HN.\n  (It is possible that this sequence might not look much like a typical\n  \"pyramid\" — a group of stacks of the same size has the pyramid\n  property, and so does a group in which the stack heights are nondecreasing\n  from left to right, among other examples.)\nNote that the sequence of stacks remaining after your supervisor removes\n  the L leftmost and R rightmost stacks might not yet have the pyramid\n  property... but you can fix that by adding pancakes to one or more of the\n  stacks! Thepyramidification costof a sequence of stacks is the\n  minimum total number of pancakes that must be added to stacks to give the\n  sequence the pyramid property.\nWhile your manager is carefully deciding which values of L and R to choose,\n  you have started to wonder what the sum of the pyramidification costs over\n  all valid choices of L and R is. Compute this sum, modulo the prime\n  109+7 (1000000007).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing one integerS: the number of stacks of pancakes. Then, there is one more line\n  containingSintegersP1,P2,\n  ...,PS. The i-th of these is the number of pancakes in the\n  i-th stack from the left.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the sum of the pyramidification costs over all valid choices of L and R,\n  modulo the prime 109+7 (1000000007).\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.1 ≤Pi≤ 109, for all i.\nS= 3000, for up to 20 test cases.3 ≤S≤ 500, for all remaining cases.\nS= 106, for up to 1 test case.S= 105, for up to 3 test cases.3 ≤S≤ 10000, for all remaining cases.\nIn Sample Case #1, your supervisor must choose L = 0 and R = 0, so that is\n  the only scenario you need to consider. The optimal strategy for that\n  scenario is to add a single pancake to the middle stack. Although the\n  resulting sequence of stacks looks flat, notice that it has the pyramid\n  property; in fact, any index will work as the j value.In Sample Case #2, here are all possible choices of L and R, the\n  corresponding remaining stacks, and what you should do in each scenario.L = 0, R = 0: H = [1 6 2 5 7]. The optimal solution is to add\n    four pancakes to the third stack and one pancake to the fourth stack. Then\n    we have [1 6 6 6 7], which has the pyramid property with j = 5.L = 0, R = 1: H = [1 6 2 5]. The optimal solution is to add\n    three pancakes to the third stack. Then we have [1 6 5 5], which has the\n    pyramid property with j = 2.L = 0, R = 2: H = [1 6 2]. This already has the pyramid property\n    with j = 2.L = 1, R = 0: H = [6 2 5 7]. The optimal solution is to add\n    four pancakes to the second stack and one pancake to the third stack. Then\n    we have [6 6 6 7], which has the pyramid property with j = 4.L = 1, R = 1: H = [6 2 5]. The optimal solution is to add three\n    pancakes to the second stack. Then we have [6 5 5], which has the pyramid\n    property with j = 1.L = 2, R = 0: H = [2 5 7]. This already has the pyramid property\n    with j = 3.So the answer is (5 + 3 + 0 + 5 + 3 + 0) modulo (109+ 7), which\n  is 16.In Sample Case #3, we only need to add extra pancakes to create the pyramid\n  property when L = 0 and R = 0. In that case, it is optimal to add 999999999\n  pancakes to each of the second and third stacks. (We hope the diners are\n  hungry!) So the answer is (999999999 + 999999999) modulo\n  (109+ 7) = 999999991.\nIn Sample Case #2, here are all possible choices of L and R, the\n  corresponding remaining stacks, and what you should do in each scenario.\nSo the answer is (5 + 3 + 0 + 5 + 3 + 0) modulo (109+ 7), which\n  is 16.\nIn Sample Case #3, we only need to add extra pancakes to create the pyramid\n  property when L = 0 and R = 0. In that case, it is optimal to add 999999999\n  pancakes to each of the second and third stacks. (We hope the diners are\n  hungry!) So the answer is (999999999 + 999999999) modulo\n  (109+ 7) = 999999991.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line containing one integerS: the number of stacks of pancakes. Then, there is one more line\n  containingSintegersP1,P2,\n  ...,PS. The i-th of these is the number of pancakes in the\n  i-th stack from the left.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the sum of the pyramidification costs over all valid choices of L and R,\n  modulo the prime 109+7 (1000000007).",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_3\\pancake_pyramid"
    },
    {
        "problem_name": "Zillionim",
        "problem_statement": "Zillionim is a turn-based game for two players. Initially, 1012coins are\n  arranged end-to-end in a single line, numbered from 1 to 1012from left to right.\n  During a turn, a player must select 1010consecutive coins and remove them.\n  Two coins that were not originally consecutive do not become consecutive even if all of\n  the coins in between them are removed.\nOn their turn, a player makes a valid move if possible, and then it is their opponent's turn.\n  If a player cannot make a valid move on their turn, they lose the game (and the opponent wins\n  the game).\nBecause our engineers are still hard at work training our machine learning model to play\n  Zillionim, we have created a simple AI that plays Zillionim by making random moves.\n  The AI always gets the first turn.\n  On each of the AI's turns, the AI determines all valid moves and chooses one of them uniformly\n  at random.\nCan you beat this AI... at least most of the time?\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing two integersT, the number of test cases, andW, the minimum number of games you need to win\n  for your solution to be considered correct. Then, you need to processTtest cases,\n  each of which is a single game of Zillionim.\nEach test case is processed by making exchanges with the judge until one player wins\n  the game. For each exchange, the judge first outputs a single line with a\n  single integerP, to be interpreted as follows:\nAfter receiving a positive integerP, you should send back a single line with a positive\n  integer Q (1 ≤ Q ≤ 1012- 1010+ 1)\n  representing that you are removing coins numbered Q, Q + 1, ..., Q + 1010- 1.\n  Each of these coins must not have been previously removed during the current game.\nAfter the judge sends a-2or-3, if it was the last game,\n  the judge will terminate and so should your program. Otherwise, the judge will proceed\n  to send data corresponding to the first exchange of the next game. The judge\n  will not check how many games you have won or lost until all games have been processed correctly.\n  For example, if you winT- 1 games and then send malformed data during the last game,\n  you will receive a Wrong Answer verdict, regardless of the value ofW.\nAfter receiving a-1, your program should terminate to receive a\n  Wrong Answer verdict. If your program continues to wait for the judge after receiving-1, your program will time out, resulting in a Time Limit Exceeded error.\n  Notice that it is your responsibility to have\n  your program exit normally and within the time limit to receive a Wrong Answer verdict\n  instead of a Runtime Error or Time Limit Exceeded.\nThe seed for the random generator is predetermined (and is different) for each game.\n  This means that two submissions that make the exact same sequence of moves in a given game\n  will receive the exact same sequence of moves from the AI for that game. It also means the play\n  of the AI in a game does not depend, even in the pseudo-random generation sense, on the\n  plays made in previous games within the same test set.\nTime limit: 50 seconds per test set.Memory limit: 1GB.T= 500.-3 ≤P≤ 1012- 1010+ 1.P≠ 0.Prepresents a valid play or valid information about the game's status,\n  as explained above.\nW= 300.\nW= 475.\nW= 499.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nFor simplicity, the following interaction uses 50 coins in total instead of 1012, and\n  each move removes 10 consecutive coins instead of 1010. The rules are otherwise the\n  same.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\round_3\\zillionim"
    },
    {
        "problem_name": "Board Meeting",
        "problem_statement": "Note that it is not necessary to know anything about the rules of chess to\n    solve this problem.\nThere are N kings on an infinite chessboard (two-dimensional grid), located\n  in cells with coordinates (X1, Y1),\n  (X2, Y2), ..., (XN, YN). Both\n  N and the kings' coordinates are unknown to you. However, you do know the\n  following things:\nThe kings want to meet in a single cell of the board. If some cell (X, Y)\n  were to be chosen as the meeting cell, then in order to get there, the i-th\n  king would use a number of moves equal to the maximum of the absolute values\n  of the differences of coordinates between its cell and the meeting cell:\n  max(|X-Xi|,|Y-Yi|). The total number of moves used by\n  all kings is thus equal to the sum of those maximums over all values of i.\n  Note that it is not relevant to this problem exactly how the kings move on\n  the board — only the source and destination cells matter, and the\n  number of moves can always be computed using the above formula.\nThis problem has two phases. In the first phase, you may repeatedly do the\n  following: propose a meeting location (A, B) (with each of A and B between\n  -10×Mand 10×M, inclusive), and have the judge tell\n  you the total number of moves the kings would use to get there — the\n  sum (over all i) of max(|Xi-A|,|Yi-B|). You can have at\n  mostRsuch exchanges with the judge, choosing your values of A and\n  B each time. Note that the kings do not actually move, so their locations\n  (Xi, Yi) stay the same for all requests within one test\n  case.\nIn the second phase, the roles are swapped: the judge gives you a meeting\n  cell location (C, D) (with each of C and D between -10×Mand\n  10×M, inclusive), and you must respond with the total number of\n  moves the kings would use to get there, assuming that the kings are in the\n  same locations as in the first phase. There are at mostRsuch\n  exchanges, and you must correctly respond to all of the judge's requests.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing four integersT,Nmax,MandR: the number of test\n  cases, the maximum number of kings, the maximum absolute value for any\n  coordinate for any king, and the maximum number of requests per phase,\n  respectively. (Note that the values ofMandRare fixed,\n  and are provided as input only for convenience; see the Limits section for\n  more details.) Then, you need to processTtest cases.\nIn each test case, there are two phases. In the first phase, the i-th exchange\n  is as follows:\nYou may initiate at mostRsuch exchanges in this phase. If you make\n  more thanRexchanges, or send a request that the judge can not parse\n  or is out of bounds, the judge responds with one line with a single stringERROR.\nTo end the first phase and switch to the second phase, you must send one line\n  with the stringREADY(the case does not matter), to which the\n  judge responds with the first request of the second phase.\nIn the second phase, the i-th exchange is as follows:\nThe judge is guaranteed to send at least 1 and at mostRsuch\n  requests. If you send an answer that is incorrect or unparseable, the judge\n  responds withERRORas described above. If you answer all of the\n  requests correctly, the judge sends one line with a single stringDONE, at which point your program should initiate the next\n  test case, or terminate with no error if allTtest cases have been\n  handled.\nAfter the judge sends a line withERROR, it does not send any\n  other output. If your program continues to wait for the judge after receivingERROR, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nThe number and location of the kings, as well as the number and positions of\n  the requests that the judge sends during the second phases, are chosen before\n  any exchanges occur.\nTime limit: 60 seconds per test set.Note that a program that just makes valid exchanges with the judge (and\n    does no other processing) takes the following time in our environment:\n    ~13 seconds for C++, ~24 seconds for Java, ~19 seconds\n    for Python and Go.Memory limit: 1GB.1 ≤T≤ 15.M= 106.-M≤ Xi≤M, for all i.-M≤ Yi≤M, for all i.The pairs (Xi, Yi) are distinct.-10×M≤Ci≤ 10×M,\n    for all i.-10×M≤Di≤ 10×M,\n    for all i.R= 1000.\nNmax= 1.\nNmax= 10.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nNote that the following sample interaction is for test set 1, in which there\n  is always exactly one king.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2019\\world_finals\\board_meeting"
    },
    {
        "problem_name": "Go To Considered Helpful",
        "problem_statement": "Marlin is a fish who lost his son and is trying to find him. Fortunately, he ran into Cynthia,\na turtle, as she swam around with her brothers, Wally and Seymour. Cynthia knows exactly where\nMarlin needs to go, and she can be very precise in giving directions. While Marlin is smart and\ncan follow them perfectly, keeping track of a long list of directions can be problematic.\nCynthia needs to find a way to make the list of directions short.\nMarlin lives in a matrix ofRrows andCcolumns. Some cells of the\nmatrix are dangerous and cannot be entered. Marlin and his son are currently in\ndifferent non-dangerous cells. Marlin's son never moves to a different cell.\nCynthia decided to give Marlin directions in the form of a program consisting\nof a list of instructions, each on a single line. Each instruction is of one of\n5 types:\nAfter executing a line with any of the first 4 instructions, Marlin jumps to the next\nline on the list if there is one. If there is no next line,\nMarlin just stands still forever.\nFor example, if Marlin were following the program\nhe would move North (line 1), then East (2),\nthen jump to line 6 without physically moving (3), then move West (6),\nthen jump to line 4 (7), then move South (4), then jump to line 1 (5),\nthen move North (1), etc.\nIf at any point Marlin and his son are at the same cell, they will be reunited\nand Marlin will no longer follow any instructions. Cynthia the turtle wants to find out the\nsmallest number of lines in a program that would get Marlin to the same cell as his\nson, without him ever going into a dangerous cell or moving outside of the matrix\nboundaries. AllGinstructions must jump to existing lines in the program.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containingRandC, the number of\nrows and columns in the matrix. Then,Rlines follow containing a string ofCcharacters each. The j-th character of the i-th of these linesAijrepresents the cell in the i-th row and j-th column of the matrix. The character is#if the cell is dangerous, an uppercaseMif the cell is the one Marlin is currently\nat, an uppercaseNif the cell is the one Marlin's son is currently\nat and.if the cell is an unoccupied non-dangerous cell.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no program that would get Marlin to his son\nunder the conditions explained above, or the smallest number of instructions in such a\nprogram.\nMemory limit: 1GB.1 ≤T≤ 100.Aijis either#,., uppercaseMor uppercaseN, for all i and j.Aij=Mfor exactly one pair of i and j.Aij=Nfor exactly one pair of i and j.\nTime limit: 30 seconds.1 ≤R≤ 10.1 ≤C≤ 10.\nTime limit: 120 seconds.For at most 10 test cases:1 ≤R≤ 100.1 ≤C≤ 100.For the remaining test cases:1 ≤R≤ 50.1 ≤C≤ 50.\nBelow are some shortest programs for each of the possible sample case.\nNotice that even though the program must contain the smallest possible number of lines,\n  it is not required to minimize the number of moves that Marlin makes.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containingRandC, the number of\nrows and columns in the matrix. Then,Rlines follow containing a string ofCcharacters each. The j-th character of the i-th of these linesAijrepresents the cell in the i-th row and j-th column of the matrix. The character is#if the cell is dangerous, an uppercaseMif the cell is the one Marlin is currently\nat, an uppercaseNif the cell is the one Marlin's son is currently\nat and.if the cell is an unoccupied non-dangerous cell.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no program that would get Marlin to his son\nunder the conditions explained above, or the smallest number of instructions in such a\nprogram.",
        "sample_input": "5\n2 5\nN...#\n....M\n2 5\nN#...\n...#M\n5 5\nN..##\n#.###\n#...#\n##.##\n##..M\n5 5\n..N##\n#.###\n#...#\n##.##\n##..M\n3 3\n#M#\n###\n#N#",
        "sample_output": "Case #1: 4\nCase #2: 7\nCase #3: 5\nCase #4: 6\nCase #5: IMPOSSIBLE",
        "source": "2019\\world_finals\\go_to_considered_helpful"
    },
    {
        "problem_name": "Juggle Struggle: Part 1",
        "problem_statement": "The first two paragraphs (not counting this one) of this problem and \"Juggle Struggle: Part 2\"\nare identical. The problems can otherwise be solved independently; you do not need to read\nor solve one in order to read or solve the other.\nAs manager of the Graceful Chainsaw Jugglers group, you have decided to spice the show\nup a bit. Instead of having each juggler individually juggle their own chainsaws, you want\nthem to form pairs, with each pair throwing the chainsaws back and forth to each other.\nIn this new performance, 2 ×Njugglers will be on stage at the same\ntime, arranged intoNpairs, with each juggler belonging to exactly one pair.\nYou think the show will be more impressive if the chainsaws being juggled by different pairs of\njugglers are at risk of collision. Let the stage be a two-dimensional plane, and let the straight\nline segment in that plane that connects the positions of two jugglers in a pair be called the pair's\njuggling path. When two juggling paths instersect, we say the chainsaws juggled by those pairs are\nat risk of collision. We call the spatial positions and the pairings of the jugglers an\narrangement. An arrangement is magnificent if every two pairs of jugglers' chainsaws are at\nrisk of collision.\nAfter a lot of thinking and designing, you came up with a magnificent arrangement.\nYou wrote down the positions of the jugglers on the stage and the pairings of the jugglers\non a piece of paper. Unfortunately, a bad chainsaw throw cut the paper in half, and you have\nlost the half with the pairings.\nSince the stage decorations have already been designed based on the positions of the jugglers,\nthose positions cannot be changed. The show's highly anticipated debut is a mere few hours away,\nso you need to find a magnificent arrangement that works! Given every juggler's position on a\ntwo-dimensional stage, find a pairing of them that yields a magnificent arrangement.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with one line containing a single integerN, the number of pairs of\njugglers. Then, 2 ×Nlines follow. The i-th of these lines contains two integersXiandYi, representing the coordinates of the position of the\ni-th juggler.\nFor each test case, output one line containingCase #x: j1j2... j2 ×N, representing\nthat jugglers i andjiare to be paired together, for every i.\nNotice thatjji= i for every i.\nMemory limit: 1GB.-109≤Xi≤ 109, for all i.-109≤Yi≤ 109, for all i.No three juggler positions are collinear. (Note that this also implies that no two jugglers are in\n  the same position.)There exists at least one way to pair the jugglers such that the resulting arrangement\n  is magnificent.\nTime limit: 20 seconds.1 ≤T≤ 100.2 ≤N≤ 100.\nTime limit: 60 seconds.1 ≤T≤ 10.2 ≤N≤ 105.\nIn Sample Case #1, the jugglers' positions form a square. The only valid\n  solution is to pair up jugglers 1 and 3, and pair up jugglers 2 and 4.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with one line containing a single integerN, the number of pairs of\njugglers. Then, 2 ×Nlines follow. The i-th of these lines contains two integersXiandYi, representing the coordinates of the position of the\ni-th juggler.",
        "output_description": "For each test case, output one line containingCase #x: j1j2... j2 ×N, representing\nthat jugglers i andjiare to be paired together, for every i.\nNotice thatjji= i for every i.",
        "sample_input": "3\n2\n-1 -1\n-1 1\n1 1\n1 -1\n3\n1 2\n2 1\n2 3\n3 1\n3 3\n4 2\n3\n7 1\n1 1\n7 2\n5 5\n3 5\n1 2",
        "sample_output": "Case #1: 3 4 1 2\nCase #2: 6 5 4 3 2 1\nCase #3: 5 4 6 2 1 3",
        "source": "2019\\world_finals\\juggle_struggle_part_1"
    },
    {
        "problem_name": "Juggle Struggle: Part 2",
        "problem_statement": "The first two paragraphs (not counting this one) of this problem and \"Juggle Struggle: Part 1\"\nare identical. The problems can otherwise be solved independently; you do not need to read\nor solve one in order to read or solve the other.\nAs manager of the Graceful Chainsaw Jugglers group, you have decided to spice the show\nup a bit. Instead of having each juggler individually juggle their own chainsaws, you want\nthem to form pairs, with each pair throwing the chainsaws back and forth to each other.\nIn this new performance, 2 ×Njugglers will be on stage at the same\ntime, arranged intoNpairs, with each juggler belonging to exactly one pair.\nYou think the show will be more impressive if the chainsaws being juggled by different pairs of\njugglers are at risk of collision. Let the stage be a two-dimensional plane, and let the straight\nline segment in that plane that connects the positions of two jugglers in a pair be called the pair's\njuggling path. When two juggling paths instersect, we say the chainsaws juggled by those pairs are\nat risk of collision. We call the spatial positions and the pairings of the jugglers an\narrangement. An arrangement is magnificent if every two pairs of jugglers' chainsaws are at\nrisk of collision. That is, for the arrangement to be magnificent, each of theNjuggling path\nsegments must intersect each of the otherN-1 juggling path segments (but these intersections do\nnot necessarily all have to be in the same place).\nAfter some last minute fixes, you have what you think is a magnificent arrangement.\nGiven the rush to put it together, you want to write a checker that can determine whether it is\nindeed magnificent. If it is not, then at most 25 juggler pairs fail to intersect every other pair.\nYou want your checker to report a list of all those juggler pairs for inspection.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with one line containing a single integerN, the number of pairs of\njugglers. Then,Nlines follow. The i-th of these lines contains four integersXi,Yi,X'i,Y'i.\n(Xi,Yi) and (X'i,Y'i)\nare the coordinates of the positions of the two jugglers comprising the i-th juggler pair.\nFor each test case, output one line containingCase #x: y, whereyis uppercaseMAGNIFICENTif the input\nrepresents a magnificent arrangement. Otherwise,yshould be a strictly increasing\nlist of integers. Integer i should be on that list if and only if the juggling path\nof the i-th juggler pair fails to intersect at least one other juggling path.\nMemory limit: 1GB.-109≤Xi≤ 109, for all i.-109≤Yi≤ 109, for all i.-109≤X'i≤ 109, for all i.-109≤Y'i≤ 109, for all i.No three juggler positions are collinear. (Note that this also implies that no two jugglers\n  are in the same position.)For all but up to 25 pairs of jugglers, their juggling paths intersect allN- 1 other\n  juggling paths.Note:Theremay or may notexist a way to pair the jugglers such that\nthe resulting arrangement is magnificent.\nTime limit: 20 seconds.1 ≤T≤ 100.2 ≤N≤ 100.\nTime limit: 45 seconds.1 ≤T≤ 13.2 ≤N≤ 105.\nIn Sample Case #1, there are only two pairs, and their paths do not cross.\nIn Sample Case #2, the arrangement is magnificent: every pair's path crosses\n  every other pair's path.\nIn Sample Case #3, only pair 3's path crosses every other pair's path.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with one line containing a single integerN, the number of pairs of\njugglers. Then,Nlines follow. The i-th of these lines contains four integersXi,Yi,X'i,Y'i.\n(Xi,Yi) and (X'i,Y'i)\nare the coordinates of the positions of the two jugglers comprising the i-th juggler pair.",
        "output_description": "For each test case, output one line containingCase #x: y, whereyis uppercaseMAGNIFICENTif the input\nrepresents a magnificent arrangement. Otherwise,yshould be a strictly increasing\nlist of integers. Integer i should be on that list if and only if the juggling path\nof the i-th juggler pair fails to intersect at least one other juggling path.",
        "sample_input": "4\n2\n-1 -1 -1 1\n1 1 1 -1\n2\n-1 -1 1 1\n-1 1 1 -1\n4\n1 2 4 2\n2 1 3 1\n2 4 3 0\n3 3 2 3\n3\n1 1 2 2\n3 7 4 8\n8 3 9 3",
        "sample_output": "Case #1: 1 2\nCase #2: MAGNIFICENT\nCase #3: 1 2 4\nCase #4: 1 2 3",
        "source": "2019\\world_finals\\juggle_struggle_part_2"
    },
    {
        "problem_name": "Sorting Permutation Unit",
        "problem_statement": "You may have heard of Google's Tensor Processing Units, which are used to\n  build neural networks. However, there is one research area that is even\n  deeper and more important than machine learning: sorting!\nWe are working on a special new chip called the Sorting Permutation Unit,\n  which is very fast at applying permutations to arrays of integers. Formally,\n  a permutation is an ordering of the first n positive integers\np1, p2, ..., pn\nand applying it to an array of n integers\na1, a2, ..., an\nyields the new array\nap1, ap2, ...,\n  apn.\nFor example, applying the permutation 3, 1, 2, 4 to the array\n  99, 234, 45, 800 would yield the new array 45, 99, 234, 800.\nHowever, permutations are expensive to represent in the hardware, so the unit\n  can only have access to at mostPdistinct permutations. We need your\n  help figuring out what those permutations should be!\nGivenKarrays ofNintegers each, you must first specify up toPpermutations (of sizeN) of your choice. Then, for each of\n  thoseKinput arrays, you must provide one sequence of up toSinstructions (each of which is a permutation from your specified set). When\n  the instructions in this sequence are applied, in the given order, to the\n  array, they must yield an array sorted in nondecreasing order. In each of\n  yourKsequences of instructions, you may use each of yourPpermutations zero or more times (not necessarily consecutively).\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with four integersP,S,K, andN: the maximum number of\n  permutations allowed, the maximum number of instructions you are allowed to\n  use to sort each array, the number of arrays, and the number of integers in\n  each array. Then, there areKmore lines ofNintegersAi1,Ai2, ..,AiNeach, where the j-th integer on the i-th line,Aij,\n  represents the j-th value of the i-th array.\nFor each test case, first output the following, in this order:\nThen, outputKmore lines. The i-th of these gives the instructions\n  that you will apply to the i-th array given in the input. Each such line\n  must begin with one integer S', where 0 ≤ S' ≤S, and must\n  continue with S' integers X1, X2, ...,\n  XS', where 1 ≤ Xk≤ P' for all k.\n  Here, Xkrepresents that the k-th instruction you apply to the\n  i-th array is the Xk-th permutation (counting starting from 1) in\n  your list of permutations. These instructions must yield an array with\n  the elements of the i-th input array, sorted in nondecreasing order.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 10.S= 450.1 ≤K≤ 30.2 ≤N≤ 50.1 ≤Aij≤ 1000, for all i and j.\nP= 20.\nP= 5.\nIn Sample Case #1, we can define up toP= 20 permutations. One\n  viable strategy uses only these two:\nWe can handle the four arrays as follows:\nIn Sample Case #2, notice that we can use the same permutation instruction\n  more than once on the same array, if desired.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each begins with one line with four integersP,S,K, andN: the maximum number of\n  permutations allowed, the maximum number of instructions you are allowed to\n  use to sort each array, the number of arrays, and the number of integers in\n  each array. Then, there areKmore lines ofNintegersAi1,Ai2, ..,AiNeach, where the j-th integer on the i-th line,Aij,\n  represents the j-th value of the i-th array.",
        "output_description": "For each test case, first output the following, in this order:",
        "sample_input": "2\n20 450 4 3\n10 10 11\n17 4 1000\n999 998 997\n10 10 11\n20 450 5 5\n1 2 3 4 5\n2 3 4 5 1\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4",
        "sample_output": "Case #1:\n2\n3 1 2\n2 1 3\n0\n1 2\n2 2 1\n1 2\nCase #2:\n1\n5 1 2 3 4\n0\n1 1\n2 1 1\n3 1 1 1\n4 1 1 1 1",
        "source": "2019\\world_finals\\sorting_permutation_unit"
    },
    {
        "problem_name": "Won't sum? Must now",
        "problem_statement": "In 2016, it was shown that every positive integer can be written as the sum\n  of three or fewer palindromic terms. For the purposes of this problem, a\n  palindromic term is a string of digits (with no leading zeroes) that\n  represents a positive integer and reads the same forward and backward.\nGiven a positive integerS, find K palindromic terms that sum toS, such that K is minimized.\nThe first line of input gives the number of test cases,T.Tlines follow, each containing a positive integerS.\nFor each test case, output one line of the formCase #x: A1(if only one term is needed),Case #x: A1A2(if only two terms are needed), orCase #x: A1A2A3(if three terms are needed), wherexis the case number (counting starting from 1), each\n  Aiis a palindromic term (as described above), and the sum of the\n  Ais equalsS.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.\n1 ≤S≤ 1010.\n1 ≤S≤ 1040.\nIn Sample Case #1, the input is already a palindrome.\nIn Sample Case #2, note that99 99, for example, would also be\n  an acceptable answer. Even though there are multiple instances of99, they count as separate terms, so this solution uses the same\n  number of terms as191 7.\nAlso note that191 07,181 8 9,0110 88,101 97,7.0 191.0,\n  and-202 4, for example, would not be acceptable answers.\n",
        "input_description": "The first line of input gives the number of test cases,T.Tlines follow, each containing a positive integerS.",
        "output_description": "For each test case, output one line of the formCase #x: A1(if only one term is needed),Case #x: A1A2(if only two terms are needed), orCase #x: A1A2A3(if three terms are needed), wherexis the case number (counting starting from 1), each\n  Aiis a palindromic term (as described above), and the sum of the\n  Ais equalsS.",
        "sample_input": "3\n1\n198\n1234567890",
        "sample_output": "Case #1: 1\nCase #2: 191 7\nCase #3: 672787276 94449 561686165",
        "source": "2019\\world_finals\\wont_sum_must_now"
    },
    {
        "problem_name": "ESAb ATAd",
        "problem_statement": "Last year, a research consortiumhad some troublewith a distributed database system that sometimes lost pieces of the data.\n  You do not need to read or understand that problem in order to solve this\n  one!\nThe consortium has decided that distributed systems are too complicated, so\n  they are storingBbits of important information in a\n  single array on one awesome machine. As an additional layer of security,\n  they have made it difficult to obtain the information quickly; the user must\n  query for a bit position between 1 andB, and then they receive that\n  bit of the stored array as a response.\nUnfortunately, this ultra-modern machine is subject to random quantum\n  fluctuations! Specifically, after every 1st, 11th, 21st, 31st... etc. query\n  is sent,but before the response is given, quantum fluctuation causes\n  exactly one of the following four effects, with equal probability:\nMoreover, there is no indication of what effect the quantum fluctuation\n  has had each time. The consortium is now concerned, and it has hired you\n  to get its precious data back, in whatever form it is in! Can you find\n  the entire array, such that your answer is accurateas of the time that you give it? Answering does not count as a query,\n  so if you answer after your 30th query, for example, the array will be the\n  same as it was after your 21st through 30th queries.\nThis is an interactive problem. You should make sure you have read the\n  information in theInteractive Problems sectionof our FAQ.\nInitially, your program should read a single line containing two integersTandB: the number of test cases and the number of bits\n  in the array, respectively. Note thatBis the same for every test\n  case.\nThen, you need to processTtest cases. In each case, the judge begins\n  with a predeterminedB-bit array; note that this array can vary from\n  test case to test case, and is not necessarily chosen at random. Then, you\n  may make up to 150 queries of the following form:\nThen, after you have made as many of the 150 queries above as you want, you\n  must make one more exchange of the following form:\nAfter the judge sendsNto your input stream, it will not send\n  any other output. If your program continues to wait for the judge after\n  receivingN, your program will time out, resulting in a Time\n  Limit Exceeded error. Notice that it is your responsibility to have your\n  program exit in time to receive a Wrong Answer judgment instead of a Time\n  Limit Exceeded error. As usual, if the memory limit is exceeded, or your\n  program gets a runtime error, you will receive the appropriate judgment.\nTime limit: 40 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.\nB= 10.\nB= 20.\nB= 100.\nYou can use this testing tool to test locally or on our servers.\n  To test locally, you will need to run the tool in parallel with your code;\n  you can use ourinteractive runnerfor that.The interactive runner was changed after the 2019 contest. Be sure to download the\n  latest version.For more information, read theInteractive Problems sectionof the FAQ.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThe following interaction corresponds to Test Set 1.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2020\\qualification_round\\esab_atad"
    },
    {
        "problem_name": "Indicium",
        "problem_statement": "Indicium means \"trace\" in Latin. In this problem we work with Latin squares and\n  matrix traces.\nALatin squareis anN-by-Nsquare matrix in which each\n  cell contains one ofNdifferent values, such that no value is\n  repeated within a row or a column. In this problem, we will deal only with\n  \"natural Latin squares\" in which theNvalues are the integers between\n  1 andN.\nThetraceof a square matrix is the sum of the values on the main\n  diagonal (which runs from the upper left to the lower right).\nGiven valuesNandK, produce anyN-by-N\"natural\n  Latin square\" with traceK, or say it is impossible. For example, here\n  are two possible answers forN= 3,K= 6. In each case, the\n  values that contribute to the trace are underlined.\n21 331 2321   1231 322 31\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing two integersNandK: the desired size of the matrix and the desired trace.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no answer for the given parameters orPOSSIBLEotherwise. In the latter case, outputNmore\n  lines ofNintegers each, representing a valid \"natural Latin square\"\n  with a trace ofK, as described above.\nTime limit: 20 seconds per test set.Memory limit: 1GB.N≤K≤N2.\nT= 44.2 ≤N≤ 5.\n1 ≤T≤ 100.2 ≤N≤ 50.\nSample Case #1 is the one described in the problem statement.\nSample Case #2 has no answer. The only possible 2-by-2\n  \"natural Latin squares\" are as follows:\nThese have traces of 2 and 4, respectively. There is no way to get a trace\n  of 3.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of one line containing two integersNandK: the desired size of the matrix and the desired trace.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif there is no answer for the given parameters orPOSSIBLEotherwise. In the latter case, outputNmore\n  lines ofNintegers each, representing a valid \"natural Latin square\"\n  with a trace ofK, as described above.",
        "sample_input": "2\n3 6\n2 3",
        "sample_output": "Case #1: POSSIBLE\n2 1 3\n3 2 1\n1 3 2\nCase #2: IMPOSSIBLE",
        "source": "2020\\qualification_round\\indicium"
    },
    {
        "problem_name": "Nesting Depth",
        "problem_statement": "tl;dr: Given a string of digitsS, insert a minimum number of opening\n  and closing parentheses into it such that the resulting string is balanced and\n  each digit d is inside exactly d pairs of matching parentheses.\nLet thenestingof two parentheses within a string be the substring\n  that occurs strictly between them. An opening parenthesis and a closing\n  parenthesis that is further to its right are said tomatchif their\n  nesting is empty, or if every parenthesis in their nesting matches with\n  another parenthesis in their nesting. Thenesting depthof a position\n  p is the number of pairs of matching parentheses m such that p is included in\n  the nesting of m.\nFor example, in the following strings, all digits match their nesting\n  depth:0((2)1),(((3))1(2)),((((4)))),((2))((2))(1). The first three strings have minimum length among\n  those that have the same digits in the same order, but the last one does not\n  since((22)1)also has the digits221and is\n  shorter.\nGiven a string of digitsS, find another string S',\n  comprised of parentheses and digits, such that:all parentheses in S' match some other parenthesis,removing any and all parentheses from S' results inS,each digit in S' is equal to its nesting depth, andS' is of minimum length.\nThe first line of the input gives the number of test cases,T.Tlines follow. Each line represents a test case and contains only the\n  stringS.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the string S' defined above.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.1 ≤ length ofS≤ 100.\nEach character inSis either0or1.\nEach character inSis a decimal digit between0and9, inclusive.\nThe strings()0000(),(1)0(((()))1)and(1)(11)000are not valid solutions to Sample Cases #1, #2 and\n  #3, respectively, only because they are not of minimum length. In addition,1)(and)(1are not valid solutions to Sample Case\n  #4 because they contain unmatched parentheses and the nesting depth is 0\n  at the position where there is a 1.\nYou can create sample inputs that are valid only for Test Set 2 by removing\n  the parentheses from the example strings mentioned in the problem statement.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each line represents a test case and contains only the\n  stringS.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the string S' defined above.",
        "sample_input": "4\n0000\n101\n111000\n1",
        "sample_output": "Case #1: 0000\nCase #2: (1)0(1)\nCase #3: (111)000\nCase #4: (1)",
        "source": "2020\\qualification_round\\nesting_depth"
    },
    {
        "problem_name": "Parenting Partnering Returns",
        "problem_statement": "Cameron and Jamie's kid is almost 3 years old! However, even though the child is more independent\nnow, scheduling kid activities and domestic necessities is still a challenge for the couple.\nCameron and Jamie have a list ofNactivities to take care of during the day. Each activity\nhappens during a specified interval during the day. They need to assign each activity to one\nof them, so that neither of them is responsible for two activities that overlap.\nAn activity that ends at time t is not considered to overlap with another activity that\nstarts at time t.\nFor example, suppose that Jamie and Cameron need to cover 3 activities: one running\nfrom 18:00 to 20:00, another from 19:00 to 21:00 and another from 22:00 to 23:00.\nOne possibility would be for Jamie to cover the activity running from 19:00 to 21:00,\nwith Cameron covering the other two. Another valid schedule would be for Cameron to\ncover the activity from 18:00 to 20:00 and Jamie to cover the other two. Notice\nthat the first two activities overlap in the time between 19:00 and 20:00, so it is\nimpossible to assign both of those activities to the same partner.\nGiven the starting and ending times of each activity, find any schedule that does not require\nthe same person to cover overlapping activities, or say that it is impossible.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containing a single integerN, the number of activities\nto assign. Then,Nmore lines follow. The i-th of these lines (counting starting from 1)\ncontains two integersSiandEi.\nThe i-th activity starts exactlySiminutes after\nmidnight and ends exactlyEiminutes after midnight.\nFor each test case, output one line containingCase #x: y, wherexis\nthe test case number (starting from 1) andyisIMPOSSIBLEif there\nis no valid schedule according to the above rules, or a string of exactlyNcharacters\notherwise. The i-th character inymust beCif the i-th activity\nis assigned to Cameron in your proposed schedule, andJif it is assigned to\nJamie.\nIf there are multiple solutions, you may output any one of them. (See\n  \"What if a test case has multiple correct solutions?\" in the Competing\n  section of theFAQ. This\n  information about multiple solutions will not be explicitly stated in the\n  remainder of the 2020 contest.)\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.0 ≤Si<Ei≤ 24 × 60.\n2 ≤N≤ 10.\n2 ≤N≤ 1000.\nSample Case #1 is the one described in the problem statement. As mentioned above, there are other\n  valid solutions, likeJCJandJCC.\nIn Sample Case #2, all three activities overlap with each other. Assigning them all would mean\n  someone would end up with at least two overlapping activities, so there is no valid schedule.\nIn Sample Case #3, notice that Cameron ends an activity and starts another one at minute 100.\nIn Sample Case #4, any schedule would be valid. Specifically, it is OK for one partner to do\n  all activities.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containing a single integerN, the number of activities\nto assign. Then,Nmore lines follow. The i-th of these lines (counting starting from 1)\ncontains two integersSiandEi.\nThe i-th activity starts exactlySiminutes after\nmidnight and ends exactlyEiminutes after midnight.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis\nthe test case number (starting from 1) andyisIMPOSSIBLEif there\nis no valid schedule according to the above rules, or a string of exactlyNcharacters\notherwise. The i-th character inymust beCif the i-th activity\nis assigned to Cameron in your proposed schedule, andJif it is assigned to\nJamie.",
        "sample_input": "4\n3\n360 480\n420 540\n600 660\n3\n0 1440\n1 3\n2 4\n5\n99 150\n1 100\n100 301\n2 5\n150 250\n2\n0 720\n720 1440",
        "sample_output": "Case #1: CJC\nCase #2: IMPOSSIBLE\nCase #3: JCCJJ\nCase #4: CC",
        "source": "2020\\qualification_round\\parenting_partnering_returns"
    },
    {
        "problem_name": "Vestigium",
        "problem_statement": "Vestigium means \"trace\" in Latin. In this problem we work with Latin squares\n  and matrix traces.\nThetraceof a square matrix is the sum of the values on the main\n  diagonal (which runs from the upper left to the lower right).\nAnN-by-Nsquare matrix is aLatin squareif each\n  cell contains one ofNdifferent values, and no value is repeated\n  within a row or a column. In this problem, we will deal only with \"natural\n  Latin squares\" in which theNvalues are the integers between 1 andN.\nGiven a matrix that contains only integers between 1 andN, we want to\n  compute its trace and check whether it is a natural Latin square. To give\n  some additional information, instead of simply telling us whether the matrix\n  is a natural Latin square or not, please compute the number of rows and the\n  number of columns that contain repeated values.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each starts with a line containing a single\n  integerN: the size of the matrix to explore. Then,Nlines\n  follow. The i-th of these lines containsNintegersMi,1,Mi,2...,Mi,N.Mi,jis the integer in the i-th row and j-th column of the\n  matrix.\nFor each test case, output one line containingCase #x: k r c,\n  wherexis the test case number (starting from 1),kis the trace of the matrix,ris the number of\n  rows of the matrix that contain repeated elements, andcis the\n  number of columns of the matrix that contain repeated elements.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤N≤ 100.1 ≤Mi,j≤N, for all i, j.\nIn Sample Case #1, the input is a natural Latin square, which means no row or\n  column has repeated elements. All four values in the main diagonal are 1, and\n  so the trace (their sum) is 4.\nIn Sample Case #2, all rows and columns have repeated elements. Notice that\n  each row or column with repeated elements is counted only once regardless of\n  the number of elements that are repeated or how often they are repeated\n  within the row or column. In addition, notice that some integers in the range\n  1 throughNmay be absent from the input.\nIn Sample Case #3, the leftmost and rightmost columns have repeated elements.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each starts with a line containing a single\n  integerN: the size of the matrix to explore. Then,Nlines\n  follow. The i-th of these lines containsNintegersMi,1,Mi,2...,Mi,N.Mi,jis the integer in the i-th row and j-th column of the\n  matrix.",
        "output_description": "For each test case, output one line containingCase #x: k r c,\n  wherexis the test case number (starting from 1),kis the trace of the matrix,ris the number of\n  rows of the matrix that contain repeated elements, andcis the\n  number of columns of the matrix that contain repeated elements.",
        "sample_input": "3\n4\n1 2 3 4\n2 1 4 3\n3 4 1 2\n4 3 2 1\n4\n2 2 2 2\n2 3 2 3\n2 2 2 3\n2 2 2 2\n3\n2 1 3\n1 3 2\n1 2 3",
        "sample_output": "Case #1: 4 0 0\nCase #2: 9 4 4\nCase #3: 8 0 2",
        "source": "2020\\qualification_round\\vestigium"
    },
    {
        "problem_name": "Pascal Walk",
        "problem_statement": "Pascal's triangle consists of an infinite number of rows of an increasing\n  number of integers each, arranged in a triangular shape.\nLet us define (r, k) as the k-th position from the left in the r-th row,\n  with both r and k counted starting from 1.\n  Then Pascal's triangle is defined by the following rules:\nThe first 5 rows of Pascal's triangle look like this:\n\nIn this problem, aPascal walkis a sequence of s positions\n  (r1, k1),  (r2, k2), ...,\n  (rs, ks)\n  in Pascal's triangle that satisfy the following criteria:\nFind any Pascal walk of S ≤ 500 positions such that the sum of the numbers\n  in all of the positions it visits is equal toN. It is guaranteed\n  that at least one such walk exists for everyN.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of a single line containing a\n  single integerN.\nFor each test case, first output a line containingCase #x:,\n  wherexis the test case number (starting from 1). Then, output\n  your proposed Pascal walk of length S ≤ 500 using S additional lines. The i-th of\n  these lines must berikiwhere\n  (ri, ki) is the i-th position in the walk. For example, the first line\n  should be1 1since the first position for all valid walks is (1, 1).\n  The sum of the numbers at the S positions of your proposed Pascal walk must be exactlyN.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.\n1 ≤N≤ 501.\n1 ≤N≤ 1000.\n1 ≤N≤ 109.\nIn Sample Case #1, only the starting position is needed.\n\nIn Sample Case #2, notice that although a shorter path exists, the path does\n  not need to be of minimal length, as long as it uses no more than 500\n  positions.\n\nThe following image depicts our solution to Sample Case #3:\n\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of a single line containing a\n  single integerN.",
        "output_description": "For each test case, first output a line containingCase #x:,\n  wherexis the test case number (starting from 1). Then, output\n  your proposed Pascal walk of length S ≤ 500 using S additional lines. The i-th of\n  these lines must berikiwhere\n  (ri, ki) is the i-th position in the walk. For example, the first line\n  should be1 1since the first position for all valid walks is (1, 1).\n  The sum of the numbers at the S positions of your proposed Pascal walk must be exactlyN.",
        "sample_input": "3\n1\n4\n19",
        "sample_output": "Case #1:\n1 1\nCase #2:\n1 1\n2 1\n2 2\n3 3\nCase #3:\n1 1\n2 2\n3 2\n4 3\n5 3\n5 2\n4 1\n3 1",
        "source": "2020\\round_1a\\pascal_walk"
    },
    {
        "problem_name": "Pattern Matching",
        "problem_statement": "Many terminals use asterisks (*) to signify \"any string\",\n  including the empty string. For example, when listing files matchingBASH*, a terminal may listBASH,BASHERandBASHFUL. For*FUL, it may\n  listBEAUTIFUL,AWFULandBASHFUL.\n  When listingB*L,BASHFUL,BEAUTIFULandBULLmay be listed.\nIn this problem, formally, apatternis a string consisting of only\n  uppercase English letters and asterisks (*), and anameis a string consisting of only uppercase English letters. A patternpmatches a namemif there is a way of replacing every asterisk inpwith a (possibly empty) string to obtainm. Notice that each\n  asterisk may be replaced by a different string.\nGivenNpatterns, can you find a single name of at most 104letters that matches all those patterns at once, or report that it cannot be done?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line with a single\n  integerN: the number of patterns to simultaneously match. Then,Nlines follow, each one containing a single stringPirepresenting the i-th pattern.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis any name containing at most 104letters such that eachPimatchesyaccording to the definition\n  above, or*(i.e., just an asterisk) if there is no such name.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤N≤ 50.2 ≤ length ofPi≤ 100, for all i.Each character ofPiis either an uppercase English letter\n  or an asterisk (*), for all i.At least one character ofPiis an uppercase English\n  letter, for all i.\nExactly one character ofPiis an asterisk\n  (*), for all i.The leftmost character ofPiis the only asterisk\n  (*), for all i.\nExactly one character ofPiis an asterisk\n  (*), for all i.\nAt least one character ofPiis an asterisk\n  (*), for all i.\nIn Sample Case #1, there are other possible answers, includingCOCOCONUTSandILIKECOCONUTS.\n  NeitherCOCONUTSAREGREATnorCOCOANUTSwould be\n  acceptable. Notice that the same pattern may appear more than once within a\n  test case.\nIn Sample Case #2, there is no acceptable name, so the answer is*.\nThe following cases could not appear in Test Set 1, but could appear in Test\n  Set 2 or Test Set 3:\nHELLOandHELLOGOODBYEHELLOare examples of\n  acceptable answers.OTHELLOandHELLOOwould not be\n  acceptable.\nThere is no name that matches both patterns, so the answer would be*.\nCODEJAMis one example of an acceptable answer.\nThe following cases could not appear in Test Set 1 or Test Set 2, but could\n  appear in Test Set 3:\nABCDEandABUNDANCEare among the possible\n  acceptable answers, butBOLDFACEis not.\nThere is no name that matches both patterns, so the answer would be*.\nQUAILandAQare among the possible acceptable\n  answers here.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case starts with a line with a single\n  integerN: the number of patterns to simultaneously match. Then,Nlines follow, each one containing a single stringPirepresenting the i-th pattern.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis any name containing at most 104letters such that eachPimatchesyaccording to the definition\n  above, or*(i.e., just an asterisk) if there is no such name.",
        "sample_input": "2\n5\n*CONUTS\n*COCONUTS\n*OCONUTS\n*CONUTS\n*S\n2\n*XZ\n*XYZ",
        "sample_output": "Case #1: COCONUTS\nCase #2: *",
        "source": "2020\\round_1a\\pattern_matching"
    },
    {
        "problem_name": "Square Dance",
        "problem_statement": "You are organizing an international dancing competition. You have already obtained all of the\n  following:\nBut you are still missing an audience! You are worried that the competition might not be\n  interesting enough, so you have come up with a way to calculate theinterest levelfor the competition.\nEach competitor occupies one square unit cell of the floor and stays there until they are\n  eliminated. Acompass neighborof a competitor x is another competitor y chosen such that\n  y shares a row or column with x, and there are no competitors still standing in cells in\n  between x and y. Each competitor may have between 0 and 4 compass neighbors, inclusive,\n  and the number may decrease if all the other competitors in one orthogonal direction\n  are eliminated.\nThe competition runs one round at a time.\n  In between rounds i and i+1, if a competitor d had at least one compass neighbor during\n  round i, and d's skill level is strictly less than the average skill level of all of d's\n  compass neighbors, d is eliminated and is not part of the competition for rounds\n  i+1, i+2, i+3, etc.\n  Notice that d still counts as a neighbor of their other compass neighbors for the purpose\n  of other eliminations that may also happen between rounds i and i+1.\n  Competitors that do not have any compass neighbors are never eliminated.\n  If after a round no competitor is eliminated, then the competition ends.\nTheinterest level of a roundis the sum of skill levels of the competitors dancing in\n  that round (even any competitors that are to be eliminated between that round and the next).\n  Theinterest level of the competitionis the sum of the interest levels of all of the\n  rounds.\nGiven the skill levels of the dancers that are on the floor for the first round,\n  what is the interest level of the competition?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with a line containing\n  two integersRandC. Then, there areRmore lines containingCintegers each. The j-th value on the i-th of these lines,Si, j,\n  represents the skill level of the dancer in the cell in the i-th row and j-th\n  column of the floor.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the interest level of the competition.\nTime limit: 40 seconds per test set.Memory limit: 1GB.1 ≤Si,j≤ 106, for all i and j.\n1 ≤T≤ 100.1 ≤R×C≤ 100.\n10 ≤T≤ 100.1000 <R×C≤ 105, in exactly 10 cases.1 ≤R×C≤ 1000, in exactlyT- 10 cases.\nIn Sample Case #1, only one competitor is on the floor. Since the competitor does not have any\n  compass neighbors, they dance in one round, and then the competition is over. Thus the answer is\n  equal to the dancer's skill level, 15.\nIn Sample Case #2, the interest level of the first round is\n  1+1+1+1+2+1+1+1+1=10.\nThe competitors that are not in the center nor in a corner have a skill level of 1, but the\n  average of their compass neighbors is 4 / 3, which is greater than 1, so they are eliminated.\n  The floor during the second round looks like this:\nThis round is the last one. The competitors in the corner have two compass neighbors each,\n  but the average of their skill level is equal to their own. The competitor in the center has\n  no compass neighbor. The interest level of the round is 1+1+2+1+1=6.\n  This means the interest level of the competition is 10+6=16.\nIn Sample Case #3, the competitor with skill level 1 is eliminated after the first round, while\n  the other two remain. In the second round, the two other competitors become compass neighbors,\n  and this causes the competitor with skill level 2 to be eliminated. There is a single competitor\n  in the third round, which makes it the last one. The interest levels of the rounds are 6, 5 and 3,\n  making the interest level of the competition 14.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case begins with a line containing\n  two integersRandC. Then, there areRmore lines containingCintegers each. The j-th value on the i-th of these lines,Si, j,\n  represents the skill level of the dancer in the cell in the i-th row and j-th\n  column of the floor.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the interest level of the competition.",
        "sample_input": "4\n1 1\n15\n3 3\n1 1 1\n1 2 1\n1 1 1\n1 3\n3 1 2\n1 3\n1 2 3",
        "sample_output": "Case #1: 15\nCase #2: 16\nCase #3: 14\nCase #4: 14",
        "source": "2020\\round_1a\\square_dance"
    },
    {
        "problem_name": "Blindfolded Bullseye",
        "problem_statement": "Gary has a large square wall that is exactly 2 × 109nanometers tall and\n  2 × 109nanometers wide.\n  Gary has a dartboard placed on the wall. The dartboard is circular and its radius is\n  betweenAandBnanometers, inclusive.\n  The dartboard is fully contained within the wall, but it may touch its edges.\n  The center of the dartboard is an integer number of nanometers from each edge of the wall.\nGary invited his friend Mika over to play an interesting game. Gary blindfolds Mika and\n  challenges her to throw a dart at the center of the dartboard. To help her, whenever Mika\n  throws a dart at the wall, Gary will tell her whether the dart hit the dartboard.\nMika does not know where on the wall the dartboard is, but since Mika is very skilled at darts,\n  she can throw darts with nanometer precision. That is, she can aim and hit exactly any point that\n  is an integer number of nanometers away from each edge of the wall. Immediately after throwing\n  each dart, Gary tells her whether she hit the center of the dartboard, some other part of it, or\n  missed it completely and hit the bare wall.\nCan you help Mika hit the center of the dartboard, without throwing more than 300 darts?\nInitially, your program should read a single line containing three integersT,AandB, indicating the number of test cases and the inclusive minimum and maximum\n  values for the dartboard's radius, in nanometers, respectively. (Notice thatAandBare the same for every test case within a test set.) Then, you need to processTtest cases.\nWe represent the points that darts can be aimed at as pairs (x, y), where x and y are\n  integers between -109and 109, inclusive. The pair (x, y) is\n  the point that is x + 109nanometers away from the left edge of the wall and\n  y + 109nanometers away from the bottom edge of the wall. Point (0, 0) is therefore\n  at the exact center of the wall.\nFor each test case, there is a secretly chosen radius R for the dartboard, and a\n  secretly chosen center of the dartboard (X, Y).\n  R, X, and Y are integers chosen for each test case by the judges in a designed\n  (not random) way, within the limits. For each test case you need to process up to 300 exchanges\n  with the judge. Your program represents Mika and the judge program represents Gary.\n  Each exchange consists of Mika (your program) choosing where to throw a dart and Gary\n  (the judging program) giving information about that position.\nThe i-th exchange consists of your program first outputting a single line containing two integers\n  Xiand Yi, both between -109and 109, inclusive,\n  and the judge responding with a single line containing either:\nAfter sendingCENTER, the judge will start waiting for the first\n  exchange of the next test case, if there is any.\nIf you output a line that is incorrectly formatted or with an out of bounds value,\n  the judge will respond with a single line containingWRONG.\n  If 300 exchanges occur (including 300 responses from the judge) without you receivingCENTER, or if you ever receiveWRONG, the judge will finish all\n  communication, wait for your own program to also finish, and give a Wrong Answer verdict.\n  After sending theT-thCENTER, on the other hand, the judge will finish all\n  communication, wait for your own program to finish, and give a Correct verdict.\n  If, while waiting for your program to finish, time or memory limits are exceeded,\n  the corresponding verdict will be assigned instead. (Note that verdicts are not messages\n  sent to your program.)\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 20.A≤ R ≤B.-109+ R ≤ X ≤ 109- R.-109+ R ≤ Y ≤ 109- R.\nA=B= 109- 5.\nA=B= 109- 50.\nA= 109/ 2.B= 109.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThe interactive runner was changed after the 2020 Qualification Round.\n  Be sure to download the latest version.\nThe following sample interaction uses the limits of Test Set 1.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2020\\round_1b\\blindfolded_bullseye"
    },
    {
        "problem_name": "Expogo",
        "problem_statement": "You have just received the best gift ever: an Expogo stick. You can stand on\n  it and use it to make increasingly large jumps.\nYou are currently standing on point (0, 0) in your infinite two-dimensional\n  backyard, and you are trying to reach a goal point (X,Y), with\n  integer coordinates, in as few jumps as possible. You must land exactly on\n  the goal point; it is not sufficient to pass over it on a jump.\nEach time you use your Expogo stick to jump, you pick a cardinal direction:\n  north, south, east, or west. The i-th jump with your Expogo stick moves you\n  2(i-1)units in the chosen direction, so your first jump takes you\n  1 unit, your second jump takes you 2 units, your third jump takes you 4 units,\n  and so on.\nGiven a goal point (X,Y), determine whether it is possible to\n  get there, and if so, demonstrate how to do it using as few jumps as\n  possible.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of a single line with two integersXandY: the coordinates of the goal point.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif the goal point cannot be reached. Otherwise,ymust be a string of one or more characters, each of which is\n  eitherN(north),S(south),E(east),\n  orW(west), representing the directions of the jumps that you\n  will make, in order. This sequence of jumps must reach the goal point at the\n  end of the final jump, and it must be as short as possible.\nTime limit: 20 seconds per test set.Memory limit: 1GB.(X,Y) ≠ (0, 0).\n1 ≤T≤ 80.-4 ≤X≤ 4.-4 ≤Y≤ 4.\n1 ≤T≤ 100.-100 ≤X≤ 100.-100 ≤Y≤ 100.\n1 ≤T≤ 100.-109≤X≤ 109.-109≤Y≤ 109.\nIn Sample Case #1, you can jump south from (0, 0) to (0, -1), then jump east\n  to (2, -1), then jump north to (2, 3).\nWe can be sure there is not a more efficient solution (two moves or fewer)\n  because at least 2 + 3 = 5 units of distance are needed to reach the goal\n  point, but the first two jumps combined only give us 3 units of distance.\nNotice that Sample Case #2 is like Sample Case #1 but reflected across both\n  axes, and so the answer comes from reflecting all directions in Sample Case\n  #1's answer.\nIn Sample Case #3, notice thatEWEwould not be a valid answer,\n  even though it reaches the target, because there is a way to get there using\n  fewer jumps.\nWe leave it to you to determine why it is impossible to reach the target in\n  Sample Case #4.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each consists of a single line with two integersXandY: the coordinates of the goal point.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyisIMPOSSIBLEif the goal point cannot be reached. Otherwise,ymust be a string of one or more characters, each of which is\n  eitherN(north),S(south),E(east),\n  orW(west), representing the directions of the jumps that you\n  will make, in order. This sequence of jumps must reach the goal point at the\n  end of the final jump, and it must be as short as possible.",
        "sample_input": "4\n2 3\n-2 -3\n3 0\n-1 1",
        "sample_output": "Case #1: SEN\nCase #2: NWS\nCase #3: EE\nCase #4: IMPOSSIBLE",
        "source": "2020\\round_1b\\expogo"
    },
    {
        "problem_name": "Join the Ranks",
        "problem_statement": "You recently acquired a new deck of cards. Each card displays a rank, which\n  is an integer between 1 andR, and a suit, which is an integer between\n  1 andS. For each combination of a rank and a suit, there is exactly\n  one card that displays it, meaning that the deck hasR×Scards in total. We will denote a card with rank r and suit s as\n  (r, s).\nBeing brand new, the deck is sorted from top to bottom by suit in increasing\n  order, with ties being broken by ranks in increasing order. That is, (1, 1)\n  comes first, then (2, 1), ..., (R, 1), then (1, 2), (2, 2), ...,\n  (R, 2), and so on up to (R,S). For example, withR= 4 ranks andS= 2 suits, the initial ordering would be:\n  (1, 1), (2, 1), (3, 1), (4, 1), (1, 2), (2, 2), (3, 2), (4, 2).\nYou want to reorder the deck to be sorted by rank. That is, you want to put\n  all the cards of the same rank together, and have the ranks be in increasing\n  order. You do not care, however, about the order of the suits within each\n  rank. For example, withR= 4 andS= 2, one of the various\n  possible valid new orderings would be: (1, 2), (1, 1), (2, 1), (2, 2), (3, 1),\n  (3, 2), (4, 2), (4, 1).\nYou have been learning how to cook, so you want to reorder the deck without\n  putting your spatulas down. You decided to sort the deck using only the\n  following multi-part operation:First, take one or more cards from the top of the deck, and set that\n    selection aside as pile A.Next, take one or more cards from the new top of the deck, and set that\n    selection aside as pile B.Finally, put pile A on top of the deck, and then put pile B on top of\n    the new deck.Notice that the operation exchanges the pile A part of the deck and the pile\n  B part of the deck, without affecting any other cards deeper in the deck (if\n  there are any).Continuing with ourR= 4,S= 2 example, if your first move is\n  to choose 3 cards from the top for pile A and 2 cards for pile B, then these\n  are the cards you get:A: (1, 1), (2, 1), (3, 1),B: (4, 1), (1, 2), andRemainder of deck: (2, 2), (3, 2), (4, 2).After putting A on the deck and then B on top of that, the new deck is\n  ordered like this:(4, 1), (1, 2), (1, 1), (2, 1), (3, 1), (2, 2), (3, 2), (4, 2).GivenRandS, find a sequence of operations that reorders the\n  deck to be sorted by rank, as described above, and uses the minimum possible\n  number of operations to do so.InputThe first line of the input gives the number of test cases,T.Tlines follow. Each of these lines describes a single test case with\n  two integersRandS, the number of ranks and suits in the\n  deck, respectively.OutputFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the minimum number of operations needed to reorder the deck\n  as explained above. Then, printymore lines containingaibi, meaning that in the i-th operation\n  in a sequence of moves that reorders the deck, you takeaicards first to form pile A and thenbicards after that to form pile B.LimitsMemory limit: 1GB.Test set 1 (Visible Verdict)Time limit: 30 seconds.T= 12.2 ≤R≤ 5.2 ≤S≤ 7.R×S≤ 14.Test set 2 (Hidden Verdict)Time limit: 60 seconds.1 ≤T≤ 100.2 ≤R≤ 40.2 ≤S≤ 40.SampleSample Inputsave_altcontent_copyCopied!3\n2 2\n3 2\n2 3Sample Outputsave_altcontent_copyCopied!Case #1: 1\n2 1\nCase #2: 2\n3 2\n2 1\nCase #3: 2\n2 3\n2 2In Sample Case #1, the initial order is(1, 1), (2, 1), (1, 2), (2, 2).After swappingA = (1, 1), (2, 1)andB = (1, 2)the deck is left\n  as(1, 2), (1, 1), (2, 1), (2, 2), which is sorted by rank as\n  needed. Notice that the suits are in different orders within each rank, which\n  is allowed.In Sample Case #2, the initial order is(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2).After swappingA = (1, 1), (2, 1), (3, 1)andB = (1, 2), (2, 2)the deck is left as(1, 2), (2, 2), (1, 1), (2, 1), (3, 1), (3, 2).In a second move, we can doA = (1, 2), (2, 2)andB = (1, 1)to get(1, 1), (1, 2), (2, 2), (2, 1), (3, 1), (3, 2).In Sample Case #3, another valid solution isa1= 4,b1= 1 first, and thena2= 3\n  andb2= 1.\nNotice that the operation exchanges the pile A part of the deck and the pile\n  B part of the deck, without affecting any other cards deeper in the deck (if\n  there are any).\nContinuing with ourR= 4,S= 2 example, if your first move is\n  to choose 3 cards from the top for pile A and 2 cards for pile B, then these\n  are the cards you get:A: (1, 1), (2, 1), (3, 1),B: (4, 1), (1, 2), andRemainder of deck: (2, 2), (3, 2), (4, 2).After putting A on the deck and then B on top of that, the new deck is\n  ordered like this:(4, 1), (1, 2), (1, 1), (2, 1), (3, 1), (2, 2), (3, 2), (4, 2).\nGivenRandS, find a sequence of operations that reorders the\n  deck to be sorted by rank, as described above, and uses the minimum possible\n  number of operations to do so.\nThe first line of the input gives the number of test cases,T.Tlines follow. Each of these lines describes a single test case with\n  two integersRandS, the number of ranks and suits in the\n  deck, respectively.\nFor each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the minimum number of operations needed to reorder the deck\n  as explained above. Then, printymore lines containingaibi, meaning that in the i-th operation\n  in a sequence of moves that reorders the deck, you takeaicards first to form pile A and thenbicards after that to form pile B.\nMemory limit: 1GB.\nTime limit: 30 seconds.T= 12.2 ≤R≤ 5.2 ≤S≤ 7.R×S≤ 14.\nTime limit: 60 seconds.1 ≤T≤ 100.2 ≤R≤ 40.2 ≤S≤ 40.\nIn Sample Case #1, the initial order is(1, 1), (2, 1), (1, 2), (2, 2).After swappingA = (1, 1), (2, 1)andB = (1, 2)the deck is left\n  as(1, 2), (1, 1), (2, 1), (2, 2), which is sorted by rank as\n  needed. Notice that the suits are in different orders within each rank, which\n  is allowed.\nIn Sample Case #2, the initial order is(1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (3, 2).After swappingA = (1, 1), (2, 1), (3, 1)andB = (1, 2), (2, 2)the deck is left as(1, 2), (2, 2), (1, 1), (2, 1), (3, 1), (3, 2).In a second move, we can doA = (1, 2), (2, 2)andB = (1, 1)to get(1, 1), (1, 2), (2, 2), (2, 1), (3, 1), (3, 2).\nIn Sample Case #3, another valid solution isa1= 4,b1= 1 first, and thena2= 3\n  andb2= 1.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Tlines follow. Each of these lines describes a single test case with\n  two integersRandS, the number of ranks and suits in the\n  deck, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  wherexis the test case number (starting from 1) andyis the minimum number of operations needed to reorder the deck\n  as explained above. Then, printymore lines containingaibi, meaning that in the i-th operation\n  in a sequence of moves that reorders the deck, you takeaicards first to form pile A and thenbicards after that to form pile B.",
        "sample_input": "3\n2 2\n3 2\n2 3",
        "sample_output": "Case #1: 1\n2 1\nCase #2: 2\n3 2\n2 1\nCase #3: 2\n2 3\n2 2",
        "source": "2020\\round_1b\\join_the_ranks"
    },
    {
        "problem_name": "Overexcited Fan",
        "problem_statement": "Todaywillbe the day—today will be the day that you finally\n  get a picture with Peppurr the cat!\nIt has just been announced that Peppurr will be touring your city. The city has infinitely\n  many infinitely-long streets running north-south and infinitely many infinitely-long streets\n  running east-west. An intersection is any point at which a north-south street and an\n  east-west street meet. From any given intersection, the closest intersection in each of the\n  four directions (north, east, south and west) is exactly one block away.\nYou know the exact path that Peppurr's tour will take along those streets.\n  Your goal is to be at one of the intersections on Peppurr's tour at the same time that\n  Peppurr is there, and you want to do so as fast as possible. This is how you will\n  get your picture with Peppurr!\nPeppurr's tour starts at an intersection that isXblocks east andYblocks north of the intersection where you are currently located. Both you and Peppurr\n  take exactly one minute to walk one full block, and must finish each minute at an\n  intersection; neither of you can walk partial blocks.\nPeppurr moves along a predefined path. Every minute, you can\n  choose to stand still for the minute, or use it to walk a single block in any of\n  the 4 directions (north, east, south or west). Both you and Peppurr only walk along the\n  streets.\nIf you and Peppurr are at the same intersection at the same time, you can take\n  a picture, even at the last intersection of the tour. However, Peppurr is unavailable\n  for pictures after the tour ends, so arriving at the tour's final intersection\n  even a single minute after the tour finishes means you will not get a picture.\nIs it possible to get a picture with Peppurr? If so, how soon can you do it?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of one line containing two\n  integers,XandY, and a string of charactersM.\n  This represents that Peppurr's tour starts exactlyXblocks east\n  andYblocks north of you. The stringMis the sequence\n  of moves that Peppurr will make.\n  The i-th character inMis one ofN,E,SorW, and corresponds to the\n  direction (north, east, south, or west, respectively) in which Peppurr will\n  walk one block during the tour's i-th minute.\nFor each test case, output one line withCase #x: y, wherexis the test case number (starting from 1). If there is no way\n  to get a picture with Peppurr,yisIMPOSSIBLE. Otherwise,yis the smallest number of minutes from the start of the tour needed\n  to get a picture with Peppurr.\n1 ≤T≤ 100.Time limit: 20 seconds per test set.Memory limit: 1GB.(X,Y) ≠ (0, 0). (The tour does not start in the same intersection as you.)\n0 ≤X≤ 10.0 ≤Y≤ 10.1 ≤ length ofM≤ 8.Each character inMis an uppercase letter —\n      eitherNorS.\n0 ≤X≤ 1000.0 ≤Y≤ 1000.1 ≤ length ofM≤ 1000.Each character inMis an uppercase letter —\n      eitherNorS.\n0 ≤X≤ 1000.0 ≤Y≤ 1000.1 ≤ length ofM≤ 1000.Each character inMis an uppercase letter —\n      eitherN,E,SorW.\nIn Sample Case #1, you can walk east four blocks and you will be able to take a picture\n  with Peppurr on the tour's last intersection.\nIn Sample Case #2, the tour starts off exactly three blocks to the east of you. No matter how\n  you move, you cannot get a picture with Peppurr.\nIn Sample Case #3, the tour is too far north for you to get the picture before the tour ends.\nIn Sample Case #4, the tour will come to you after one minute, so you don't even have to move!\n  Enjoy the picture with Peppurr! Remember that you can only take pictures in intersections,\n  so if you moved north while the tour moved south, which would cause you to cross paths\n  with Peppurr outside of an intersection, you could not get your picture in 0.5 minutes.\nIn Sample Case #5, you can move north twice, then east twice. Then, you can stay still\n  and you will be able to take a picture with Peppurr in the next minute. There are other\n  paths you can take which can get you a picture with Peppurr in 5 minutes, but none which\n  can do it sooner than that.\nThe following two cases could not appear in Test Set 1 or Test Set 2, but could appear in Test\n  Set 3:\nThe correct output for these two cases would be:\nNote that in Case #1, you can take a picture with Peppurr one block to the south\n  and two blocks to the east of your original starting point.\nIn Case #2, Peppurr travels in a small square. You can take a picture when Peppurr\n  returns to the starting point of that square.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of one line containing two\n  integers,XandY, and a string of charactersM.\n  This represents that Peppurr's tour starts exactlyXblocks east\n  andYblocks north of you. The stringMis the sequence\n  of moves that Peppurr will make.\n  The i-th character inMis one ofN,E,SorW, and corresponds to the\n  direction (north, east, south, or west, respectively) in which Peppurr will\n  walk one block during the tour's i-th minute.",
        "output_description": "For each test case, output one line withCase #x: y, wherexis the test case number (starting from 1). If there is no way\n  to get a picture with Peppurr,yisIMPOSSIBLE. Otherwise,yis the smallest number of minutes from the start of the tour needed\n  to get a picture with Peppurr.",
        "sample_input": "5\n4 4 SSSS\n3 0 SNSS\n2 10 NSNNSN\n0 1 S\n2 7 SSSSSSSS",
        "sample_output": "Case #1: 4\nCase #2: IMPOSSIBLE\nCase #3: IMPOSSIBLE\nCase #4: 1\nCase #5: 5",
        "source": "2020\\round_1c\\overexcited_fan"
    },
    {
        "problem_name": "Overrandomized",
        "problem_statement": "Note:Every time this statement says something is randomly chosen, it means\n\"chosen uniformly at random across all valid possibilities, and independently from all other\nchoices\".\nThe company Banana Rocks Inc. just wrote a premium cloud-based random number generation service\nthat is destined to be the new gold standard of randomness.\nThe original design was that a group of servers would receive a request in the form of a single\npositive integer M of up toUdecimal digits and then respond with an integer\nfrom the range 1 through M, inclusive, chosen at random.\nHowever, instead of simply having the output written with digits 0 through 9 as usual, the\nservers were \"overrandomized\". Each server has a random subset of 10 distinct uppercase English\nletters to use as digits, and a random mapping from those letters to unique values between\n0 and 9.\nThe formal description of the current situation is as follows: each server has adigit stringD composed of exactly 10 different uppercase English letters.\nThe digit string defines the mapping between letters and the base 10 digits:\nD's j-th character from the left (counting from 0) is the base 10 digit of value j.\nFor example, if D wereCODEJAMFUNthenCwould represent\ndigit 0,Owould represent digit 1 andNwould represent\ndigit 9. The number 379009 would be encoded asEFNCCNwhen using that\ndigit string.\nWhen receiving the i-th query with an integer parameter Mi, the server:chooses an integer Niat random from\n    the inclusive range 1 through Mi,writes it as a base 10 string with no leading zeroes using the\nj-th character of D (counting starting from 0) as the digit of value j, andreturns the resulting string as the responseRi.\nWe collected some data that we believe we can use to recover the secret digit string D\nfrom each server. We sent 104queries to each server. For each query, we chose a\nvalue Miat random from the range 1 through 10U- 1,\ninclusive, and received the responseRi, a string of up toUuppercase English letters.\nWe recorded the pairs (Mi,Ri).\nAs we were moving these records to a new data storage device, the\nvalues of all the integers Miwithin the records of some servers became\ncorrupted and unreadable.\nCan you help us find each server's digit string D?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case contains the records for one server\nand starts with a line containing a single integerU,\nrepresenting that 10U- 1 is the inclusive upper bound for the\nrange in which we chose the integers Mito query that server.\nThen, exactly 104lines follow. Each of these\nlines contains an integerQi(in base 10 using digits 0 through 9, as usual)\nand a stringRi, representing the i-th query and response, respectively.\nIfQi= -1, then the integer Miused for the i-th query is unknown.\nOtherwise,Qi= Mi.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the digit string D\nfor the server examined in test casex.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 10.D is a string of exactly 10 different uppercase English letters, chosen independently and\nuniformly at random from the set of all such strings.Miis chosen independently and uniformly at random from the range 1 through\n10U- 1, inclusive, for all i.Niis chosen independently and uniformly at random from the range 1 through\nMi, inclusive, for all i.Riis the base 10 representation of Ni, using the j-th digit from\nthe left of D (counting starting from 0) as the digit of value j, for all i.\nQi= Mi, for all i.U= 2.\nQi= Mi, for all i.U= 16.\nQi= -1, for all i.U= 16.\nThe sample input is too big to display inline, so we are providing downloadable files instead\nfor theinputandoutput.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case contains the records for one server\nand starts with a line containing a single integerU,\nrepresenting that 10U- 1 is the inclusive upper bound for the\nrange in which we chose the integers Mito query that server.\nThen, exactly 104lines follow. Each of these\nlines contains an integerQi(in base 10 using digits 0 through 9, as usual)\nand a stringRi, representing the i-th query and response, respectively.\nIfQi= -1, then the integer Miused for the i-th query is unknown.\nOtherwise,Qi= Mi.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the digit string D\nfor the server examined in test casex.",
        "sample_input": "1\n2\n20 P\n37 PU\n26 L\n95 FB\n24 L\n86 HU\n30 PP\n77 H\n22 P\n89 ST\n24 FX\n8 L\n64 H\n63 FS\n68 P\n33 PP\n8 U\n77 PT\n71 UO\n97 PB\n3 P\n9 O\n71 OB\n88 PT\n99 FU\n53 OT\n95 XH\n23 B\n52 XP\n14 PT\n60 XP\n69 O\n19 PP\n50 FH\n13 L\n47 S\n14 O\n86 LO\n50 X\n65 UO\n65 H\n15 X\n90 OX\n31 FH\n36 PO\n99 X\n18 F\n34 PX\n41 L\n18 P\n23 PU\n3 P\n81 X\n82 OO\n12 H\n71 OP\n8 S\n48 PB\n42 PP\n62 OU\n64 PL\n43 P\n39 OS\n45 PU\n59 LH\n2 P\n63 OB\n79 PH\n61 LS\n7 P\n7 L\n1 P\n5 O\n80 UB\n90 OO\n52 XX\n10 O\n75 FL\n43 PP\n55 XX\n57 XP\n32 FB\n30 L\n31 OP\n26 FX\n13 F\n21 PS\n85 UO\n59 OO\n33 F\n71 O\n39 FB\n82 PX\n21 FT\n72 OX\n69 XB\n39 H\n84 XH\n58 OS\n22 L\n41 PT\n9 H\n86 LO\n97 O\n82 XT\n86 XB\n79 LX\n26 P\n24 PU\n66 H\n75 FU\n35 PS\n39 FO\n59 XH\n45 OO\n3 P\n44 FB\n30 PU\n23 PP\n92 LS\n47 OU\n92 SL\n56 XO\n38 H\n50 FF\n21 PL\n33 B\n78 S\n65 UX\n1 P\n88 FL\n4 O\n48 XH\n34 FS\n10 B\n28 F\n30 FX\n69 OP\n73 UT\n25 PB\n48 FL\n12 X\n95 HH\n25 PX\n76 F\n9 O\n75 XO\n80 FS\n71 PT\n35 U\n4 P\n80 PL\n14 P\n99 U\n86 PT\n51 OF\n12 H\n51 S\n72 FU\n85 PP\n24 PO\n42 FL\n74 LP\n44 FL\n76 FS\n89 OP\n87 FL\n27 FF\n95 XB\n83 PT\n32 FU\n1 P\n99 U\n21 F\n14 O\n62 FO\n30 FF\n46 OB\n7 P\n38 PL\n45 FS\n64 LT\n63 XB\n98 FO\n76 UH\n60 XS\n54 PF\n92 L\n39 FU\n72 OS\n41 FO\n22 FF\n89 FP\n28 PU\n93 LF\n38 PF\n76 LT\n69 OU\n31 B\n3 P\n56 FF\n73 SF\n19 PS\n62 OF\n98 FH\n96 SS\n77 FP\n18 PX\n20 H\n83 U\n7 L\n4 F\n44 FX\n15 PO\n34 H\n53 PP\n1 P\n94 UB\n41 OS\n12 L\n32 X\n22 S\n53 XP\n56 FU\n45 FP\n84 UX\n25 FT\n34 X\n9 L\n69 PX\n56 OH\n66 OX\n94 PL\n96 PF\n39 FX\n82 PL\n96 BF\n15 PP\n12 B\n28 P\n97 OT\n45 S\n3 F\n40 PO\n23 PL\n30 PO\n31 FP\n44 PS\n36 FT\n94 U\n83 FP\n52 B\n22 B\n80 OP\n37 FO\n95 ST\n5 F\n80 ST\n70 OL\n70 FX\n65 XU\n61 XL\n15 PL\n91 FT\n66 XB\n13 F\n3 F\n39 OO\n86 FO\n43 B\n40 X\n63 XF\n40 PB\n96 U\n24 PL\n17 O\n29 PX\n9 O\n25 O\n62 FX\n81 X\n20 PF\n4 X\n37 FS\n35 L\n85 LU\n2 F\n63 XH\n71 XL\n43 PP\n4 F\n51 XS\n2 P\n54 LP\n61 OT\n1 P\n71 FH\n32 PS\n44 XF\n29 U\n42 OS\n58 PB\n78 XU\n67 F\n73 XO\n74 US\n40 L\n91 HB\n6 O\n48 PX\n76 OP\n74 OO\n68 UH\n22 P\n48 XU\n55 XF\n55 PX\n82 FF\n10 O\n59 FL\n84 UH\n63 PO\n60 LH\n13 F\n84 SS\n85 PP\n59 FL\n62 LF\n51 O\n57 XH\n35 OX\n61 XX\n52 OX\n48 PL\n48 XL\n56 FH\n43 OS\n10 X\n13 PO\n38 B\n61 LS\n68 LO\n97 FX\n76 FS\n42 OO\n84 UB\n59 FB\n85 FL\n77 SX\n7 F\n73 FS\n43 OU\n81 F\n49 F\n51 OS\n28 PH\n74 UL\n86 LS\n69 FH\n3 P\n48 OS\n59 OH\n88 B\n60 FH\n37 OO\n42 XP\n95 FL\n84 S\n9 L\n47 PT\n90 UT\n93 OF\n74 FO\n47 O\n46 PH\n65 XF\n88 HT\n56 OB\n43 FH\n61 U\n7 U\n29 PU\n14 B\n83 UX\n87 O\n36 FH\n79 XX\n87 OX\n2 P\n86 UU\n80 OO\n17 S\n11 H\n68 UH\n27 FX\n83 PF\n68 OP\n47 PB\n97 XL\n50 B\n49 FB\n20 PH\n60 OS\n20 PT\n14 PP\n23 F\n71 OT\n51 PS\n85 XP\n37 FU\n79 OT\n23 PT\n44 F\n72 LP\n61 PS\n68 OT\n13 U\n45 OP\n15 PF\n42 XP\n68 OO\n28 PS\n91 UT\n12 H\n70 US\n30 PT\n24 P\n80 OO\n82 SU\n5 O\n68 LX\n22 PT\n5 O\n96 PO\n19 F\n46 OH\n39 PH\n63 PH\n73 UX\n54 PU\n45 U\n78 OX\n46 OL\n31 FF\n89 UU\n68 LL\n87 HU\n33 L\n35 FT\n95 U\n14 B\n2 P\n52 OB\n75 XL\n86 US\n50 OB\n4 O\n27 O\n22 PB\n24 PX\n23 PB\n13 H\n62 LX\n58 XB\n75 LF\n59 FO\n86 OH\n26 FP\n65 PX\n85 FL\n43 P\n89 SP\n77 LX\n73 PO\n99 BB\n96 SO\n1 P\n94 LU\n43 PL\n77 FP\n24 PB\n91 HL\n59 FU\n78 FP\n21 PF\n43 FT\n96 PF\n85 PH\n71 FU\n62 FO\n84 SO\n12 PT\n87 L\n65 XO\n42 PS\n98 XS\n21 FP\n90 FB\n3 O\n74 OX\n51 LP\n92 ST\n2 P\n82 ST\n17 PO\n70 UF\n99 OB\n39 OS\n42 P\n44 XX\n94 LT\n53 XX\n37 F\n93 U\n46 PP\n58 FH\n67 FU\n77 XB\n64 OT\n77 PO\n26 FU\n31 PS\n80 SX\n87 PO\n37 FU\n19 F\n89 XF\n24 U\n71 XU\n96 HS\n29 PS\n66 PL\n52 OH\n18 PF\n45 XF\n62 PH\n24 FX\n48 OL\n61 FS\n24 PH\n20 PP\n62 FF\n26 S\n71 FB\n21 PH\n97 SO\n5 L\n41 FP\n53 LO\n64 PT\n85 UL\n88 LF\n32 FO\n53 H\n65 OT\n64 OF\n85 PL\n95 LO\n65 OO\n26 FX\n50 XX\n39 FO\n19 P\n49 FO\n55 PS\n15 PF\n58 PB\n78 PF\n90 FB\n42 S\n12 S\n45 XL\n99 XX\n59 FF\n18 PH\n73 OP\n53 XU\n5 L\n15 PT\n93 OX\n73 XO\n26 PP\n17 PO\n27 PL\n6 F\n6 L\n43 OB\n43 OL\n34 P\n68 FH\n10 S\n54 FH\n47 FB\n2 F\n55 OS\n77 XO\n82 F\n31 FO\n41 F\n14 PX\n72 FF\n53 FB\n21 U\n85 F\n61 PT\n79 SF\n23 PB\n62 OS\n49 OO\n48 PT\n82 XB\n40 FX\n73 FT\n32 FL\n16 P\n28 FF\n19 PT\n57 PO\n38 FP\n74 LU\n94 LP\n91 FS\n81 XO\n93 UU\n49 FS\n1 P\n71 S\n35 OX\n82 XS\n69 PT\n42 XP\n84 OO\n42 FX\n67 OO\n29 FU\n83 U\n50 F\n60 LB\n41 PP\n88 P\n45 OX\n74 FX\n8 X\n74 UL\n36 FU\n51 PB\n5 F\n57 XL\n69 OT\n75 OO\n34 PP\n61 X\n8 O\n85 SP\n9 X\n68 LU\n56 OH\n25 FF\n86 P\n81 XU\n99 SF\n99 LX\n49 FO\n17 U\n8 O\n64 UT\n5 L\n28 FF\n75 OF\n17 P\n38 OO\n69 UP\n58 XP\n5 P\n10 O\n46 OH\n77 XF\n52 U\n10 P\n9 X\n94 PX\n57 FF\n74 SO\n94 B\n38 OT\n75 LP\n55 XO\n44 PX\n85 XU\n92 LU\n64 XH\n62 FX\n98 XU\n24 B\n59 OP\n7 F\n43 F\n54 FT\n88 OL\n73 PS\n22 PH\n32 PO\n64 OL\n24 PX\n45 XX\n24 PS\n42 FU\n50 PU\n22 PL\n40 S\n23 PU\n11 B\n1 P\n7 F\n82 OT\n74 SP\n19 PS\n13 PO\n41 OH\n36 H\n12 L\n46 B\n51 OL\n74 PS\n32 PT\n98 PH\n8 H\n45 P\n84 X\n74 UB\n67 FX\n52 OF\n93 UB\n47 XO\n98 BF\n15 PT\n67 LF\n94 XF\n71 XU\n9 U\n38 PB\n85 OX\n68 FB\n30 PP\n60 LS\n44 OB\n64 PU\n68 U\n36 FS\n65 FS\n49 PO\n55 FP\n78 LU\n28 FU\n64 O\n42 O\n3 F\n30 FH\n41 FS\n60 OT\n28 FH\n17 L\n46 FU\n80 FB\n91 FX\n25 FF\n83 PS\n39 OS\n72 FF\n66 XO\n99 FU\n52 XB\n72 LX\n88 UF\n28 PH\n92 SO\n46 L\n26 PB\n21 F\n94 PH\n94 LF\n18 O\n23 P\n34 L\n36 FX\n56 H\n17 PT\n22 H\n12 S\n56 PX\n49 PU\n26 S\n71 FT\n99 XS\n79 FS\n58 OU\n9 P\n68 OT\n18 H\n29 B\n66 P\n98 OX\n66 S\n2 P\n15 PL\n86 OT\n48 PH\n34 F\n80 SB\n67 PO\n95 XB\n17 PU\n68 OT\n23 PT\n20 PU\n96 SF\n4 O\n36 OU\n12 S\n48 FP\n26 FX\n57 OP\n80 LB\n77 B\n77 SX\n57 XP\n81 HP\n3 P\n99 FL\n61 LU\n53 FO\n17 L\n18 P\n39 PP\n44 FO\n99 LB\n15 F\n84 LO\n44 F\n77 U\n14 B\n3 P\n57 PX\n36 F\n79 UO\n32 U\n73 OP\n65 OS\n67 FT\n64 S\n73 UU\n22 X\n46 OO\n62 OT\n48 PX\n65 OH\n76 OS\n65 FS\n70 LT\n80 SP\n68 LF\n40 XT\n17 P\n92 FF\n5 F\n44 PL\n77 OF\n73 PU\n61 PF\n77 O\n29 FX\n20 PF\n58 FU\n8 O\n62 PB\n45 XO\n82 PU\n86 S\n62 FX\n13 PO\n72 OX\n26 FX\n94 HB\n37 OP\n9 X\n7 X\n81 OX\n22 PX\n8 S\n64 OP\n85 XB\n30 FS\n70 OS\n97 L\n93 FB\n95 SB\n54 OH\n91 LX\n70 S\n34 FT\n52 XU\n27 PU\n10 L\n94 XH\n31 FP\n55 PL\n69 UF\n39 X\n62 FU\n73 PF\n73 XP\n14 U\n5 X\n75 PB\n91 FP\n1 P\n84 PF\n59 XL\n63 FS\n50 OL\n99 X\n29 X\n52 XP\n33 FO\n89 SO\n8 P\n49 OH\n70 OU\n10 P\n98 FH\n91 ST\n10 U\n62 PT\n18 F\n29 P\n56 XF\n65 PO\n2 F\n18 B\n15 L\n30 L\n9 S\n30 PO\n65 OB\n94 LH\n71 PP\n41 OS\n86 XX\n33 FU\n39 PX\n14 F\n42 U\n56 XL\n27 PX\n77 XO\n82 SO\n35 F\n60 XS\n21 F\n92 BT\n52 OL\n61 LB\n4 F\n23 F\n58 OF\n47 PX\n73 SF\n54 OT\n83 XS\n36 OX\n46 FB\n32 PS\n16 PP\n85 HL\n14 PF\n41 OF\n88 OF\n65 XX\n58 LX\n4 F\n12 PF\n51 FX\n92 BP\n81 XP\n94 OP\n16 PX\n4 F\n79 XT\n19 PH\n34 FP\n76 PU\n88 OT\n64 OS\n1 P\n31 PO\n62 OF\n84 XT\n52 LT\n35 FO\n34 L\n59 FP\n57 F\n1 P\n30 L\n11 S\n64 LU\n31 H\n72 F\n40 X\n88 XO\n71 LF\n5 X\n44 L\n9 F\n97 L\n37 B\n95 LF\n31 PF\n54 PP\n91 PF\n44 OL\n67 XT\n80 OH\n78 LH\n58 LU\n65 OT\n7 O\n72 PT\n89 B\n47 XO\n79 PF\n44 OO\n7 U\n29 FO\n72 US\n70 L\n61 PS\n52 S\n35 P\n34 PB\n41 FP\n84 HF\n53 FH\n92 LU\n46 P\n92 FO\n79 FF\n25 B\n83 XB\n81 LO\n53 H\n96 SO\n94 B\n40 FX\n96 FL\n13 X\n91 XF\n2 F\n54 XU\n85 FP\n21 H\n42 FU\n92 HU\n53 FU\n58 U\n32 PX\n54 FO\n87 XB\n36 H\n76 UU\n37 PO\n42 PS\n13 O\n89 UO\n47 PP\n40 L\n57 FU\n27 FP\n74 XB\n18 PH\n57 XB\n54 X\n26 PF\n17 PX\n24 PL\n71 B\n82 FF\n92 OU\n32 U\n86 LF\n8 H\n49 PF\n77 OB\n83 XT\n79 OL\n23 X\n81 UT\n16 X\n81 PT\n45 X\n74 XT\n52 OT\n47 PS\n86 SX\n96 LO\n50 PP\n34 OP\n63 UF\n77 B\n58 LO\n42 FL\n55 F\n5 P\n31 PL\n78 UX\n8 U\n7 F\n52 XT\n81 OL\n62 LO\n13 PT\n55 B\n60 FS\n29 PU\n3 P\n89 PO\n20 S\n44 FL\n35 PH\n8 U\n15 H\n92 FH\n90 UF\n17 X\n1 P\n78 OF\n94 HH\n54 F\n36 OL\n1 P\n46 U\n7 L\n71 O\n25 PS\n76 FS\n13 P\n39 F\n81 PS\n20 PH\n49 PT\n97 SP\n5 P\n24 PO\n33 PB\n59 B\n41 F\n77 PX\n1 P\n78 UP\n37 PX\n11 O\n29 FL\n73 S\n20 PU\n28 FO\n61 OU\n93 PT\n90 PP\n24 FT\n40 PL\n46 OP\n26 FF\n23 PU\n99 PL\n13 O\n41 OX\n13 PO\n29 O\n74 LX\n22 PX\n1 P\n47 O\n14 PX\n3 P\n21 PT\n76 LF\n6 P\n71 P\n18 PF\n62 O\n50 FH\n5 O\n21 U\n72 XO\n71 XS\n15 P\n62 FH\n27 H\n50 OH\n57 OX\n16 O\n52 L\n50 H\n63 UP\n85 HX\n33 FU\n24 FX\n9 L\n71 PT\n72 LP\n59 FT\n93 SS\n34 FL\n30 P\n68 OP\n54 S\n76 XP\n44 S\n14 U\n2 F\n19 U\n45 PX\n1 P\n26 X\n8 X\n20 PB\n3 P\n44 PP\n75 UX\n36 PS\n20 H\n70 FT\n44 PL\n19 PL\n10 B\n49 OU\n77 XB\n17 PO\n57 XP\n70 OO\n69 LH\n62 F\n53 PL\n85 OT\n17 U\n34 FH\n25 PS\n13 P\n59 PX\n49 FX\n20 FT\n33 OO\n35 PP\n17 F\n48 S\n72 XO\n82 SX\n2 F\n59 LS\n73 P\n88 PH\n28 FS\n57 S\n85 SB\n60 OO\n39 OP\n34 H\n71 PB\n6 O\n96 S\n92 F\n65 UT\n16 PX\n12 U\n78 PU\n79 OO\n4 O\n88 LF\n98 OL\n57 OO\n85 LS\n65 S\n73 XO\n87 HL\n33 F\n52 LT\n95 HU\n87 HS\n54 LP\n85 XL\n12 PT\n31 F\n6 U\n21 PB\n8 H\n31 FU\n66 U\n41 FO\n64 FB\n29 FU\n58 XP\n9 S\n86 HU\n78 B\n27 H\n54 XH\n73 SO\n42 FX\n50 XP\n3 F\n5 P\n88 OS\n3 F\n67 UT\n2 F\n72 XF\n33 PB\n29 PS\n80 FB\n49 XT\n5 P\n16 PT\n59 OU\n39 S\n69 UB\n74 OS\n74 UP\n14 P\n93 FT\n15 X\n84 S\n59 O\n82 UL\n99 FF\n19 PO\n27 S\n57 PT\n24 X\n59 X\n76 OX\n79 US\n44 FT\n34 P\n42 FT\n72 XH\n64 OO\n34 FO\n23 PX\n62 LS\n99 HX\n71 PL\n11 F\n13 PT\n71 XH\n98 US\n23 B\n79 SX\n59 OT\n4 X\n13 PO\n41 PS\n34 FP\n31 FH\n84 HT\n74 PS\n16 PF\n43 PS\n72 O\n43 PP\n75 LU\n35 FP\n29 FH\n94 BT\n60 LS\n33 PF\n94 PO\n21 H\n68 XB\n7 X\n16 P\n49 PB\n21 PL\n22 PH\n27 F\n19 O\n26 X\n45 OP\n30 PB\n17 X\n52 U\n78 F\n59 OH\n31 PB\n90 SL\n73 PB\n34 B\n85 OS\n69 OX\n35 PX\n64 OP\n23 PB\n47 PF\n10 S\n46 PL\n46 PB\n72 PS\n2 F\n30 PS\n96 SP\n48 OU\n24 S\n74 FX\n89 HF\n19 U\n68 P\n20 P\n69 PH\n30 PT\n34 L\n83 OS\n35 U\n34 FP\n76 PS\n15 PX\n65 PO\n94 XX\n39 OT\n71 OT\n49 PB\n40 FS\n77 UT\n85 UT\n87 LO\n43 XP\n50 PB\n73 LU\n31 PU\n65 X\n4 P\n84 LB\n72 F\n28 PX\n93 UX\n23 PT\n79 ST\n90 PS\n45 PL\n66 PT\n25 PB\n76 FB\n28 PH\n13 X\n94 B\n39 PP\n45 XO\n64 FX\n28 U\n97 U\n35 PS\n73 UT\n93 FL\n87 SH\n71 US\n17 F\n10 P\n65 OU\n16 PP\n23 PO\n42 OT\n22 PL\n78 SS\n41 FT\n23 S\n26 PF\n47 XF\n46 O\n81 FX\n85 XH\n93 FU\n86 HP\n88 LX\n32 L\n95 FP\n53 O\n85 HO\n80 SU\n6 X\n20 FT\n32 B\n82 FL\n64 F\n20 PH\n87 HO\n56 PL\n91 PX\n33 PF\n5 O\n91 FH\n25 FF\n27 S\n26 FU\n91 LX\n53 U\n31 FB\n9 P\n62 OS\n5 O\n19 O\n71 OF\n54 XP\n24 PL\n67 XU\n66 PL\n91 SL\n89 LS\n26 FP\n8 P\n18 PF\n67 FB\n54 PO\n46 PP\n47 PX\n23 S\n17 PT\n14 B\n29 U\n66 OU\n93 UP\n2 F\n97 P\n37 PT\n23 H\n14 PT\n42 OF\n50 OT\n17 PP\n56 XT\n15 PF\n71 PH\n83 PU\n72 FU\n94 HX\n48 PB\n46 FO\n32 PU\n87 XB\n46 B\n93 XH\n41 FP\n48 L\n62 OH\n31 L\n16 X\n9 P\n44 OU\n50 PH\n20 L\n87 XX\n89 LO\n23 H\n59 XP\n44 PL\n14 P\n45 FB\n52 X\n16 PX\n22 S\n85 L\n42 S\n39 P\n66 FL\n97 H\n89 UP\n62 PT\n82 XP\n89 OF\n21 H\n88 LT\n41 PP\n32 L\n12 PF\n11 PP\n98 XU\n11 L\n21 X\n61 PU\n19 PP\n39 PO\n29 PX\n26 FT\n56 OS\n63 FT\n23 PO\n19 X\n45 PL\n69 X\n9 L\n77 OF\n24 O\n91 LF\n67 XL\n41 PH\n62 FO\n23 U\n60 OX\n38 FB\n18 PF\n37 PX\n85 SS\n95 PU\n98 XX\n94 OO\n7 P\n98 ST\n39 FP\n92 OB\n21 B\n76 X\n38 FF\n12 O\n46 PX\n81 OT\n43 X\n87 SO\n39 O\n53 OO\n61 F\n49 XS\n21 PT\n14 B\n14 B\n69 B\n78 SX\n86 XH\n97 FL\n20 PO\n56 OF\n56 FH\n99 OT\n93 LB\n90 LH\n78 UF\n59 OL\n87 XT\n73 XS\n62 OL\n90 PB\n21 PO\n72 LU\n37 PX\n87 XT\n46 F\n98 SX\n98 UX\n65 FF\n26 FP\n85 LX\n47 FS\n84 FT\n22 B\n50 PF\n7 L\n66 OO\n69 XS\n88 OX\n15 PX\n49 PX\n71 PT\n70 OH\n11 U\n87 FX\n89 PH\n14 PT\n71 P\n77 UX\n83 SH\n7 O\n88 PO\n51 OL\n9 O\n59 FL\n17 U\n31 PL\n19 F\n37 OP\n58 B\n38 PO\n46 U\n46 U\n77 OL\n27 B\n31 PX\n32 PL\n57 L\n98 FU\n70 OO\n83 OT\n65 FB\n3 P\n22 B\n39 PS\n47 O\n75 SF\n59 PU\n80 UU\n22 U\n71 OH\n50 OB\n69 UF\n89 US\n11 L\n32 FT\n86 SB\n4 F\n46 PL\n25 PF\n97 LB\n89 UF\n57 LS\n77 LO\n69 OO\n20 PT\n90 LU\n8 U\n41 FH\n75 X\n69 S\n69 F\n8 O\n79 XS\n59 OS\n9 O\n86 XT\n55 FX\n19 P\n72 FB\n48 XF\n39 L\n45 XO\n75 U\n79 LL\n27 PH\n43 PL\n49 F\n90 SB\n46 X\n13 PF\n9 F\n3 P\n31 OP\n39 FX\n41 OO\n12 PT\n79 FT\n2 F\n62 XS\n1 P\n98 OP\n73 XO\n62 PS\n94 FO\n56 LO\n24 H\n40 PT\n8 S\n84 XP\n59 LH\n83 PP\n35 FO\n16 H\n65 XS\n55 OL\n89 PP\n28 U\n21 FP\n39 PF\n30 FX\n90 UT\n53 OO\n58 LT\n21 PX\n11 P\n61 FP\n16 PX\n59 LT\n35 U\n76 FB\n47 B\n49 XL\n14 B\n14 O\n97 LU\n6 F\n71 FL\n96 PT\n12 PT\n27 FF\n24 PO\n6 P\n95 PL\n71 UT\n7 X\n66 FB\n47 PT\n42 PT\n90 HU\n30 FB\n16 H\n44 FP\n44 OO\n74 LO\n54 OX\n72 PU\n61 FX\n63 OH\n67 PF\n49 FX\n45 PS\n72 OU\n61 FL\n46 FL\n80 LO\n31 OT\n53 PS\n54 B\n74 LO\n65 LL\n88 SP\n21 PF\n96 UL\n18 P\n86 P\n82 FH\n65 PS\n95 LH\n59 XT\n31 S\n3 P\n86 XS\n13 F\n54 PH\n8 S\n3 O\n14 B\n10 P\n34 OT\n14 U\n44 L\n88 HU\n74 X\n27 FS\n78 US\n41 XT\n43 OF\n44 PP\n22 F\n69 PH\n24 PL\n69 XP\n13 U\n46 FH\n70 UX\n64 LO\n15 U\n30 FU\n57 OT\n30 PH\n52 OX\n42 PL\n51 XP\n85 PU\n90 PF\n16 PP\n6 F\n29 FS\n70 S\n10 PT\n57 X\n99 FF\n9 O\n22 PB\n76 FO\n77 B\n48 XH\n99 LX\n89 SU\n97 XP\n98 HO\n43 P\n51 PP\n65 PL\n75 XX\n24 FX\n50 PT\n60 FU\n21 PH\n28 FX\n57 XX\n91 SO\n74 OL\n46 OT\n99 XH\n62 LX\n19 PF\n34 FB\n16 H\n91 SS\n83 PL\n92 LP\n21 X\n13 PP\n53 FL\n76 XL\n35 FL\n53 FT\n14 U\n93 OL\n45 OU\n10 P\n7 P\n13 PT\n24 FO\n15 PX\n44 FB\n21 B\n58 FB\n28 FF\n63 OB\n24 L\n65 LT\n38 FL\n48 OH\n5 X\n35 PL\n69 S\n33 L\n85 PX\n85 SP\n65 FS\n20 U\n66 OX\n28 FU\n81 SB\n3 P\n61 X\n86 OS\n69 UP\n73 LF\n48 FU\n1 P\n72 OP\n15 S\n34 FO\n87 SU\n91 PH\n42 OL\n90 HH\n27 B\n86 OL\n9 U\n8 H\n5 O\n85 O\n27 PS\n80 FF\n81 FS\n62 PB\n60 PS\n67 OO\n93 HT\n70 FU\n13 L\n85 FB\n7 O\n15 PL\n19 PX\n32 H\n92 PH\n80 LX\n95 BL\n13 X\n55 OP\n40 OB\n26 H\n63 LP\n40 O\n75 XB\n37 FU\n83 LS\n8 H\n33 FS\n32 PB\n81 LO\n35 FF\n70 FL\n38 PS\n30 U\n21 X\n52 FH\n86 FS\n97 PU\n49 PB\n12 H\n72 S\n6 L\n91 OT\n21 FT\n34 F\n86 L\n93 LF\n27 FT\n33 OF\n62 H\n59 PF\n79 FB\n26 FT\n73 SO\n81 UO\n42 H\n97 PH\n47 PH\n69 LU\n75 PO\n42 H\n11 PP\n87 XL\n16 S\n42 PO\n30 PX\n59 PX\n67 PT\n57 LF\n96 HF\n21 X\n1 P\n98 PH\n33 PB\n13 P\n48 XF\n28 PB\n83 SO\n63 LX\n75 LX\n43 PT\n90 XH\n17 PP\n70 OO\n15 L\n85 SB\n29 FL\n51 XL\n80 PU\n87 PB\n33 PF\n47 PB\n43 PP\n91 FS\n40 OX\n49 FT\n84 XO\n76 UL\n59 LB\n57 XO\n7 P\n11 X\n38 OS\n16 PO\n69 LH\n44 OU\n24 PU\n89 US\n2 F\n14 O\n51 XH\n19 H\n50 PF\n38 FU\n14 PF\n79 LF\n66 FU\n39 OL\n3 O\n92 F\n34 PX\n73 FT\n66 XP\n26 PB\n27 PL\n24 PT\n98 XF\n38 PH\n27 PU\n69 LS\n87 HF\n44 FU\n38 OH\n77 FF\n9 S\n30 FP\n13 PO\n40 PF\n87 SO\n89 PO\n87 XO\n50 OB\n75 LB\n55 LO\n54 PX\n5 P\n31 PX\n37 PX\n30 FU\n95 PX\n4 P\n16 F\n95 XF\n26 PB\n94 PL\n25 FX\n1 P\n62 B\n40 OH\n81 XX\n17 O\n84 XS\n42 PT\n8 S\n8 F\n54 PS\n96 OH\n29 FO\n81 FB\n79 XO\n98 FF\n24 X\n59 XL\n39 FT\n41 OB\n23 FT\n67 XO\n17 PO\n13 F\n54 XU\n59 XH\n24 PX\n84 US\n45 FO\n54 OT\n61 LH\n65 XL\n50 XT\n1 P\n2 P\n5 P\n93 UO\n11 O\n69 US\n31 FF\n23 PS\n6 F\n14 U\n70 FS\n61 FP\n63 LF\n69 PP\n1 P\n57 OH\n40 PT\n42 PP\n65 PL\n9 F\n88 UX\n32 X\n42 XP\n26 PL\n68 LP\n17 B\n46 U\n2 F\n29 H\n15 PT\n28 FF\n88 SH\n58 PB\n53 OT\n79 LO\n38 FS\n92 UL\n14 PT\n21 O\n79 LF\n17 PF\n48 U\n33 PS\n84 XP\n65 OU\n47 S\n64 PU\n3 O\n26 PB\n73 OX\n69 XP\n23 U\n1 P\n33 H\n55 LX\n19 PH\n89 PU\n42 OT\n83 LP\n61 PP\n52 XS\n51 FT\n29 PP\n74 PB\n65 XU\n3 P\n42 F\n42 FO\n64 UP\n62 XH\n93 U\n49 O\n41 PL\n69 O\n92 PO\n29 PX\n3 F\n24 S\n5 X\n84 PT\n66 PO\n95 OS\n89 XB\n50 X\n2 P\n95 UT\n30 X\n49 PF\n50 PP\n24 PT\n19 PB\n76 SO\n65 PH\n65 FS\n84 H\n88 SF\n20 B\n96 LH\n26 FP\n35 FO\n71 LF\n1 P\n71 ST\n96 OF\n17 U\n3 O\n10 F\n66 FB\n92 PU\n29 FS\n27 U\n87 UX\n86 UH\n27 H\n87 PO\n27 X\n85 XF\n10 S\n5 P\n7 P\n64 XP\n61 OT\n83 H\n79 XB\n9 U\n25 U\n54 FS\n68 PP\n10 B\n63 LH\n5 F\n89 UX\n25 FL\n39 FB\n41 OL\n83 XX\n74 UF\n57 FB\n14 P\n45 PT\n75 UU\n2 F\n55 OO\n76 XS\n18 B\n75 OX\n94 UL\n52 XB\n64 OX\n15 PT\n33 PO\n33 B\n46 P\n39 O\n44 PT\n77 L\n57 OO\n57 LS\n32 PX\n4 P\n48 XO\n45 PH\n59 LS\n67 UX\n51 FP\n49 PP\n44 OF\n55 XL\n81 FB\n69 UH\n25 FF\n38 F\n67 UT\n12 F\n45 PB\n65 LL\n69 PL\n31 H\n91 SH\n92 SP\n36 FP\n15 L\n19 U\n16 P\n32 FX\n82 UT\n46 O\n5 L\n58 PF\n1 P\n71 PP\n65 B\n47 PL\n3 O\n22 U\n68 LP\n92 BP\n7 S\n68 PB\n52 XO\n91 LL\n78 OB\n64 X\n87 SF\n26 PU\n94 SX\n28 F\n23 FT\n91 FO\n21 O\n65 FO\n3 F\n63 PO\n74 UT\n48 PP\n90 FT\n10 P\n78 OS\n60 PP\n25 FX\n13 U\n80 XX\n7 X\n86 OB\n47 XX\n97 FS\n46 PU\n3 P\n66 XL\n89 XO\n5 P\n47 OS\n4 F\n96 HF\n55 OT\n25 PB\n91 SH\n4 P\n72 B\n77 UL\n94 PF\n38 S\n35 PL\n30 FU\n26 F\n24 PH\n84 SH\n38 PL\n9 S\n88 FL\n33 FB\n42 FU\n84 PF\n79 OO\n45 OT\n68 OB\n65 PS\n13 PP\n38 OS\n38 OT\n1 P\n79 OS\n53 OP\n27 FS\n21 U\n30 PX\n38 OP\n41 PS\n18 PU\n92 PT\n7 P\n16 PO\n23 PB\n44 PS\n94 OO\n1 P\n25 PF\n61 FH\n98 FT\n8 L\n50 OF\n94 PO\n38 OO\n53 XL\n21 PF\n20 PS\n23 PB\n26 X\n47 OO\n69 XB\n68 XU\n66 PX\n80 SU\n85 LX\n43 FL\n54 OH\n70 UF\n43 FU\n1 P\n6 U\n74 PF\n37 PU\n67 LH\n85 PO\n78 SS\n14 PF\n4 F\n96 FP\n6 P\n92 X\n98 B\n45 OS\n32 FH\n45 XP\n30 FF\n2 F\n44 OO\n7 U\n11 X\n55 XT\n64 XL\n82 FL\n58 XT\n70 PO\n90 UX\n54 XP\n5 P\n76 UT\n44 PO\n3 F\n67 UU\n21 PF\n95 PX\n57 X\n16 S\n96 HH\n64 FS\n36 FT\n58 XP\n60 OT\n55 OX\n40 FX\n8 F\n7 S\n78 FB\n48 OL\n35 OT\n93 FT\n13 PO\n57 PP\n24 H\n31 PT\n73 P\n7 X\n53 FP\n51 XX\n17 F\n25 FF\n57 XP\n90 XF\n82 FT\n90 B\n14 H\n69 PL\n47 FO\n12 X\n21 PP\n54 XX\n16 PT\n88 OU\n98 S\n65 XT\n51 XO\n54 FL\n30 OT\n56 OT\n81 OH\n15 PF\n97 SB\n41 FS\n88 PP\n32 PB\n91 LT\n16 PT\n26 PH\n86 LX\n13 P\n38 FS\n56 FU\n56 LU\n29 P\n89 FF\n53 XB\n63 PF\n1 P\n64 FX\n76 H\n40 OL\n75 SL\n4 P\n88 UB\n81 FU\n26 S\n13 L\n23 P\n75 OT\n7 O\n26 P\n49 P\n15 O\n10 L\n66 FL\n72 SF\n7 F\n77 PX\n18 F\n35 FT\n74 LF\n62 OT\n25 PP\n71 XL\n35 PP\n36 FH\n46 B\n27 H\n7 L\n62 O\n5 O\n16 X\n34 X\n83 FH\n98 LU\n3 O\n49 PH\n86 LO\n10 B\n42 FF\n81 XB\n47 XX\n55 XT\n47 FX\n80 FH\n27 B\n50 S\n71 XP\n47 OX\n84 XU\n78 SS\n99 LL\n27 B\n44 OT\n96 OH\n40 XT\n88 HU\n25 O\n77 UF\n45 XT\n32 PU\n40 FU\n46 OB\n70 XX\n12 X\n44 X\n50 FO\n46 XL\n39 L\n22 X\n23 F\n96 OH\n72 LT\n74 OH\n14 PP\n76 XS\n44 PB\n18 PX\n1 P\n48 OL\n39 O\n82 U\n13 P\n45 XO\n34 PS\n64 XS\n82 HP\n8 H\n34 X\n77 SU\n59 OP\n12 PF\n77 SO\n99 FH\n8 F\n4 X\n95 SF\n64 LB\n4 F\n13 S\n15 PT\n76 XB\n13 B\n50 PF\n44 PP\n85 OS\n27 L\n90 OT\n30 FX\n78 X\n36 FS\n9 L\n13 U\n67 OS\n49 OX\n78 UL\n29 FH\n58 XB\n52 OB\n50 XF\n47 L\n52 OS\n57 LS\n1 P\n33 FL\n66 B\n49 XO\n50 S\n42 FB\n10 F\n60 XL\n18 L\n93 SX\n17 X\n14 B\n6 F\n13 PP\n89 PL\n9 H\n84 SB\n42 OL\n41 PB\n39 PT\n14 PP\n82 XU\n12 U\n38 PU\n88 UF\n76 OS\n64 OL\n80 UX\n66 OF\n5 P\n84 LU\n42 PF\n87 PH\n52 OL\n93 OB\n25 PX\n89 FP\n35 X\n12 F\n76 LB\n74 LL\n7 L\n4 O\n81 LS\n31 PF\n83 S\n90 F\n54 O\n19 L\n84 LF\n90 PT\n12 H\n7 F\n29 FO\n16 PO\n35 FO\n54 H\n1 P\n14 PP\n9 B\n98 FF\n34 X\n91 OF\n96 SU\n40 OH\n67 XB\n36 PS\n91 SO\n41 OB\n69 FS\n50 PT\n3 P\n79 LF\n33 O\n90 OU\n5 X\n16 F\n69 FT\n1 P\n43 FP\n42 FU\n40 PB\n69 OF\n20 PF\n50 OU\n61 OU\n61 LT\n16 S\n6 F\n60 OX\n47 PS\n4 F\n22 PP\n91 FF\n83 XL\n33 PP\n6 P\n57 X\n54 LX\n72 B\n14 PT\n29 FT\n24 PS\n28 FT\n41 FO\n15 U\n78 OO\n27 U\n65 PX\n18 PT\n1 P\n85 UH\n20 FT\n78 FH\n29 X\n88 OB\n61 FH\n48 XX\n25 PF\n58 OF\n29 FL\n65 XO\n31 PL\n76 XH\n43 PX\n10 L\n14 X\n1 P\n17 PP\n61 H\n76 XU\n75 P\n79 S\n13 O\n84 UU\n56 P\n83 HP\n85 OX\n56 FU\n28 PX\n40 S\n9 O\n51 FB\n64 UO\n55 PH\n99 FP\n39 PU\n75 XX\n15 B\n59 PP\n82 PF\n99 HU\n9 S\n69 LS\n38 FU\n18 L\n32 H\n25 PX\n48 OL\n76 XS\n48 XH\n61 PH\n5 P\n42 OT\n53 OP\n33 PT\n80 UF\n88 SS\n5 O\n82 P\n73 XX\n46 P\n29 PO\n41 PX\n14 PF\n83 FB\n88 ST\n6 X\n23 PF\n31 O\n77 PP\n6 P\n28 PO\n4 P\n61 OH\n72 UP\n62 FX\n80 FB\n16 U\n52 OS\n48 PT\n5 F\n56 OB\n10 F\n90 LF\n33 PL\n67 XL\n90 LO\n90 OS\n78 UB\n11 B\n81 LH\n50 OF\n28 PX\n77 LU\n74 L\n33 PX\n53 FH\n42 OB\n11 B\n30 FB\n11 B\n88 XP\n28 U\n36 PX\n66 OO\n94 HS\n75 PO\n85 UU\n4 X\n37 PS\n16 P\n15 B\n23 H\n22 O\n47 PH\n18 U\n14 O\n2 F\n11 PT\n49 FB\n30 U\n41 PL\n93 HL\n58 LH\n75 FL\n16 L\n29 PP\n30 PB\n90 LX\n51 FU\n24 PL\n37 PT\n34 FB\n55 LF\n73 PU\n12 L\n73 L\n98 HX\n15 L\n43 PF\n53 XT\n31 P\n28 PO\n57 FU\n43 S\n95 OH\n39 B\n81 ST\n9 X\n61 XT\n79 O\n24 F\n7 O\n63 LH\n27 PF\n31 PX\n56 XH\n55 FP\n89 US\n89 XX\n54 OF\n15 PP\n81 XU\n44 FP\n4 O\n41 OP\n89 O\n54 PT\n46 FL\n98 LS\n81 L\n24 L\n81 XT\n15 S\n82 FL\n29 L\n69 XT\n82 UP\n69 XH\n43 FO\n20 PL\n75 OF\n66 XB\n99 PT\n56 PP\n19 PS\n50 LT\n12 X\n78 H\n12 PT\n23 P\n12 PF\n6 O\n18 PX\n60 OP\n14 S\n65 LX\n46 FU\n21 PU\n20 PX\n28 PO\n3 O\n45 PP\n15 PX\n46 P\n1 P\n36 X\n72 UX\n82 FP\n35 B\n19 U\n15 L\n30 OT\n82 UL\n10 P\n67 UP\n41 PS\n74 LO\n47 XU\n23 U\n99 F\n74 UB\n52 P\n38 S\n73 PX\n27 PL\n72 OF\n39 X\n24 B\n92 F\n50 OS\n8 P\n42 XT\n37 PL\n43 H\n53 PO\n80 XO\n21 B\n8 H\n23 FT\n58 FL\n39 OS\n33 FF\n63 LH\n9 S\n35 OF\n27 PF\n14 L\n68 OB\n51 LP\n51 PU\n22 PO\n18 X\n25 FL\n69 LU\n4 F\n90 SL\n65 X\n32 PS\n83 UF\n44 PL\n32 PT\n8 L\n53 FL\n3 P\n25 B\n45 OB\n52 FL\n14 U\n52 FH\n36 PP\n29 PH\n9 X\n85 UU\n83 U\n24 PX\n11 U\n29 PL\n33 PU\n91 LL\n43 B\n67 FX\n76 LS\n30 PS\n51 XU\n83 H\n69 FX\n48 FF\n38 OS\n79 XP\n15 X\n89 SO\n75 PB\n81 OX\n6 O\n7 X\n8 P\n81 X\n16 PU\n52 FB\n86 UU\n32 PP\n28 FS\n83 SX\n89 PO\n49 L\n82 PX\n39 FP\n70 FL\n9 B\n7 U\n86 P\n20 PS\n71 XS\n75 LF\n34 FS\n97 PS\n7 U\n19 F\n56 FH\n30 PH\n22 X\n28 PL\n81 FB\n27 FU\n70 LX\n99 HP\n20 L\n97 BS\n45 O\n19 F\n24 PS\n23 B\n48 FO\n2 F\n97 O\n6 O\n58 L\n18 PU\n72 P\n44 U\n73 XL\n53 OS\n84 P\n50 PX\n47 XS\n94 HP\n29 S\n7 F\n10 F\n70 PT\n93 FX\n72 OF\n4 O\n36 FS\n98 LT\n32 FF\n11 X\n22 PS\n28 FO\n93 XO\n60 FL\n43 FX\n22 PX\n69 US\n88 SB\n65 PO\n6 L\n46 OL\n84 SX\n9 L\n5 L\n49 OH\n35 B\n45 PB\n7 F\n75 LT\n58 OF\n89 SP\n37 OO\n45 OH\n54 OO\n1 P\n4 X\n52 PU\n51 LP\n52 XP\n59 LL\n47 OH\n49 PU\n11 O\n9 O\n62 UP\n56 FF\n82 XX\n19 PS\n24 S\n23 L\n90 BT\n29 FO\n41 FB\n76 SP\n98 HU\n83 LS\n55 OL\n93 BT\n78 XO\n37 FP\n72 PP\n49 XU\n7 U\n24 L\n87 XX\n17 B\n95 PF\n86 OF\n19 PX\n81 OX\n5 L\n94 FX\n58 FX\n94 SX\n3 P\n33 FT\n80 FT\n95 XP\n57 FL\n19 U\n66 LH\n46 O\n3 P\n37 H\n20 PS\n77 XH\n9 F\n71 LP\n45 FH\n39 FF\n95 BL\n1 P\n1 P\n31 H\n14 H\n57 FB\n12 H\n71 PF\n93 O\n87 LB\n23 S\n63 XT\n28 L\n73 H\n18 PP\n58 OL\n48 XO\n18 PU\n68 P\n83 LO\n24 PS\n93 HH\n9 B\n56 U\n39 PH\n31 X\n23 FP\n56 P\n79 SB\n32 PB\n57 F\n15 PL\n91 OX\n98 SB\n30 O\n64 PX\n11 F\n79 LU\n43 PS\n90 HX\n94 F\n54 XX\n71 UX\n19 P\n78 LF\n94 SO\n45 FP\n32 FX\n40 PU\n68 O\n5 X\n83 PX\n43 S\n38 PH\n74 FX\n6 P\n22 PL\n82 US\n8 S\n31 S\n65 OL\n63 FF\n82 PU\n33 FB\n70 OS\n30 S\n62 XB\n31 FX\n65 XT\n8 O\n84 SH\n44 OT\n1 P\n7 U\n65 S\n94 FX\n33 OO\n14 P\n79 PB\n65 LS\n57 XH\n6 O\n67 XX\n16 S\n44 OX\n96 HP\n22 FP\n15 F\n22 FP\n62 FX\n18 PT\n72 LU\n48 PL\n89 LL\n76 UO\n29 F\n44 OS\n68 S\n82 OS\n92 OT\n46 XL\n86 XB\n12 PF\n35 PH\n90 LS\n81 LO\n5 F\n70 OS\n85 HP\n18 PH\n11 H\n32 FO\n68 LH\n58 LU\n84 LF\n72 OF\n96 LU\n51 B\n31 OT\n94 HT\n3 O\n85 PT\n12 O\n18 PT\n94 LP\n50 FT\n81 XO\n8 F\n45 FT\n31 PF\n51 OO\n58 PH\n77 LH\n46 OO\n74 FP\n19 PT\n47 OX\n89 PP\n65 PS\n76 PX\n90 BT\n88 OU\n52 OP\n86 XB\n11 B\n77 LT\n42 FO\n11 P\n5 F\n30 FO\n1 P\n11 B\n81 FX\n82 US\n36 OL\n32 OF\n13 B\n5 X\n21 FT\n21 PL\n10 B\n81 FX\n22 PS\n36 B\n44 PS\n41 XT\n62 FL\n32 FB\n88 HL\n77 PT\n9 B\n70 UO\n20 X\n57 LU\n38 PX\n75 UX\n57 LP\n94 PU\n48 XP\n66 LB\n45 PU\n65 PX\n59 PH\n15 PO\n71 X\n64 LH\n31 OT\n96 F\n11 H\n94 PS\n8 O\n83 PH\n4 X\n49 PO\n13 PT\n42 OH\n88 UU\n9 U\n27 FP\n44 XF\n97 PF\n55 OT\n95 XT\n66 FH\n80 HT\n1 P\n68 PP\n73 H\n83 LO\n66 F\n49 PU\n33 FF\n3 O\n95 FO\n29 PH\n50 H\n66 PO\n25 L\n66 PS\n40 FF\n73 XH\n13 PO\n69 PX\n62 FT\n90 HX\n30 PH\n43 OL\n90 O\n13 P\n28 H\n57 LS\n66 OU\n56 F\n51 OT\n43 PF\n54 LP\n73 PL\n45 FX\n86 PX\n53 PU\n69 LP\n43 FS\n73 PU\n58 OF\n36 F\n87 ST\n17 PP\n37 FP\n15 B\n47 FF\n80 PF\n64 FL\n48 H\n45 XT\n91 XX\n81 SX\n52 XP\n37 OF\n62 PB\n70 PX\n52 XP\n41 FO\n34 OX\n59 XH\n92 FO\n78 FX\n3 O\n70 FS\n50 XO\n3 P\n82 SU\n66 LH\n1 P\n64 PO\n31 P\n56 OX\n1 P\n35 O\n33 FH\n91 OH\n86 HF\n92 LX\n10 U\n31 PS\n51 OO\n45 OT\n93 UO\n77 XT\n22 P\n40 P\n47 PB\n73 PU\n16 L\n68 B\n75 UT\n88 O\n23 FP\n94 PB\n6 O\n35 U\n67 LS\n17 PP\n70 FX\n55 XT\n20 PU\n45 FO\n10 PT\n22 FF\n4 X\n36 PU\n11 S\n39 PS\n49 PS\n77 XP\n52 FF\n93 SL\n87 LH\n89 LP\n31 F\n97 HF\n77 OB\n46 FL\n41 FF\n28 PX\n65 FH\n16 U\n69 LF\n4 P\n87 LO\n12 H\n43 OF\n75 OO\n71 PL\n62 FX\n29 PU\n34 S\n13 S\n19 U\n95 L\n16 L\n19 PT\n48 PU\n68 FT\n61 OX\n78 SF\n88 SX\n63 FU\n7 O\n95 HP\n13 PP\n96 PB\n15 F\n72 UB\n83 FX\n12 O\n80 L\n4 O\n86 FH\n74 OB\n25 O\n15 L\n46 OP\n96 SF\n44 H\n92 UF\n72 XH\n37 PO\n54 U\n39 PX\n8 X\n32 FT\n48 PF\n31 PT\n41 PO\n82 FL\n18 PP\n83 H\n36 PO\n86 UF\n75 UB\n72 OL\n97 PS\n73 FS\n59 OT\n28 X\n72 OB\n12 B\n52 XH\n19 PH\n31 PH\n35 PS\n94 XF\n11 PP\n96 PP\n63 XX\n67 UO\n94 FX\n21 FP\n44 OL\n54 PU\n49 OB\n24 S\n29 FH\n60 FH\n75 FO\n51 PH\n4 P\n28 FT\n39 FF\n32 FP\n48 OB\n37 PF\n10 PT\n88 XF\n75 FU\n20 H\n30 PB\n47 OO\n71 UO\n33 OP\n66 OL\n91 HL\n17 S\n30 FB\n89 SS\n44 OP\n36 PL\n77 OH\n55 FB\n88 OS\n99 OX\n9 X\n33 PX\n28 FT\n2 P\n7 L\n11 PT\n88 XT\n79 UT\n10 P\n82 UX\n48 O\n98 UX\n26 X\n15 PF\n11 X\n28 PX\n75 FF\n79 PL\n16 P\n59 H\n91 LF\n2 P\n47 FU\n14 PO\n48 XL\n17 P\n18 U\n30 PF\n33 P\n5 F\n10 S\n98 OS\n58 XO\n73 UH\n89 FX\n36 FX\n29 FB\n54 FS\n20 P\n98 HF\n21 PX\n37 PH\n75 UH\n67 PF\n92 SU\n94 OF\n79 US\n39 FU\n1 P\n22 F\n38 PX\n31 L\n16 X\n78 OT\n23 PL\n55 PL\n4 O\n58 PP\n86 SS\n1 P\n29 H\n1 P\n78 SO\n80 SF\n9 F\n46 XP\n21 PL\n79 UX\n75 OU\n6 P\n61 P\n61 XU\n27 FF\n59 XH\n15 U\n84 XB\n51 XT\n29 FX\n44 PS\n90 X\n49 XS\n29 X\n88 XB\n56 XP\n10 O\n60 XO\n2 F\n19 L\n95 PO\n18 P\n82 PS\n5 L\n58 FU\n45 OF\n39 FB\n6 F\n84 OH\n15 PT\n37 F\n56 PS\n74 PL\n25 PF\n21 X\n3 P\n1 P\n7 S\n93 XL\n65 XF\n78 FS\n56 OF\n62 FL\n73 UX\n7 U\n33 PO\n72 SP\n46 FU\n9 O\n93 PX\n70 LH\n57 LX\n69 UO\n59 XX\n87 P\n12 L\n24 FF\n27 FU\n60 H\n2 F\n91 XB\n93 HB\n26 L\n29 PB\n90 PX\n5 L\n42 FH\n25 FT\n64 S\n49 PL\n50 XF\n49 PO\n26 U\n46 PB\n17 PS\n54 XH\n36 PU\n49 P\n97 UT\n86 LO\n97 PO\n2 F\n46 XF\n47 PU\n97 XS\n87 SX\n26 FU\n11 S\n59 OL\n81 UU\n49 OH\n15 S\n16 S\n54 FB\n24 FP\n80 PT\n55 FH\n39 PX\n31 PH\n75 SF\n43 OL\n66 FP\n31 PX\n92 HB\n79 H\n14 H\n78 LT\n94 PX\n42 PF\n48 PT\n67 PL\n49 PU\n70 LL\n48 PL\n3 F\n46 OX\n1 P\n21 S\n10 S\n47 OP\n80 LP\n2 F\n78 LP\n93 XF\n55 PL\n5 F\n18 PP\n15 PF\n28 FS\n73 FS\n47 OF\n97 LO\n37 PB\n92 L\n86 PU\n17 PT\n95 SF\n94 OX\n79 UO\n68 US\n45 XT\n32 F\n38 FX\n61 FH\n73 UP\n71 P\n9 L\n88 XX\n52 LF\n44 PT\n62 XB\n9 P\n8 P\n18 PO\n45 XT\n52 FP\n51 XS\n1 P\n97 XB\n81 UF\n5 P\n34 B\n32 PH\n70 XB\n14 PT\n14 L\n8 S\n18 H\n93 XF\n96 XB\n95 U\n34 P\n63 XO\n22 PP\n86 S\n85 SU\n16 PF\n59 XL\n4 F\n5 X\n62 OU\n45 PX\n89 XH\n46 OX\n39 PT\n34 PU\n74 XF\n57 B\n74 UB\n33 FS\n99 FT\n68 OS\n48 OO\n93 BP\n48 OP\n72 UO\n70 B\n25 L\n2 P\n58 OS\n99 SU\n30 FL\n92 H\n88 PF\n72 UF\n88 SU\n27 H\n51 U\n48 XH\n2 P\n69 LT\n94 ST\n5 O\n14 H\n59 OP\n81 UL\n50 XS\n19 L\n64 LU\n3 F\n31 F\n88 SU\n27 S\n35 PH\n81 FT\n14 PP\n82 LT\n63 XL\n76 FH\n22 PP\n77 SU\n27 FF\n78 LH\n42 PL\n16 PP\n57 LF\n33 OF\n20 X\n70 OH\n1 P\n2 P\n94 BT\n84 UU\n96 SO\n77 OH\n94 UF\n48 PP\n3 F\n62 FH\n6 O\n2 P\n8 L\n18 PL\n10 P\n33 FP\n35 PF\n88 UF\n17 P\n40 FO\n80 FS\n24 B\n26 FP\n38 H\n36 PP\n34 FF\n66 OU\n10 X\n66 L\n52 B\n94 UL\n83 HP\n40 FF\n3 O\n70 XU\n87 P\n13 PT\n35 FT\n18 PL\n26 PS\n89 OS\n58 XB\n10 B\n1 P\n10 X\n17 PP\n35 H\n62 PP\n46 OS\n18 X\n91 UT\n90 SH\n94 XH\n32 P\n56 FB\n7 F\n63 OU\n48 XS\n59 U\n81 LH\n30 FX\n15 PO\n94 OL\n12 F\n26 U\n91 PT\n49 L\n33 FO\n37 H\n97 ST\n43 F\n63 OP\n86 O\n75 UP\n93 LF\n23 FP\n47 B\n93 LX\n5 F\n56 XB\n89 LT\n36 F\n52 PH\n73 UL\n94 SX\n85 LS\n38 B\n46 FO\n6 F\n42 PX\n79 FB\n80 XU\n44 FP\n26 B\n24 PO\n96 FX\n35 FT\n58 OS\n75 FS\n51 PO\n19 PO\n37 PP\n63 XT\n51 FT\n30 PP\n92 OS\n81 XF\n48 XT\n53 FT\n57 PP\n78 UU\n91 LF\n14 P\n30 X\n22 PS\n32 PP\n99 US\n50 XO\n88 LB\n43 FB\n51 FB\n77 UX\n32 PP\n21 P\n53 XL\n11 U\n4 O\n10 L\n8 P\n8 U\n83 B\n74 XB\n66 P\n14 PX\n75 UO\n79 UH\n61 B\n21 PO\n57 U\n4 F\n23 PH\n37 L\n77 LS\n29 FB\n47 FH\n62 OL\n38 PS\n56 PO\n35 FP\n47 FS\n12 PF\n36 FT\n55 PU\n56 H\n84 XU\n34 FU\n76 O\n8 S\n71 LF\n61 LU\n65 XB\n74 B\n71 FO\n92 SS\n36 FU\n11 F\n18 U\n29 B\n16 B\n36 L\n99 FS\n39 H\n61 PX\n95 XP\n90 LT\n63 PP\n60 FU\n7 U\n60 PS\n74 PU\n50 XU\n6 P\n11 F\n53 XT\n28 FF\n48 FH\n77 L\n90 UU\n79 U\n81 SO\n19 P\n66 LX\n79 U\n70 H\n34 FO\n68 UL\n73 LF\n89 PX\n24 P\n67 OX\n76 XP\n54 OL\n34 PB\n35 PX\n9 L\n66 H\n90 SF\n65 OB\n42 OT\n13 S\n15 S\n41 X\n87 SL\n17 O\n66 OL\n95 P\n25 F\n18 H\n28 PU\n35 FP\n94 OP\n74 FS\n68 XU\n26 S\n35 FT\n39 PU\n58 XH\n69 UO\n51 FB\n48 OX\n83 OX\n74 XF\n22 X\n10 L\n52 PO\n92 OU\n41 H\n32 PO\n51 XO\n98 XT\n70 FT\n56 PP\n93 OB\n20 F\n78 LT\n72 LF\n33 PX\n92 US\n37 OL\n88 SS\n19 L\n81 PT\n99 BX\n35 PS\n59 OS\n45 XP\n31 H\n96 SH\n63 FX\n3 F\n71 PP\n7 F\n62 LH\n79 FS\n13 O\n40 FB\n58 P\n95 LF\n46 FX\n74 OP\n61 LF\n74 LX\n72 OH\n93 SS\n5 P\n52 H\n3 P\n16 P\n43 FO\n41 FH\n58 H\n90 HL\n2 P\n86 PP\n20 FT\n25 PT\n36 FP\n87 SL\n42 PB\n98 PH\n17 B\n69 XT\n6 F\n86 SP\n99 UH\n91 PP\n12 F\n22 L\n14 PO\n22 PT\n25 PO\n6 X\n94 PB\n54 FT\n67 FP\n5 L\n29 PU\n90 LF\n65 PX\n64 S\n78 OS\n28 FT\n17 S\n18 L\n73 LO\n99 SP\n92 PS\n67 U\n8 S\n47 OB\n27 PF\n93 LL\n11 L\n97 XS\n35 H\n9 F\n85 LB\n34 FT\n5 F\n47 FT\n17 PP\n98 SB\n3 P\n94 LU\n15 S\n71 PT\n62 XX\n37 OU\n23 S\n6 O\n2 F\n26 B\n19 PH\n74 PU\n54 LF\n72 PO\n79 UB\n45 OT\n63 H\n56 PX\n29 PO\n75 PB\n28 FL\n99 P\n52 XO\n61 PP\n97 BO\n62 XF\n48 H\n9 S\n66 XX\n80 LB\n52 PX\n51 FH\n46 X\n60 OO\n69 XX\n45 FL\n5 F\n36 X\n89 SO\n27 O\n20 O\n35 FP\n20 PS\n35 FH\n5 F\n56 LL\n79 SB\n79 LU\n77 OU\n83 XB\n67 L\n94 SL\n26 FT\n88 SB\n2 F\n98 SF\n48 XH\n59 B\n44 XF\n35 O\n86 PX\n59 PF\n76 X\n13 F\n71 FB\n63 LO\n71 PB\n70 OT\n58 LX\n17 PP\n53 X\n16 PO\n84 LO\n57 LU\n56 OU\n60 FL\n59 FL\n30 L\n8 X\n1 P\n59 FO\n90 PH\n52 OX\n10 X\n40 FT\n94 LX\n39 OF\n35 H\n15 PO\n48 OB\n86 US\n56 XF\n5 F\n80 PO\n77 PX\n68 XF\n72 OT\n44 OF\n61 PF\n39 U\n49 PB\n36 FH\n65 L\n24 F\n58 XL\n25 PH\n15 L\n90 HB\n49 XO\n91 HH\n64 FF\n58 PB\n99 HF\n62 F\n78 FB\n38 PX\n24 O\n14 PP\n12 U\n36 FF\n70 FH\n70 UL\n99 OT\n8 S\n43 OX\n94 X\n14 O\n20 FT\n58 OT\n36 OP\n56 L\n15 O\n73 OB\n48 PH\n51 X\n19 L\n67 FU\n52 O\n98 SL\n64 PO\n16 F\n58 XH\n28 PH\n7 S\n48 XX\n20 PH\n3 O\n38 FB\n60 OT\n34 PX\n4 O\n17 PO\n51 X\n7 L\n34 FX\n17 PO\n94 LP\n3 P\n61 LT\n57 PL\n15 PT\n36 FT\n21 PH\n23 PX\n58 FH\n49 FU\n86 PS\n15 B\n81 UP\n71 PO\n56 OB\n46 OX\n77 UL\n55 XH\n84 SF\n65 XP\n38 PS\n71 XS\n68 OO\n13 L\n68 F\n65 LL\n13 PF\n58 LF\n23 P\n46 FP\n91 OL\n51 XT\n99 FX\n53 PS\n17 H\n63 FX\n25 PS\n8 S\n20 FT\n63 UP\n75 LO\n19 P\n8 P\n86 FU\n14 B\n9 P\n36 F\n58 X\n29 FL\n22 P\n43 OL\n33 PU\n59 FL\n83 SS\n38 FL\n25 PL\n24 U\n27 PF\n77 LU\n82 PB\n37 PB\n17 O\n64 PB\n34 FU\n81 UL\n50 XF\n6 P\n84 LH\n96 ST\n83 OP\n24 FF\n62 F\n17 PT\n35 OX\n26 L\n23 O\n27 PP\n59 LO\n35 X\n62 XX\n29 FH\n5 X\n97 FT\n24 PP\n7 L\n88 XL\n8 L\n82 XT\n9 U\n65 B\n44 PF\n12 PF\n90 PT\n22 PT\n30 FT\n12 L\n97 UX\n81 UH\n35 S\n84 XX\n95 PB\n37 B\n67 PT\n89 XS\n1 P\n14 U\n3 O\n18 P\n63 OX\n75 SO\n30 PL\n41 PH\n58 LF\n18 P\n83 UL\n63 LT\n81 ST\n58 XF\n6 F\n17 PU\n83 UX\n15 PT\n64 S\n99 OF\n1 P\n13 B\n84 UT\n11 X\n22 PH\n26 U\n42 FL\n93 XF\n34 FS\n30 FU\n7 S\n90 XS\n65 O\n58 PS\n60 F\n54 PH\n44 PX\n85 HP\n23 PT\n57 S\n95 UH\n44 OO\n66 XT\n61 OX\n98 S\n5 O\n45 PH\n18 P\n8 U\n10 X\n31 U\n98 UF\n95 HX\n63 PO\n43 XP\n34 PT\n47 PU\n67 OB\n40 P\n91 ST\n63 FX\n62 X\n36 PO\n6 X\n77 XT\n98 XH\n86 FO\n62 OH\n94 XP\n83 LP\n81 XF\n50 OF\n55 PS\n83 PP\n69 OT\n42 OO\n55 XS\n12 X\n87 XU\n40 XT\n68 P\n41 OF\n73 FU\n37 FS\n33 PX\n60 FP\n8 S\n3 P\n18 H\n23 L\n50 L\n98 F\n81 FX\n47 PH\n9 U\n55 PO\n73 XS\n83 OS\n60 XP\n48 FU\n58 LP\n99 OT\n63 FL\n8 O\n36 OL\n61 XT\n83 SB\n38 FP\n35 OT\n49 XT\n53 O\n4 X\n16 PT\n48 OH\n50 FU\n75 OF\n13 PP\n67 PS\n44 O\n95 FB\n45 XX\n93 FH\n99 LT\n2 F\n8 H\n29 PF\n48 OU\n67 OU\n84 PP\n39 U\n67 H\n1 P\n54 OO\n28 S\n59 XU\n73 OP\n44 X\n14 H\n24 PT\n28 PT\n29 FF\n46 B\n60 LH\n94 PF\n58 XS\n50 F\n81 UX\n79 OH\n88 P\n73 OB\n57 XX\n39 OS\n68 OS\n23 H\n91 UO\n50 FX\n82 PP\n20 U\n37 FS\n26 PO\n56 XS\n41 PT\n46 PS\n20 F\n43 FO\n17 O\n94 SL\n86 PH\n9 S\n37 PB\n53 OF\n22 FT\n31 FL\n69 UO\n84 HX\n21 L\n77 PS\n10 F\n33 PP\n24 FP\n99 BO\n45 B\n43 OB\n79 XL\n47 PP\n11 P\n2 F\n28 P\n21 PP\n16 P\n60 PU\n86 UT\n34 FU\n90 OB\n37 PF\n11 L\n2 F\n82 LO\n93 ST\n42 PP\n24 FF\n55 OB\n60 FX\n90 OF\n24 FP\n5 F\n60 H\n12 S\n68 LT\n64 FT\n88 UT\n75 XB\n65 LO\n28 U\n97 S\n53 LP\n94 O\n65 LT\n66 OL\n44 OB\n76 PT\n13 S\n48 OO\n79 UF\n40 PS\n34 FO\n76 SL\n33 PX\n50 XU\n15 S\n20 X\n87 PB\n63 FF\n28 PO\n57 LX\n74 B\n37 PL\n45 OH\n8 X\n21 PL\n2 F\n50 S\n86 SL\n87 PP\n64 LT\n10 L\n45 XX\n54 L\n24 P\n12 L\n90 XP\n81 XO\n31 FO\n59 L\n44 S\n86 XS\n57 OP\n8 U\n2 P\n66 XS\n8 L\n14 PT\n69 H\n30 PT\n19 O\n49 XO\n48 F\n80 FP\n19 O\n12 U\n10 X\n98 PO\n10 X\n44 PB\n71 LP\n29 H\n23 L\n4 P\n72 PS\n57 OX\n11 B\n65 UP\n95 S\n26 FO\n78 PH\n86 OU\n24 L\n42 P\n69 H\n61 OU\n43 XF\n15 B\n65 LX\n32 PS\n72 XO\n87 SO\n72 PL\n63 PT\n25 L\n90 OB\n65 FF\n89 LO\n46 FF\n20 PU\n36 FP\n86 P\n40 OF\n59 XX\n97 SS\n22 PT\n99 PT\n96 HU\n62 FO\n40 X\n8 S\n35 OT\n64 UT\n83 UX\n4 P\n39 F\n42 H\n78 OH\n94 SP\n62 X\n81 XP\n33 PP\n31 PF\n39 PT\n3 F\n6 U\n41 FL\n31 S\n29 FP\n45 PP\n61 OX\n64 F\n36 FO\n11 P\n11 PT\n94 XU\n61 PL\n41 PL\n84 OF\n70 UL\n46 B\n93 PL\n28 F\n90 PL\n86 OB\n13 B\n87 SX\n22 U\n13 PP\n12 L\n43 FX\n6 O\n2 F\n42 PP\n83 SL\n38 OL\n95 FH\n82 LP\n84 LB\n80 OS\n37 FS\n27 O\n19 X\n98 LF\n21 X\n96 HH\n87 PF\n5 F\n66 PU\n17 PS\n28 PP\n86 UU\n83 FB\n28 PT\n65 UX\n15 L\n88 UP\n84 PU\n56 XF\n15 PP\n1 P\n78 UU\n70 FB\n43 FF\n29 FS\n1 P\n75 OO\n65 U\n55 OX\n61 FB\n40 FH\n85 LF\n82 L\n67 OP\n76 U\n71 S\n68 XB\n11 U\n51 PB\n87 OP\n43 O\n79 XP\n45 FX\n80 XT\n83 SU\n62 FS\n96 PP\n93 HT\n95 OS\n12 H\n59 XF\n91 FX\n47 PF\n57 LF\n18 B\n23 X\n49 PL\n38 FP\n16 PF\n92 BF\n13 PO\n44 XX\n11 O\n63 OP\n46 FX\n82 OF\n6 P\n70 LL\n4 F\n84 PT\n69 PO\n43 OB\n41 FB\n7 P\n29 PO\n12 X\n43 PO\n30 S\n3 F\n30 PB\n50 FT\n1 P\n21 F\n34 PP\n37 OO\n75 UP\n12 PP\n26 PS\n4 O\n48 PH\n45 OX\n78 UO\n72 PH\n61 LL\n39 OH\n88 XF\n74 LP\n81 OF\n28 FO\n29 FL\n49 PF\n71 LU\n81 OF\n55 XH\n57 PX\n8 X\n7 O\n25 FO\n47 XL\n30 PO\n90 PS\n68 OP\n4 P\n35 PX\n85 XH\n90 LP\n33 PB\n15 P\n90 UP\n49 OP\n96 HU\n17 U\n9 U\n68 OP\n39 OS\n7 X\n96 FL\n56 LX\n82 F\n45 PH\n34 PO\n23 F\n88 HS\n61 B\n54 OF\n6 F\n17 PX\n40 PU\n70 LF\n25 B\n21 PO\n53 FP\n96 SP\n80 LU\n50 XB\n2 F\n14 S\n95 SU\n62 OS\n62 H\n78 SX\n80 UP\n12 O\n71 UT\n63 OL\n69 UH\n57 FH\n77 FS\n17 X\n51 FS\n92 HP\n23 L\n73 OS\n37 PF\n7 X\n26 X\n25 PS\n29 FH\n99 OP\n39 B\n25 PH\n24 PH\n50 PL\n96 UP\n41 PS\n12 F\n83 PB\n3 P\n91 XX\n17 S\n53 PS\n96 PP\n92 US\n82 OH\n32 FH\n91 X\n18 PS\n15 U\n13 F\n90 ST\n61 UT\n37 PS\n52 XL\n11 S\n33 PF\n73 LP\n59 PL\n75 FP\n25 FX\n98 SO\n35 FO\n8 X\n34 FF\n14 F\n34 B\n14 F\n24 L\n85 LT\n90 SP\n26 O\n6 F\n87 XX\n20 PX\n15 PL\n7 X\n84 OT\n27 PO\n97 HO\n8 F\n93 PU\n10 X\n83 FU\n10 PT\n47 U\n20 F\n46 XO\n69 OU\n29 P\n18 X\n52 L\n35 OO\n1 P\n32 O\n23 PH\n63 XL\n80 S\n6 U\n76 PX\n30 H\n87 PT\n7 U\n83 F\n61 U\n8 L\n12 PF\n67 FX\n50 B\n95 UU\n60 XF\n45 OL\n39 PS\n94 XH\n43 FL\n75 XO\n89 UL\n26 H\n67 LX\n52 U\n99 SF\n67 LT\n78 FH\n86 PX\n12 PP\n62 L\n20 PB\n46 FS\n36 FL\n43 PP\n6 X\n69 FL\n43 FS\n60 PL\n52 XX\n43 FU\n20 O\n41 FH\n9 H\n79 UP\n64 UP\n22 PO\n44 OL\n56 XH\n45 FP\n36 FB\n22 PF\n27 P\n40 FP\n21 PF\n71 XB\n30 FH\n57 PU\n1 P\n99 FF\n93 FX\n7 L\n52 PB\n98 UF\n1 P\n21 B\n81 SS\n57 FS\n42 X\n33 FL\n59 XO\n88 PT\n45 PP\n42 OH\n2 P\n50 FP\n20 O\n64 LB\n37 F\n45 FF\n73 LF\n33 PU\n3 O\n59 OO\n75 UH\n58 XP\n10 U\n32 FF\n66 PO\n45 S\n12 PF\n91 PT\n60 F\n91 OB\n5 X\n1 P\n90 PU\n59 XT\n31 FL\n30 H\n93 XF\n17 PP\n95 LB\n35 OF\n39 OT\n64 LU\n62 LB\n42 PO\n30 PO\n67 LB\n32 PT\n41 FU\n39 PS\n62 FB\n95 OT\n45 FB\n59 FT\n59 PO\n37 B\n80 P\n98 OP\n49 XH\n27 H\n10 U\n4 F\n17 O\n38 OP\n92 UT\n46 XO\n23 F\n32 FU\n1 P\n40 OS\n68 FH\n43 XF\n93 LU\n60 FB\n55 OF\n19 PB\n50 PO\n32 PU\n24 PF\n74 FO\n75 UF\n78 OP\n70 PO\n86 FT\n14 S\n58 OF\n64 LS\n67 U\n79 FO\n68 LT\n76 PP\n44 OO\n65 FU\n59 FS\n7 U\n58 PP\n72 OH\n7 X\n87 SF\n16 PO\n27 L\n58 PX\n46 FO\n89 LB\n45 XX\n99 HT\n80 UP\n75 PL\n55 FS\n20 O\n64 FH\n50 FU\n21 L\n39 PX\n75 UP\n35 PT\n41 B\n2 F\n47 OL\n40 B\n59 OL\n96 XX\n4 X\n45 OU\n71 FS\n31 O\n65 OH\n90 OT\n61 LT\n35 PP\n51 XT\n72 FP\n1 P\n11 U\n53 H\n88 HL\n76 OU\n89 OB\n24 B\n76 XS\n19 PT\n98 SL\n96 SU\n83 LX\n21 PX\n41 FX\n78 OS\n13 H\n54 XB\n48 OT\n29 PO\n91 OO\n39 OU\n72 FS\n76 FH\n19 PO\n31 PT\n36 FB\n22 PT\n70 FF\n23 L\n16 PX\n50 XF\n84 SO\n64 PP\n94 LH\n28 FS\n50 PH\n87 HO\n22 B\n41 FB\n41 P\n16 S\n76 OX\n32 B\n51 LP\n57 FO\n28 FO\n12 X\n39 OH\n38 OF\n74 OP\n69 UL\n7 X\n71 XS\n27 PU\n4 F\n84 XO\n99 LS\n99 O\n55 FT\n90 O\n20 L\n64 XP\n90 X\n67 S\n34 U\n13 PP\n85 HO\n83 XL\n45 OS\n35 FS\n9 S\n43 X\n82 SF\n8 F\n54 PO\n92 XP\n44 XO\n82 LT\n52 FH\n72 UB\n62 LT\n81 LH\n35 PU\n93 B\n20 FT\n8 P\n70 XH\n99 UF\n60 LU\n98 FF\n30 X\n34 PU\n60 OH\n93 OT\n63 XP\n96 HT\n75 FX\n76 OF\n26 X\n91 LB\n72 LP\n98 HT\n89 HP\n54 FP\n74 PX\n90 FT\n93 PX\n82 HP\n91 OO\n53 L\n3 P\n39 FL\n25 PP\n60 X\n80 FT\n76 UB\n9 B\n65 L\n26 PO\n28 PT\n43 P\n77 XS\n59 PU\n29 X\n56 OH\n10 PT\n82 S\n27 F\n85 LL\n89 HL\n6 F\n46 PT\n59 FU\n73 X\n79 LP\n83 XS\n89 OF\n1 P\n2 P\n48 XP\n67 LT\n62 B\n70 H\n64 PP\n42 OT\n53 P\n92 UX\n22 P\n85 OF\n40 L\n35 B\n5 F\n6 U\n97 SP\n75 SF\n31 PT\n76 PF\n22 S\n82 LS\n99 US\n20 X\n13 O\n25 FF\n33 FP\n38 FB\n26 L\n97 SB\n95 B\n83 S\n73 P\n17 PT\n84 HF\n51 OF\n20 F\n16 PT\n68 F\n29 FX\n26 L\n79 S\n52 FF\n93 XF\n72 XU\n94 SS\n60 PS\n78 FU\n40 FL\n43 OO\n70 FX\n60 LX\n62 B\n31 FX\n87 OH\n78 UP\n38 FF\n38 OP\n75 OH\n19 U\n61 PS\n53 FP\n37 PX\n5 P\n87 SF\n52 FL\n53 OU\n20 PP\n62 XO\n51 H\n81 PL\n93 XF\n49 PS\n13 O\n23 FO\n71 UO\n41 OH\n61 PH\n22 PO\n57 F\n83 FH\n68 P\n15 B\n80 LO\n26 FF\n2 P\n40 S\n12 PF\n17 O\n79 U\n49 B\n41 OL\n6 L\n4 F\n9 H\n89 PS\n5 P\n20 PT\n74 PT\n55 XH\n2 P\n1 P\n41 FB\n45 S\n12 X\n94 OB\n82 XP\n77 XS\n10 B\n22 P\n29 FU\n21 O\n82 PP\n27 S\n35 PH\n24 PH\n19 X\n61 LB\n31 F\n25 L\n41 OH\n71 OT\n99 UP\n45 FO\n48 PT\n13 PT\n69 FH\n81 PB\n32 S\n65 XL\n30 PS\n78 XO\n29 S\n35 FT\n12 O\n45 FU\n75 XT\n1 P\n71 S\n73 UP\n47 OS\n72 LT\n78 B\n2 P\n31 FB\n2 P\n64 LP\n39 O\n55 LL\n82 FL\n76 OP\n17 PP\n96 XT\n24 FO\n12 S\n73 XP\n34 FF\n11 F\n64 OX\n32 FP\n67 UL\n66 OB\n33 F\n82 XU\n42 FU\n85 OS\n32 PO\n15 PX\n71 LF\n66 OF\n8 S\n49 FL\n81 FH\n93 L\n69 O\n72 XT\n59 XF\n54 PL\n26 O\n68 UX\n3 P\n96 SL\n27 FT\n94 LB\n38 FF\n62 PT\n77 LO\n50 FT\n94 LU\n15 PX\n98 FS\n36 OX\n51 F\n17 U\n17 U\n78 LO\n48 U\n45 O\n27 L\n42 OF\n55 OS\n15 L\n92 LP\n17 F\n57 OU\n12 PF\n27 U\n14 O\n64 B\n34 FP\n60 P\n17 H\n14 H\n36 FB\n63 U\n55 XH\n45 OO\n80 FO\n2 P\n52 XT\n18 B\n87 LS\n68 FB\n59 LT\n94 FX\n17 PO\n17 PO\n34 S\n16 B\n74 XT\n95 LL\n81 SX\n63 PP\n30 FX\n31 FB\n85 XL\n75 OT\n69 LL\n19 P\n7 P\n78 FT\n57 LU\n57 FT\n78 PT\n41 F\n17 PU\n20 PL\n87 PB\n81 PF\n88 LO\n52 PU\n86 LU\n91 PT\n78 LB\n74 FS\n11 B\n37 S\n91 LO\n54 FF\n28 X\n58 XT\n28 X\n29 FP\n58 OS\n13 S\n53 XT\n81 FS\n73 OT\n78 OS\n41 OS\n2 F\n12 PP\n50 OX\n6 U\n44 PF\n72 P\n42 P\n43 XT\n14 F\n52 XH\n21 FP\n6 L\n68 XO\n28 P\n70 UL\n74 OP\n94 PS\n29 PB\n68 PH\n25 FF\n45 OX\n72 OP\n8 S\n28 PO\n60 LO\n17 F\n65 XB\n51 XP\n4 X\n51 XT\n86 SS\n56 FO\n24 B\n1 P\n15 F\n45 OT\n75 H\n22 PO\n95 FS\n63 LT\n90 XU\n86 SH\n17 PT\n19 PU\n89 FH\n4 F\n5 L\n65 XS\n7 F\n15 PF\n81 H\n38 PL\n22 PX\n89 UL\n30 X\n3 O\n79 XB\n31 FX\n3 P\n27 L\n39 OX\n41 FS\n45 XL\n58 PH\n45 F\n55 XO\n52 OP\n44 XF\n95 SL\n29 PH\n48 PT\n92 HS\n27 PX\n58 XH\n5 O\n52 S\n38 FT\n99 FF\n9 F\n99 HP\n56 OO\n54 OU\n55 FP\n81 UP\n18 L\n59 PH\n71 LH\n27 X\n52 XF\n72 FU\n76 OL\n44 P\n52 XL\n20 PH\n28 S\n2 P\n93 FX\n49 XH\n88 HS\n44 PO\n81 S\n22 PF\n74 PH\n51 FB\n66 LU\n81 PS\n82 O\n20 X\n82 SP\n28 PT\n56 PL\n88 PF\n83 XH\n26 X\n4 O\n97 XB\n85 OX\n55 LF\n70 PB\n25 FL\n28 FH\n44 U\n6 O\n56 OH\n29 FP\n76 XF\n52 PS\n83 PF\n31 U\n2 P\n76 OH\n26 FF\n13 PT\n94 BX\n44 FU\n15 PT\n3 O\n56 LT\n4 X\n47 XO\n58 PX\n88 FP\n17 PO\n72 PO\n40 L\n27 FU\n15 P\n34 OO\n58 PU\n86 F\n30 U\n45 OL\n95 HB\n27 PO\n59 LT\n99 XS\n39 FT\n23 X\n27 PX\n2 P\n55 XF\n27 P\n92 H\n38 P\n69 UO\n76 LH\n66 LF\n6 X\n52 F\n96 B\n75 UT\n22 PT\n91 FH\n14 L\n85 LH\n69 OU\n10 PT\n86 US\n69 LH\n86 HU\n71 UP\n71 XX\n39 PO\n67 OP\n96 OU\n53 PP\n39 B\n90 XL\n34 FB\n93 PF\n68 OO\n10 O\n91 PB\n11 PT\n18 O\n30 PP\n29 PT\n21 H\n89 XB\n2 F\n62 UF\n78 ST\n87 UP\n84 OS\n14 U\n13 S\n90 PH\n39 L\n51 L\n70 LT\n50 XL\n21 PS\n39 OX\n60 FB\n4 X\n75 PF\n74 FL\n8 F\n95 XU\n52 FO\n84 UL\n54 FH\n36 OO\n83 FS\n15 PX\n11 O\n80 SL\n53 FP\n85 HT\n90 OB\n27 PS\n34 S\n94 US\n43 PF\n12 U\n46 FX\n88 S\n54 PS\n78 LS\n63 OL\n7 L\n58 PT\n50 OB\n11 B\n3 O\n94 LT\n60 XL\n8 H\n80 PO\n40 OX\n89 F\n83 PS\n6 O\n85 XP\n76 SL\n59 S\n71 B\n18 PP\n47 X\n39 FS\n26 S\n11 B\n4 X\n45 PF\n63 LL\n98 F\n47 PO\n1 P\n45 O\n88 XP\n75 PU\n26 U\n88 UB\n96 XH\n2 P\n5 P\n45 PF\n61 LO\n48 PX\n10 L\n35 PO\n86 UP\n85 UT\n16 PP\n11 PT\n68 LL\n61 UP\n75 FB\n31 FF\n88 LS\n14 L\n53 PL\n61 UP\n90 U\n83 PH\n98 BF\n9 X\n93 OS\n85 HF\n80 PS\n94 SB\n13 H\n55 FL\n64 PU\n69 OP\n87 O\n38 FF\n85 U\n98 FO\n27 PT\n87 ST\n87 UF\n12 PF\n54 XF\n49 XL\n88 FS\n53 FP\n4 X\n98 UP\n73 PF\n39 F\n45 PU\n96 FL\n86 LS\n53 XT\n89 OF\n56 LF\n10 B\n61 PP\n8 O\n7 F\n96 PU\n39 O\n98 S\n22 H\n83 L\n7 P\n15 F\n94 HT\n65 S\n61 S\n72 FP\n71 PH\n13 S\n11 PP\n68 PB\n14 B\n65 FO\n69 LL\n91 F\n3 P\n90 UU\n61 U\n99 XT\n55 XT\n53 FL\n77 LP\n55 LF\n32 PF\n98 XB\n84 PB\n79 PB\n21 PS\n3 O\n91 PU\n56 LU\n40 O\n93 UO\n55 PO\n14 P\n56 FH\n29 FL\n65 XS\n55 FB\n81 PU\n30 FT\n49 FO\n1 P\n41 FU\n20 B\n94 PB\n33 F\n77 OX\n25 PS\n28 O\n29 FH\n96 PL\n24 FO\n91 LU\n99 UO\n65 LF\n29 FP\n67 PU\n69 PL\n64 UX\n74 S\n79 XH\n69 OB\n90 XH\n27 H\n42 OO\n13 PT\n10 L\n31 FL\n94 LU\n37 FU\n79 XF\n73 XF\n40 PP\n41 PU\n79 LT\n83 UO\n24 PT\n26 H\n98 SU\n25 FP\n98 O\n58 OH\n14 O\n12 X\n51 PU\n92 SH\n15 PL\n71 FX\n48 PH\n11 H\n65 X\n63 PX\n66 FO\n79 F\n64 FO\n79 LX\n88 FS\n41 FP\n41 OX\n75 OT\n99 XH\n65 XT\n70 FP\n79 OL\n83 FX\n93 UP\n57 PO\n58 OU\n46 O\n81 XX\n39 FO\n91 FF\n83 HP\n60 LU\n32 S\n77 FT\n56 OF\n47 XL\n19 PL\n34 FH\n7 O\n92 XS\n76 XX\n60 PU\n69 XU\n42 S\n32 PS\n41 OU\n22 PL\n62 FP\n64 F\n12 L\n73 O\n26 PF\n2 F\n93 PL\n1 P\n62 PU\n35 FO\n81 OS\n6 U\n91 P\n48 OH\n83 SX\n57 XF\n24 S\n21 PP\n58 B\n11 PP\n79 X\n67 LH\n21 PT\n78 L\n39 OS\n37 PT\n60 XX\n18 L\n14 O\n46 F\n5 O\n2 P\n95 BF\n2 P\n26 P\n22 PU\n40 OP\n47 L\n51 FP\n42 FO\n85 SL\n89 O\n42 L\n78 B\n87 PH\n61 LX\n62 PO\n71 UU\n21 PT\n95 XT\n18 PL\n20 PF\n79 UL\n45 PF\n9 P\n39 H\n26 B\n69 XB\n17 PO\n77 FF\n66 UF\n81 UU\n51 FO\n9 U\n62 XT\n50 OP\n19 L\n95 UH\n18 PX\n8 P\n40 PU\n80 FS\n95 PP\n39 OF\n60 LT\n32 PO\n95 FT\n16 P\n9 P\n3 O\n94 HP\n44 PU\n25 S\n38 OU\n9 L\n69 O\n66 P\n75 PH\n51 F\n56 U\n28 O\n30 FX\n65 F\n29 PL\n7 O\n30 P\n88 PT\n4 X\n11 O\n99 OU\n23 PU\n85 FS\n7 U\n2 F\n48 P\n44 OL\n15 PO\n5 X\n45 OF\n36 FH\n32 FU\n63 L\n40 OU\n63 O\n56 PH\n18 PH\n98 UP\n14 PO\n70 OU\n25 PT\n66 UU\n89 OU\n36 PB\n96 LX\n33 OO\n14 X\n54 PX\n89 SO\n44 FO\n15 PP\n73 LS\n69 OH\n93 FT\n99 OF\n75 OL\n99 OX\n88 FH\n59 LT\n8 F\n3 F\n87 L\n39 OT\n7 O\n22 X\n95 OS\n8 O\n64 XL\n83 UU\n40 XT\n1 P\n29 FS\n1 P\n25 FF\n22 PF\n91 SU\n13 H\n8 P\n87 F\n62 FP\n95 H\n45 PP\n97 OX\n28 X\n15 B\n77 OS\n35 OO\n90 OF\n60 PO\n17 F\n29 FL\n81 UX\n39 FB\n24 PX\n55 LL\n82 HP\n64 H\n72 FF\n64 B\n38 P\n46 FU\n89 OP\n87 UB\n24 PB\n86 UU\n79 XL\n35 X\n48 X\n97 OO\n5 P\n63 FB\n90 FT\n95 UH\n96 OF\n50 PO\n69 PF\n95 SP\n14 X\n66 LO\n38 FO\n18 P\n56 XH\n19 B\n39 FP\n21 O\n85 UH\n47 PF\n87 FB\n21 B\n97 LL\n83 FS\n93 OF\n62 LT\n55 XU\n51 H\n97 HB\n81 SL\n96 BT\n39 OH\n24 PU\n99 XO\n12 PF\n47 XF\n73 LF\n97 OX\n67 OF\n35 FO\n84 H\n88 XT\n13 B\n84 S\n90 XL\n3 P\n12 L\n27 P\n91 OB\n96 X\n13 U\n11 PP\n93 XH\n69 H\n63 FL\n27 O\n9 L\n15 PX\n6 F\n17 X\n40 FB\n8 S\n79 UU\n16 PL\n11 L\n87 PB\n61 XP\n10 F\n95 UB\n66 PO\n7 P\n11 H\n19 U\n36 OO\n54 FB\n17 PS\n97 FT\n35 FT\n31 H\n93 HX\n6 L\n67 PB\n78 PU\n50 OB\n36 PT\n69 FB\n97 XF\n47 FX\n62 XU\n80 UU\n4 F\n84 L\n24 PL\n81 SF\n71 UB\n51 LT\n3 F\n31 FB\n16 PU\n16 PT\n86 SH\n62 XT\n98 B\n13 F\n34 PS\n90 SX\n72 U\n1 P\n47 OS\n2 P\n33 PP\n50 XT\n76 B\n92 FX\n66 UO\n57 PH\n73 OB\n6 O\n65 O\n49 OB\n37 OL\n53 OS\n42 OF\n25 FP\n86 PP\n39 OH\n7 U\n53 L\n62 OP\n30 U\n30 X\n81 H\n5 P\n62 XF\n98 SP\n30 FX\n57 FP\n91 SS\n36 F\n4 X\n84 LU\n12 L\n38 PH\n69 FL\n46 OU\n72 S\n26 PP\n47 PF\n8 O\n44 H\n70 PT\n48 X\n55 OU\n40 OL\n92 UO\n12 X\n15 PP\n59 PB\n11 X\n39 OB\n99 SL\n83 SP\n69 XT\n36 P\n1 P\n92 LL\n76 XP\n51 OH\n4 F\n74 UF\n8 H\n28 PT\n45 PF\n7 O\n74 SO\n36 OU\n61 F\n49 FS\n40 OO\n93 SX\n30 FB\n94 XF\n74 FP\n11 PT\n15 PO\n64 OB\n19 PU\n11 H\n49 FH\n19 S\n68 FP\n42 X\n11 X\n52 OT\n72 UF\n35 FT\n12 S\n79 SP\n37 B\n25 X\n98 XT\n64 FO\n10 L\n98 OX\n63 FF\n37 O\n31 FF\n49 XH\n69 PT\n25 X\n40 OU\n24 PT\n18 PT\n63 PS\n93 BO\n79 XU\n24 PX\n57 OX\n45 OO\n53 OH\n50 PT\n21 PT\n22 X\n43 PL\n11 PP\n59 PH\n46 OS\n11 S\n60 B\n16 PL\n13 O\n97 OB\n19 X\n26 PO\n30 PF\n82 SB\n25 P\n38 PL\n43 PU\n13 O\n68 UF\n83 PH\n83 UP\n71 UP\n90 LH\n28 P\n17 PP\n75 OT\n90 OS\n57 OS\n50 L\n86 FO\n29 PO\n46 OS\n19 PS\n22 PB\n26 FL\n41 H\n51 X\n25 FX\n90 FS\n23 PH\n11 P\n49 OB\n27 FX\n9 B\n92 OX\n77 FX\n83 OB\n23 B\n63 LP\n54 XP\n82 XB\n50 OU\n78 OT\n54 PO\n88 FX\n18 P\n35 FL\n87 HT\n84 OF\n22 PT\n44 OP\n2 F\n8 F\n33 L\n54 OP\n37 FP\n58 FS\n68 LB\n14 PP\n72 LU\n99 XL\n20 FT\n28 PH\n58 XF\n83 XP\n73 SF\n53 XX\n51 LT\n99 XF\n6 L\n4 X\n24 PF\n66 LU\n45 FU\n1 P\n16 P\n11 U\n83 F\n24 L\n75 PF\n24 PO\n10 B\n19 L\n77 FL\n28 L\n64 PP\n73 PO\n77 FU\n18 PU\n10 U\n28 P\n39 PO\n50 O\n31 PU\n45 PT\n68 PX\n13 PF\n32 PU\n49 FH\n39 PB\n76 UO\n65 OO\n64 O\n70 PT\n27 PB\n99 OS\n31 P\n98 HX\n64 LS\n14 PX\n62 OT\n93 PO\n71 OU\n12 U\n63 LU\n55 FU\n24 FX\n98 UB\n96 H\n42 FF\n98 HH\n73 UF\n57 XH\n8 P\n73 UU\n43 OX\n69 OU\n64 F\n31 FU\n53 FT\n18 PT\n42 OH\n2 P\n28 X\n39 X\n59 PF\n67 OT\n62 XU\n75 UL\n33 X\n8 S\n96 HT\n8 F\n54 XS\n52 XX\n48 U\n63 PX\n62 OS\n99 L\n16 PT\n81 OB\n86 SH\n83 SX\n20 PB\n81 PX\n84 FS\n26 P\n48 OP\n93 SX\n30 OT\n10 H\n78 P\n3 F\n75 PT\n36 PO\n21 X\n30 FL\n21 FT\n87 LS\n76 OU\n44 OP\n74 XB\n44 F\n30 FH\n8 X\n12 PP\n67 XX\n3 O\n84 OH\n60 PU\n74 FL\n1 P\n20 PL\n83 LP\n97 ST\n56 XT\n71 XL\n33 O\n30 FL\n27 S\n46 OX\n76 LT\n59 OB\n56 PP\n40 OS\n32 B\n46 XU\n3 O\n68 OP\n99 U\n68 PX\n31 PF\n44 PH\n28 FH\n73 LX\n63 UF\n88 LP\n35 FB\n94 PT\n19 PX\n81 XT\n26 FU\n88 XP\n80 PH\n27 B\n95 BP\n8 S\n70 OT\n98 UL\n33 L\n41 FU\n60 PT\n60 OH\n38 OF\n88 ST\n5 P\n25 PO\n86 PL\n4 O\n62 LU\n73 UB\n21 PU\n17 PS\n68 OO\n64 UT\n66 H\n45 XT\n17 PP\n19 X\n47 FL\n78 OX\n73 FB\n16 PP\n29 X\n29 FB\n44 FL\n93 BO\n15 P\n49 PL\n19 P\n61 P\n53 XF\n72 PT\n3 O\n56 XL\n97 SL\n66 LS\n65 UO\n44 H\n63 OU\n80 FS\n53 PO\n69 UT\n82 OO\n93 H\n84 FX\n78 US\n34 PU\n76 FF\n41 PS\n90 OL\n36 PO\n11 PP\n37 OO\n69 PS\n34 PF\n15 U\n44 OS\n32 FB\n34 PH\n15 S\n81 PO\n51 XS\n77 LX\n23 S\n89 LH\n58 FX\n44 OT\n35 FO\n70 LS\n77 OX\n70 FS\n15 S\n34 PL\n91 OB\n77 OB\n86 HF\n24 S\n2 P\n91 L\n99 BS\n97 OU\n19 U\n43 OX\n81 LP\n93 XT\n94 UB\n94 OS\n35 FH\n90 OP\n36 OL\n86 H\n86 UP\n99 FB\n95 XT\n81 PO\n30 OT\n16 O\n27 PX\n18 PU\n49 FH\n9 O\n80 FT\n72 XB\n4 F\n23 FO\n67 FS\n27 PL\n79 FX\n71 XF\n28 FH\n9 S\n71 OP\n26 FT\n75 PX\n32 FX\n51 OB\n2 F\n25 F\n47 XS\n93 HX\n30 P\n49 OU\n48 PU\n80 FO\n44 PL\n76 SL\n29 U\n86 UL\n44 OT\n62 FH\n29 PB\n25 U\n77 L\n14 PF\n41 PB\n21 H\n84 PU\n92 BF\n89 UH\n7 P\n13 O\n65 PH\n29 FL\n6 L\n33 PT\n74 LH\n29 PU\n2 P\n75 XP\n88 O\n78 PT\n67 FT\n6 P\n49 OF\n60 S\n24 PS\n10 U\n73 XL\n12 O\n33 PO\n26 PL\n15 PF\n31 L\n30 FP\n13 B\n48 XX\n39 OU\n24 PP\n35 OT\n8 U\n97 PS\n30 FS\n37 X\n19 PS\n82 FB\n84 LX\n51 FO\n71 OT\n66 LH\n45 OO\n59 PS\n72 PT\n96 P\n81 LB\n92 UB\n3 F\n55 FH\n12 S\n24 L\n6 F\n24 O\n52 U\n76 XU\n97 UU\n59 OO\n1 P\n15 PF\n89 HU\n85 SB\n45 FF\n42 XT\n3 P\n35 S\n80 LF\n36 FB\n56 FX\n17 PL\n50 XB\n92 L\n84 HP\n4 F\n54 LO\n85 FS\n61 XX\n72 UP\n58 FS\n35 PB\n29 PB\n6 L\n68 S\n62 UP\n27 H\n87 LX\n53 H\n99 OO\n9 F\n18 PX\n89 HU\n93 OX\n76 OL\n4 F\n83 FF\n18 PH\n49 B\n48 OO\n25 U\n82 X\n25 FX\n30 P\n98 PP\n58 FH\n47 FX\n30 FL\n83 HP\n76 U\n48 FS\n41 OL\n19 X\n9 U\n76 PB\n17 F\n60 PP\n55 FB\n45 OP\n92 UH\n82 XP\n80 FO\n8 F\n85 UH\n69 LF\n73 PU\n33 FH\n80 PP\n84 LO\n46 F\n66 UP\n7 F\n61 XS\n95 SX\n9 U\n39 OB\n63 LB\n70 OP\n20 F\n28 FX\n58 PS\n72 PT\n94 XF\n99 US\n23 U\n24 FX\n59 XS\n54 O\n7 F\n32 PX\n66 FS\n75 LB\n83 H\n39 PX\n52 PL\n12 PF\n99 XS\n3 O\n49 S\n5 X\n56 PS\n56 XT\n49 XL\n91 HF\n19 X\n33 PX\n81 XP\n6 O\n20 PF\n47 FF\n69 FU\n36 OX\n80 SP\n56 FT\n73 OF\n66 FO\n97 OS\n47 S\n81 LO\n88 OL\n79 PH\n16 H\n66 UX\n25 F\n65 FH\n1 P\n75 UX\n41 FS\n98 HH\n17 S\n56 OT\n16 P\n40 FS\n81 HT\n49 OS\n86 F\n99 FH\n40 L\n75 FX\n68 LO\n1 P\n54 O\n44 OS\n89 P\n9 U\n48 PP\n63 LO\n18 U\n29 F\n20 PX\n25 PL\n27 PF\n79 XP\n10 L\n98 HL\n14 F\n3 F\n95 SS\n99 OB\n78 FS\n5 L\n57 LU\n7 P\n61 OH\n21 PS\n18 PP\n26 FP\n25 PL\n97 US\n89 SU\n55 OF\n83 FL\n23 L\n52 F\n91 UP\n16 PL\n42 OX\n90 L\n37 X\n68 OU\n31 FU\n4 P\n98 LS\n15 U\n11 PP\n58 PH\n25 PT\n18 L\n41 PO\n9 L\n19 B\n30 FO\n73 SP\n38 OT\n53 FH\n34 FB\n98 XB\n13 PF\n28 FP\n45 PH\n6 P\n21 U\n56 P\n14 U\n96 FU\n74 PX\n93 OU\n10 O\n29 PB\n16 PO\n48 OX\n13 U\n85 FO\n30 FP\n86 OO\n81 SO\n18 PL\n72 XU\n17 L\n85 LX\n91 XT\n59 OT\n89 OS\n72 B\n40 X\n40 FS\n34 O\n10 F\n57 PH\n8 F\n90 X\n26 PH\n15 L\n12 PP\n56 S\n16 H\n5 O\n37 L\n70 FX\n7 L\n64 OF\n97 PS\n18 PP\n49 OS\n47 XF\n8 F\n96 HP\n99 HP\n16 S\n63 U\n31 OP\n75 PX\n34 PL\n38 B\n27 FX\n62 FX\n24 PF\n44 P\n43 OL\n5 L\n87 LS\n13 F\n69 LX\n76 UU\n83 LL\n31 PU\n54 XT\n10 S\n31 OP\n5 F\n90 XL\n65 LX\n71 PB\n13 H\n89 SX\n29 FO\n68 LF\n5 L\n33 H\n66 XT\n67 FX\n24 FF\n36 PL\n8 U\n39 PB\n57 LU\n4 O\n87 UU\n37 O\n69 FS\n14 S\n92 OX\n90 OX\n49 FX\n2 F\n82 UX\n86 UT\n14 F\n84 PH\n69 PF\n25 FX\n51 P\n94 UB\n21 PU\n56 XS\n48 FU\n63 UT\n11 X\n47 XF\n95 FF\n19 PF\n97 FS\n17 L\n49 PX\n7 X\n97 UP\n37 PH\n24 PP\n16 PU\n28 PX\n58 FF\n78 XP\n75 OL\n89 HT\n25 FF\n50 XX\n14 X\n12 PT\n22 PL\n69 FH\n44 PU\n25 PL\n72 PU\n74 UT\n78 LU\n92 OB\n15 X\n88 OX\n50 XL\n30 PF\n31 S\n86 OP\n70 FX\n39 PX\n41 FP\n70 S\n86 SX\n22 X\n6 L\n80 LU\n79 OO\n95 FB\n64 PB\n50 PU\n17 O\n74 XP\n1 P\n14 B\n82 PU\n72 FS\n69 UO\n41 PL\n77 LF\n22 FT\n94 B\n82 PU\n97 PB\n62 XB\n83 PL\n63 OU\n86 F\n54 FB\n23 FT\n68 XB\n30 S\n59 PB\n64 XT\n77 SL\n42 P\n19 PL\n73 UH\n47 OT\n62 OS\n58 PF\n23 PL\n18 F\n49 XH\n88 UH\n92 LP\n86 XF\n90 OS\n78 XX\n94 HX\n21 U\n75 PB\n49 XH\n69 OS\n37 PU\n82 F\n77 LO\n38 PP\n72 FB\n94 FX\n10 F\n54 PB\n35 OT\n81 SX\n37 FX\n27 FU\n77 XH\n93 HU\n55 FP\n90 FL\n47 PH\n11 S\n90 OF\n4 O\n50 PO\n46 OO\n21 PL\n53 OX\n76 PL\n45 FH\n88 HS\n80 OL\n77 OS\n12 S\n78 OO\n74 LU\n89 UU\n22 PL\n14 U\n70 FO\n14 U\n2 F\n58 PF\n86 LB\n45 F\n27 PH\n61 OF\n74 X\n50 OU\n69 FF\n68 PP\n44 PU\n14 PF\n20 H\n17 PU\n64 PL\n15 S\n14 B\n25 FX\n37 OP\n36 FH\n2 F\n63 L\n98 OB\n9 B\n35 FU\n97 SH\n40 OU\n5 O\n5 L\n95 PU\n83 SU\n1 P\n82 UU\n69 UP\n19 PS\n49 PX\n81 SU\n30 FL\n49 OU\n44 O\n38 OH\n55 XH\n1 P\n94 HS\n81 SF\n15 P\n34 OX\n89 SF\n58 XF\n77 O\n17 B\n33 H\n82 SL\n58 PL\n99 SX\n46 XL\n65 FX\n6 X\n28 FL\n18 X\n80 FB\n13 F\n91 LT\n47 OS\n41 B\n49 OL\n52 XS\n67 OB\n3 F\n87 LO\n57 OB\n67 LS\n29 FF\n82 OT\n93 PL\n93 XB\n77 XH\n46 L\n66 FH\n36 FO\n43 O\n36 PU\n32 FH\n40 OB\n75 LX\n82 FS\n2 F\n33 FX\n59 FO\n71 OL\n76 FO\n13 S\n6 X\n33 PL\n62 LL\n2 P\n4 P\n49 PS\n56 FF\n58 FX\n24 PB\n7 L\n31 FL\n9 L\n83 UF\n26 PS\n21 PS\n86 SO\n9 P\n45 X\n67 LT\n34 FF\n62 S\n66 OS\n68 B\n3 P\n76 UB\n69 H\n17 F\n76 FL\n84 XS\n63 XX\n47 FT\n52 X\n35 FB\n87 PT\n46 XX\n63 PU\n40 OH\n87 SF\n75 B\n44 OT\n61 FX\n22 PH\n16 PP\n91 O\n78 FF\n63 UO\n78 FF\n28 PL\n48 OB\n97 LP\n81 HT\n42 FT\n17 O\n38 FP\n62 XX\n43 FO\n30 PF\n28 H\n69 FB\n79 FH\n21 S\n87 OP\n24 O\n12 PT\n20 PB\n50 XL\n4 F\n26 L\n55 OS\n29 X\n9 B\n96 UH\n52 OX\n31 OT\n50 O\n21 L\n83 OU\n10 S\n26 F\n81 OP\n5 X\n30 FH\n35 S\n29 U\n69 FS\n46 OO\n80 LH\n32 H\n54 OS\n69 UO\n29 S\n45 OX\n14 L\n55 X\n61 PH\n86 LH\n50 F\n45 B\n37 PO\n91 OX\n76 UO\n79 PB\n5 O\n87 FU\n70 FO\n8 O\n62 UF\n25 O\n90 XO\n82 SP\n95 PU\n2 F\n47 H\n82 SS\n13 PF\n20 PP\n56 LP\n16 PT\n66 XL\n77 FP\n95 PT\n82 F\n93 OP\n80 FS\n12 PP\n43 U\n42 L\n62 OP\n89 XO\n78 XF\n99 LU\n30 PO\n3 F\n14 PX\n59 OX\n86 HT\n64 XX\n1 P\n70 UX\n94 UT\n93 UU\n6 P\n13 H\n39 F\n31 P\n53 OF\n99 UU\n91 UH\n43 P\n17 PT\n21 S\n68 UO\n7 F\n44 PH\n72 US\n58 PX\n70 XO\n16 L\n53 FP\n62 XF\n53 OX\n6 L\n47 PB\n32 PH\n25 P\n8 U\n51 FO\n44 PT\n14 P\n6 P\n31 FX\n47 PB\n62 XT\n51 FX\n70 XP\n57 FX\n78 XH\n27 PH\n33 H\n8 F\n22 PX\n51 LT\n72 UF\n86 LL\n34 FX\n20 PP\n50 PS\n71 OB\n20 S\n55 OP\n2 F\n98 OF\n46 OU\n35 O\n96 OF\n86 OU\n39 OL\n54 XL\n16 O\n86 OU\n17 U\n9 S\n31 U\n62 H\n54 XF\n95 UB\n40 F\n42 OL\n27 PF\n77 FX\n59 PL\n13 L\n78 OH\n60 XB\n8 S\n38 OH\n62 LX\n5 F\n6 L\n90 OH\n78 OB\n75 XU\n32 FU\n39 PX\n32 FH\n39 FO\n57 PT\n74 FH\n23 B\n13 O\n16 F\n66 UL\n57 PH\n15 B\n71 XU\n21 X\n26 PT\n54 OP\n51 XX\n64 FH\n65 XF\n28 H\n62 XB\n51 XH\n25 L\n65 XO\n44 FF\n66 FO\n4 P\n16 PO\n64 OH\n87 SS\n18 H\n21 X\n61 OO\n33 F\n70 OP\n76 LT\n68 P\n10 B\n91 S\n84 SU\n26 PU\n62 X\n71 F\n55 FO\n24 PT\n61 LF\n23 FO\n48 FL\n63 LO\n86 B\n30 PH\n73 OU\n26 X\n71 FO\n81 LS\n4 O\n72 PP\n82 U\n3 O\n86 U\n88 P\n64 B\n19 PP\n13 PT\n16 L\n77 UP\n31 OP\n97 BP\n38 PP\n53 OU\n25 U\n43 F\n64 FU\n39 OP\n34 PT\n30 FT\n93 PL\n91 OL\n14 L\n77 UH\n88 XH\n68 LU\n22 P\n93 O\n69 PL\n50 O\n96 O\n7 X\n39 OL\n58 OH\n69 XF\n62 OU\n68 PX\n13 PT\n98 BS\n73 LL\n70 UL\n90 HO\n82 FP\n78 UF\n72 XU\n34 OT\n91 LO\n82 P\n62 XH\n13 X\n20 PB\n7 X\n67 FS\n92 HF\n71 XP\n78 PL\n33 FX\n82 FO\n24 B\n46 H\n38 OP\n24 F\n82 LH\n37 PF\n7 S\n51 OB\n16 PX\n60 U\n44 XX\n17 PF\n85 XH\n13 PO\n91 US\n41 FX\n72 OO\n49 PU\n6 U\n14 PF\n4 P\n85 SF\n82 OH\n39 OH\n63 FX\n2 P\n32 PH\n39 PU\n81 OO\n26 PF\n60 OB\n66 OU\n61 XX\n85 UO\n66 LB\n32 OT\n91 SL\n86 SB\n27 L\n23 PT\n37 FO\n21 FT\n52 U\n36 PP\n58 X\n93 UL\n28 PF\n28 PL\n35 PH\n1 P\n3 O\n51 LP\n18 L\n77 UP\n34 FP\n9 O\n59 OH\n95 OF\n40 PU\n96 OS\n33 OF\n60 FU\n74 U\n30 FS\n75 PH\n63 OB\n44 XO\n47 S\n44 XO\n64 PX\n15 PF\n46 OU\n64 XO\n22 PS\n45 FX\n40 OP\n18 PP\n14 PO\n31 FU\n23 PP\n69 FF\n16 L\n33 B\n21 U\n73 FO\n51 FS\n5 F\n26 B\n16 O\n26 PF\n62 OP\n41 OH\n54 P\n56 FT\n79 XB\n69 LB\n96 UU\n61 OP\n90 OU\n76 SF\n42 FO\n2 P\n86 XT\n82 LT\n4 F\n62 PB\n11 F\n47 FH\n52 PU\n50 FH\n64 OS\n97 HF\n2 F\n20 FT\n62 S\n95 FB\n83 H\n10 F\n32 PH\n92 UP\n68 FL\n72 OF\n9 O\n42 PF\n20 PF\n53 B\n95 BP\n44 X\n23 F\n25 PP\n20 S\n70 FB\n94 SP\n42 FU\n92 UH\n34 PT\n76 SX\n41 PH\n59 XB\n84 UF\n2 F\n33 P\n25 U\n62 FO\n27 FO\n99 US\n52 X\n43 FB\n18 S\n56 FT\n98 H\n84 FB\n2 F\n63 XT\n87 UT\n57 PP\n96 HO\n10 F\n49 XL\n59 O\n22 P\n70 FL\n3 O\n54 XP\n33 OT\n59 L\n83 FT\n69 OS\n62 PO\n24 PB\n10 X\n78 SU\n82 UB\n61 S\n65 H\n45 FL\n96 HO\n86 B\n77 B\n80 OP\n92 PF\n20 PB\n76 OB\n41 XT\n34 PX\n84 HT\n58 XP\n89 PB\n44 P\n61 LU\n20 U\n61 XF\n35 L\n74 PP\n63 L\n79 FL\n75 XX\n45 XL\n20 PF\n37 OT\n67 FX\n83 OB\n64 U\n43 X\n32 PS\n21 FT\n48 B\n82 LB\n37 PS\n69 OP\n53 PF\n38 OS\n36 OO\n24 FT\n83 FU\n95 UU\n77 SS\n83 SL\n92 F\n38 OX\n98 FP\n11 L\n40 XT\n39 H\n40 PX\n43 PP\n72 P\n74 SP\n6 O\n88 US\n23 FP\n1 P\n4 O\n44 PU\n90 HX\n92 HO\n75 H\n69 UX\n91 PL\n93 HB\n50 XO\n1 P\n45 OL\n69 OU\n6 P\n92 UH\n10 U\n44 O\n39 H\n2 P\n71 PO\n89 HO\n49 PL\n82 S\n20 P\n18 PL\n60 LT\n62 XT\n71 OB\n29 PL\n21 PL\n45 O\n72 OT\n98 BO\n37 S\n40 OF\n33 FB\n94 SL\n88 OT\n16 X\n59 F\n63 LH\n94 HH\n21 PO\n11 P\n68 OB\n15 S\n1 P\n53 F\n64 UF\n88 FL\n62 LB\n96 HP\n3 P\n23 H\n97 HF\n33 PB\n39 OO\n77 FS\n90 SS\n67 LH\n92 SL\n79 XF\n76 FO\n6 X\n37 OL\n24 PU\n82 LH\n85 UX\n94 HB\n43 OO\n11 U\n78 OP\n34 L\n82 O\n89 FH\n97 P\n91 PP\n33 FB\n42 PH\n48 PX\n98 F\n6 U\n37 PF\n51 XH\n91 OO\n44 OP\n83 PS\n56 OP\n24 FT\n60 FL\n12 L\n56 OP\n57 PU\n39 OU\n71 PP\n28 FP\n56 XP\n59 LO\n40 XT\n90 UO\n57 LU\n79 OP\n68 FS\n3 O\n65 OB\n17 PF\n10 B\n21 P\n47 FB\n82 OF\n48 PB\n22 O\n10 S\n88 LB\n26 FU\n46 XU\n8 H\n56 F\n7 U\n6 L\n75 LS\n36 FH\n38 FX\n70 H\n41 PF\n38 FH\n64 OS\n21 PL\n93 XO\n67 LX\n81 FS\n57 OP\n40 PB\n45 FS\n79 UL\n46 PO\n54 OS\n67 UU\n37 OF\n73 PB\n14 PT\n54 H\n3 O\n87 SP\n99 UO\n42 OH\n27 L\n47 FB\n87 PB\n71 UB\n29 FL\n15 PX\n35 F\n42 PU\n27 B\n83 SB\n61 XF\n53 OP\n22 H\n28 PB\n63 OU\n21 P\n71 OH\n56 PL\n59 FH\n1 P\n55 XS\n59 PO\n28 FL\n16 O\n61 O\n85 LB\n79 UP\n89 UL\n99 BB\n31 P\n76 H\n99 PF\n32 O\n64 PL\n13 F\n28 PU\n19 PL\n55 X\n72 LU\n22 O\n82 UU\n1 P\n1 P\n83 HF\n70 LT\n47 FF\n53 OS\n43 OB\n59 LX\n93 LL\n97 OO\n73 XP\n15 PO\n26 FO\n1 P\n26 U\n42 FF\n39 P\n50 FL\n9 H\n19 PP\n23 PF\n80 XX\n65 OX\n33 OT\n49 O\n48 XS\n73 XF\n50 OH\n98 FB\n31 FF\n61 U\n13 PF\n77 XB\n61 LH\n22 B\n38 PH\n18 PU\n33 OF\n62 FB\n24 U\n8 L\n46 O\n56 L\n9 U\n39 PL\n46 FF\n47 PU\n3 P\n10 F\n17 PO\n75 UT\n1 P\n14 L\n59 PH\n28 B\n30 FB\n29 PL\n35 OP\n91 XB\n48 B\n1 P\n27 FX\n54 XP\n93 SH\n86 LB\n73 FU\n64 PP\n88 PX\n66 PB\n98 SH\n20 PS\n35 OF\n36 PB\n53 F\n3 O\n86 FT\n72 X\n67 US\n59 PS\n57 PB\n99 XU\n87 US\n1 P\n67 LT\n16 L\n67 XT\n29 X\n23 B\n94 SX\n59 PS\n19 F\n21 FT\n89 PO\n98 BH\n21 L\n40 S\n21 FT\n99 HF\n3 P\n19 H\n94 LB\n41 OU\n46 PX\n13 P\n68 PS\n27 L\n89 OL\n32 FX\n41 FU\n26 PB\n82 UF\n10 X\n77 XH\n42 OL\n20 PF\n74 LU\n48 OT\n69 OS\n7 X\n30 FP\n30 FH\n14 PT\n25 FO\n57 XL\n28 PF\n22 X\n52 FS\n99 XL\n13 O\n44 FP\n13 H\n72 XT\n48 PB\n65 LO\n37 OF\n41 U\n3 P\n85 LF\n11 B\n5 L\n45 PS\n12 X\n72 PX\n60 P\n2 P\n91 XX\n43 FP\n79 FH\n39 OT\n15 H\n54 FL\n90 OT\n96 XB\n27 X\n46 FB\n91 FT\n83 LB\n62 S\n95 B\n22 PX\n97 LX\n96 UP\n82 HT\n25 F\n77 SU\n56 PX\n77 LH\n75 H\n83 PT\n65 OF\n89 XX\n31 FS\n30 FP\n14 PP\n2 P\n73 UO\n25 X\n61 XL\n16 PT\n80 LU\n11 U\n68 OU\n98 UX\n1 P\n63 OX\n20 PU\n78 PO\n70 FX\n68 UU\n88 O\n23 O\n1 P\n75 PS\n41 FL\n67 PF\n7 F\n64 L\n94 PP\n86 HU\n12 B\n22 FP\n28 FH\n20 U\n36 OO\n49 PP\n40 FB\n55 B\n86 LF\n92 UO\n80 B\n97 UP\n15 H\n23 S\n73 OT\n14 L\n25 U\n66 OF\n52 OU\n52 OS\n88 UH\n9 F\n90 PB\n4 P\n68 FT\n73 LF\n29 FT\n7 O\n79 FS\n99 OB\n28 PB\n47 OP\n62 FL\n65 PL\n41 PO\n66 O\n28 PU\n95 HU\n44 O\n84 FU\n43 OT\n68 PS\n63 P\n11 PT\n85 U\n9 B\n89 FH\n66 P\n43 OP\n86 OP\n11 U\n50 OL\n41 P\n47 PT\n45 FF\n45 XP\n7 F\n12 P\n63 LB\n3 F\n36 FT\n83 OL\n56 FB\n81 UT\n3 P\n13 PO\n40 PF\n94 BF\n15 H\n56 FP\n90 O\n41 FL\n42 OB\n18 O\n24 PT\n39 FF\n13 PF\n22 L\n81 PO\n43 FB\n46 FT\n8 L\n28 FF\n89 FX\n81 L\n29 FX\n67 LX\n22 PP\n85 UH\n38 OT\n93 HF\n7 O\n33 P\n91 OX\n38 PT\n88 HS\n65 O\n56 XU\n78 OU\n83 XB\n9 F\n50 OH\n18 X\n8 P\n11 F\n59 PP\n5 X\n77 LT\n82 SF\n37 L\n6 X\n4 P\n62 B\n88 SF\n94 UT\n27 PX\n55 LO\n94 US\n17 PT\n13 F\n76 X\n46 PF\n20 PX\n58 FS\n48 FF\n90 HP\n48 PP\n73 LT\n18 L\n83 SS\n70 UU\n91 OH\n54 OF\n24 H\n9 X\n66 OS\n4 F\n91 OB\n12 PT\n58 XS\n2 F\n44 PL\n65 U\n6 U\n56 XS\n57 OB\n3 O\n4 P\n10 O\n6 L\n27 PU\n56 FF\n83 OT\n74 XB\n36 PT\n97 OU\n34 FX\n38 FL\n94 FL\n91 B\n56 LO\n35 PU\n89 SL\n20 L\n94 X\n94 XB\n88 OT\n76 PO\n18 P\n11 F\n90 OL\n32 PL\n89 PL\n49 PT\n95 PX\n36 PF\n97 BP\n67 PT\n68 U\n21 PB\n68 FL\n39 B\n74 FL\n9 S\n81 X\n56 P\n48 P\n14 PO\n47 XF\n53 U\n82 XH\n98 PF\n63 LO\n17 L\n47 F\n32 PX\n86 HX\n63 LS\n48 XT\n19 PP\n13 PO\n34 OX\n29 PS\n91 OS\n64 XO\n35 OP\n80 PB\n71 UU\n18 L\n35 OL\n65 PT\n27 FT\n40 FH\n99 XO\n90 OX\n67 XL\n56 OS\n90 UT\n29 FU\n98 XH\n40 OH\n80 PX\n96 SB\n3 F\n84 SU\n45 XL\n42 F\n95 FX\n99 L\n87 LH\n92 O\n64 H\n39 FH\n51 FT\n85 SP\n82 LP\n89 LX\n31 U\n93 OU\n91 L\n32 H\n78 U\n35 OP\n66 F\n40 PL\n22 L\n45 X\n44 OT\n49 XX\n3 F\n5 F\n62 LP\n31 O\n6 L\n76 LO\n90 XS\n16 F\n39 FU\n88 XH\n88 SL\n97 FH\n87 PX\n29 PF\n75 US\n66 OF\n38 S\n67 XO\n77 XU\n45 X\n98 XO\n13 P\n47 XF\n18 PT\n42 F\n4 O\n30 FS\n70 LH\n76 UO\n15 PX\n52 FU\n7 P\n18 PO\n95 FB\n8 L\n18 L\n24 FT\n37 OL\n46 OF\n48 XS\n85 XT\n53 OH\n36 PU\n79 PT\n77 PL\n91 PS\n45 PO\n98 U\n33 PU\n93 LT\n49 O\n53 XT\n58 LP\n88 SO\n52 LP\n42 PH\n48 OS\n60 OU\n25 FO\n16 PP\n1 P\n67 LT\n6 O\n89 FS\n43 PF\n65 UX\n3 O\n84 XO\n68 PL\n41 FL\n62 OT\n28 F\n77 LO\n61 LX\n37 X\n82 LX\n74 UU\n89 OF\n48 FU\n31 PP\n50 FU\n76 SX\n52 X\n83 OT\n59 OF\n88 SB\n4 O\n41 FO\n65 XX\n90 HH\n84 FL\n91 HB\n5 L\n4 X\n59 S\n59 PU\n75 UO\n20 B\n45 XT\n49 XU\n50 PU\n76 OX\n51 OH\n94 OO\n48 XX\n22 P\n52 LP\n30 FT\n89 UB\n52 XX\n70 PF\n31 FS\n93 BO\n7 S\n71 P\n24 PP\n94 LH\n26 PF\n35 OF\n54 FP\n29 PH\n27 F\n74 ST\n71 XP\n76 FF\n20 PH\n36 OU\n5 F\n42 OH\n14 O\n88 LX\n29 FO\n1 P\n75 LL\n49 OL\n22 PS\n76 FT\n33 B\n67 U\n30 PO\n25 PB\n95 FP\n50 PP\n40 FB\n19 X\n16 U\n1 P\n57 OH\n63 PT\n51 O\n56 PH\n27 S\n5 O\n16 PU\n8 X\n10 H\n51 FB\n8 S\n54 L\n66 B\n75 UH\n21 PT\n70 XO\n27 PU\n70 UU\n34 OF\n12 PF\n99 BH\n29 PF\n66 LX\n99 FF\n80 LU\n76 XX\n59 FX\n24 PO\n18 PU\n10 X\n61 OX\n6 O\n72 X\n65 FX\n44 FP\n68 FH\n86 U\n55 XH\n89 FO\n37 PH\n57 X\n76 OF\n81 XL\n12 L\n69 PU\n65 LU\n63 PF\n46 XL\n86 OL\n51 LP\n82 OU\n40 S\n67 OT\n83 UT\n12 PP\n27 FS\n43 PO\n20 PT\n58 PB\n60 XT\n4 F\n59 OO\n47 PF\n91 XP\n23 F\n21 PF\n56 XL\n18 PX\n50 FT\n41 FB\n62 FP\n96 SB\n61 PO\n41 OU\n32 FL\n83 FP\n64 LF\n66 PP\n21 PH\n29 PX\n92 OB\n42 PU\n6 X\n28 B\n81 FF\n45 FP\n59 LF\n39 OX\n38 OO\n89 HU\n97 LH\n28 PL\n41 PS\n82 XB\n46 FH\n62 H\n98 SO\n8 F\n51 LT\n91 SX\n90 LU\n83 PT\n90 UH\n30 FB\n48 OT\n16 PL\n41 U\n21 PO\n78 PU\n77 H\n23 PO\n91 SP\n36 FL\n34 PB\n46 S\n99 HL\n94 BT\n39 OO\n15 P\n64 FP\n47 FX\n36 FU\n53 L\n51 OT\n72 LO\n34 U\n89 LU\n82 FO\n6 L\n5 F\n67 UP\n90 X\n33 PO\n60 LS\n16 B\n12 X\n50 PU\n40 U\n61 FO\n44 XT\n71 XL\n26 S\n84 UP\n23 L\n99 BX\n42 OF\n89 PP\n15 L\n7 L\n91 UP\n29 FB\n89 XO\n11 PT\n39 PX\n15 F\n43 FO\n33 PP\n13 H\n46 PT\n17 L\n23 U\n16 PO\n47 OO\n53 LT\n49 OO\n85 LX\n30 P\n76 OF\n96 HF\n28 PH\n50 XO\n6 X\n90 OH\n68 OH\n92 UP\n25 FF\n2 F\n62 OO\n59 PU\n78 O\n25 FO\n59 S\n38 PO\n50 F\n19 B\n42 FU\n46 O\n13 PF\n2 F\n65 UL\n25 X\n85 S\n8 L\n84 XH\n82 XL\n10 O\n24 FP\n37 FH\n86 PS\n99 O\n48 PX\n45 XT\n81 O\n65 PX\n18 L\n90 UB\n75 UU\n43 OH\n10 H\n77 UH\n70 LT\n41 PX\n93 HO\n58 FU\n29 FX\n22 PP\n95 B\n63 XF\n56 PP\n22 PB\n75 LO\n5 P\n87 UF\n26 PX\n23 FT\n22 P\n89 PT\n43 PF\n98 XX\n22 B\n36 FB\n96 FS\n99 BT\n76 XS\n17 S\n78 UL\n99 UH\n10 H\n76 UL\n90 U\n27 O\n62 UT\n72 UO\n57 FB\n23 L\n85 PP\n76 P\n7 X\n12 H\n80 PP\n91 HT\n40 OS\n23 PP\n90 UU\n19 PU\n62 PB\n20 O\n75 PL\n31 P\n24 F\n43 PT\n28 PT\n17 F\n90 HP\n14 B\n1 P\n78 FS\n5 O\n24 B\n6 O\n92 HU\n54 FF\n70 OH\n82 OX\n66 XS\n48 OB\n62 O\n87 OS\n14 PX\n58 FX\n55 XF\n41 H\n85 PO\n90 PF\n51 L\n74 UX\n74 PP\n24 PP\n48 OT\n76 FB\n41 F\n11 B\n61 OO\n29 O\n61 LL\n78 XO\n43 XF\n92 OP\n62 LB\n71 OF\n82 FF\n2 P\n79 FF\n61 O\n28 PF\n87 LL\n23 PS\n28 PT\n43 XF\n96 XH\n77 PX\n43 PU\n12 P\n65 LU\n36 PO\n2 F\n65 XB\n48 PU\n41 O\n81 XP\n23 PX\n20 X\n42 FS\n78 OB\n77 SF\n90 PP\n54 XF\n89 HS\n94 F\n24 PO\n31 PU\n19 B\n82 UU\n95 OS\n75 XL\n39 FO\n91 UX\n20 PF\n34 B\n84 XL\n93 HP\n42 PO\n40 OH\n30 FO\n80 UX\n13 O\n90 SF\n61 LX\n78 FU\n33 F\n41 OH\n97 LF\n55 XU\n92 SO\n99 LF\n5 F\n26 PP\n31 OP\n6 P\n52 F\n80 PU\n79 OP\n51 OH\n34 S\n93 UL\n5 X\n60 FB\n28 FF\n16 P\n31 P\n6 P\n34 FB\n48 PU\n50 XT\n66 FU\n58 FX\n12 L\n8 L\n63 LH\n30 S\n22 PL\n38 OL\n35 FS\n43 FX\n7 F\n86 UH\n27 FP\n44 FO\n43 OU\n18 U\n25 H\n26 U\n22 FF\n89 X\n2 P\n51 B\n22 PT\n36 FP\n96 S\n17 PF\n68 UP\n18 B\n85 XL\n9 H\n29 FS\n97 UF\n55 OP\n54 OP\n47 XF\n79 FH\n37 OU\n94 LT\n46 XU\n23 FO\n53 LP\n45 XT\n99 SS\n80 PH\n19 S\n89 SL\n95 FP\n23 U\n97 FO\n94 UP\n68 UP\n43 FT\n26 PB\n53 PP\n45 OB\n67 PL\n62 OO\n33 O\n44 PS\n6 X\n20 PU\n17 B\n43 FS\n99 HL\n28 B\n25 PH\n54 F\n18 S\n47 OX\n28 PP\n8 X\n26 PO\n45 OB\n36 U\n53 OS\n63 FX\n94 FL\n51 H\n57 OO\n43 FL\n35 PX\n14 PF\n34 FX\n58 B\n93 PB\n73 FX\n99 BB\n47 OU\n16 L\n38 PT\n96 FT\n71 XT\n81 UL\n89 UP\n82 LL\n82 FL\n15 O\n83 HP\n71 PL\n27 PF\n17 L\n85 LL\n6 L\n2 P\n46 OH\n28 PS\n5 P\n16 H\n96 L\n99 BB\n20 H\n59 FO\n35 OT\n10 P\n23 S\n32 X\n79 UL\n5 O\n41 OU\n84 FF\n66 FO\n4 X\n84 PS\n50 S\n32 U\n36 PB\n41 FU\n94 SS\n87 XP\n70 O\n13 O\n82 OS\n54 F\n39 FX\n38 PS\n52 OB\n26 PH\n74 OT\n37 FO\n39 X\n3 P\n95 SX\n8 H\n39 OF\n81 UO\n10 O\n45 FH\n39 OB\n97 FU\n15 PX\n87 XO\n66 XB\n77 XX\n41 PL\n90 LB\n36 PF\n33 PO\n89 FH\n28 PS\n51 FF\n44 OP\n29 FU\n74 UU\n91 UT\n37 F\n74 H\n93 XT\n31 FB\n44 FB\n26 PL\n20 PP\n11 PT\n7 L\n14 PX\n89 FT\n71 OP\n39 PT\n64 OO\n80 XU\n57 H\n18 P\n57 FH\n27 PO\n2 P\n58 FL\n76 U\n15 F\n65 B\n1 P\n43 XP\n90 F\n20 FT\n93 XP\n59 LP\n1 P\n36 H\n45 FF\n29 PU\n66 LB\n23 O\n11 PT\n64 U\n23 FP\n11 H\n77 PS\n83 FS\n90 PT\n7 O\n64 S\n27 FX\n28 FL\n84 XP\n67 UT\n92 HB\n90 HT\n30 FL\n62 OH\n15 PT\n97 OH\n76 OP\n7 O\n34 OX\n62 PL\n86 UL\n10 U\n23 PX\n13 B\n21 L\n24 P\n75 XP\n41 U\n62 PT\n12 PF\n38 OO\n91 PP\n69 OO\n53 PS\n27 PP\n99 L\n82 SP\n16 H\n60 L\n24 S\n50 OU\n99 FO\n22 FF\n9 H\n96 XT\n99 XH\n66 PP\n73 FP\n59 S\n57 XH\n59 LO\n19 PF\n55 FX\n36 OL\n11 PP\n11 PT\n63 LP\n78 OX\n65 OH\n89 SH\n7 S\n90 SU\n45 PS\n61 PU\n12 H\n61 LS\n51 PP\n40 PH\n14 X\n54 PF\n52 PP\n54 OU\n39 OH\n39 PS\n66 FX\n81 SF\n51 O\n30 PL\n50 XH\n90 XP\n92 FX\n36 FB\n24 FF\n74 LX\n9 L\n76 OU\n58 FB\n33 X\n10 O\n61 PX\n9 B\n53 OU\n33 PS\n26 FO\n83 FS\n59 LL\n42 PT\n36 PO\n90 OT\n2 F\n7 S\n3 F\n44 FP\n14 X\n35 L\n68 PS\n46 OF\n97 PX\n69 US\n35 PS\n27 FL\n78 FT\n7 L\n76 UP\n51 PS\n81 FS\n93 HT\n85 F\n38 P\n14 PP\n36 PH\n19 B\n72 H\n76 OL\n80 SF\n7 U\n40 OT\n52 U\n74 LT\n35 OT\n44 B\n86 FH\n39 S\n42 XP\n38 PL\n57 LL\n48 XF\n49 XS\n37 OP\n25 S\n45 XO\n65 OO\n29 S\n73 LO\n4 F\n78 OH\n23 O\n81 OX\n43 FX\n86 FH\n42 OF\n95 PH\n43 OX\n73 FF\n63 LH\n73 LB\n7 L\n33 U\n82 UB\n42 FB\n93 S\n81 ST\n32 FS\n83 LL\n26 PF\n99 FF\n64 PO\n32 U\n51 X\n82 OL\n82 FB\n11 P\n95 OB\n45 FF\n59 OS\n66 PB\n88 PO\n32 O\n26 PT\n93 SB\n69 OO\n20 PB\n9 B\n45 OU\n22 PO\n87 FB\n36 PB\n95 LL\n67 PO\n43 FO\n53 LO\n76 PP\n24 PU\n14 O\n34 L\n94 U\n88 UP\n98 XS\n64 XS\n97 OO\n46 FF\n54 FP\n44 OX\n36 PB\n45 OP\n11 F\n42 B\n26 PB\n42 OU\n55 PH\n57 PL\n68 PT\n26 PH\n35 PP\n89 FF\n90 OB\n35 PB\n4 F\n30 B\n44 OS\n4 O\n9 U\n12 B\n91 PS\n11 P\n76 FB\n87 L\n24 B\n43 PF\n6 P\n29 FP\n71 PO\n85 H\n15 X\n55 PB\n15 U\n97 HT\n91 OH\n63 XP\n83 UU\n80 XO\n84 FU\n16 PF\n80 SU\n29 O\n2 F\n63 LS\n86 S\n85 UF\n59 XS\n88 LB\n82 LB\n56 LT\n37 OT\n52 OB\n20 PP\n49 OX\n27 FO\n27 PX\n63 LS\n40 PH\n87 UT\n65 UL\n67 XB\n73 UP\n76 OP\n3 P\n5 O\n29 FT\n70 U\n77 PT\n26 FP\n18 H\n22 H\n98 BL\n25 FO\n10 L\n15 H\n97 U\n32 S\n82 SO\n96 PX\n64 S\n74 PT\n17 PT\n71 XF\n34 X\n65 OL\n47 OF\n59 FB\n21 L\n33 OO\n47 XU\n42 OU\n28 FO\n14 P\n7 S\n26 PT\n26 FT\n55 FB\n41 L\n99 BB\n18 X\n68 B\n51 FS\n3 P\n99 SO\n36 OX\n57 PB\n11 F\n48 XS\n12 H\n42 PP\n63 UO\n19 PL\n61 XL\n69 PL\n32 L\n22 PX\n88 HT\n58 LH\n29 FS\n35 OP\n7 O\n72 OU\n76 LP\n58 OB\n63 OX\n91 XT\n8 H\n35 FP\n14 X\n40 FF\n13 H\n59 FO\n32 FO\n44 OP\n46 OB\n68 OT\n44 FX\n70 FP\n88 B\n68 LX\n13 F\n81 P\n95 X\n14 B\n73 PL\n73 O\n94 LL\n35 PX\n29 X\n61 OF\n91 UP\n56 PS\n30 PH\n82 F\n4 F\n95 XU\n6 P\n17 PU\n61 FB\n22 PF\n15 PX\n19 PH\n65 O\n58 XB\n50 XP\n31 FH\n60 XX\n88 XL\n20 L\n24 PU\n67 F\n68 XT\n38 PS\n25 S\n79 OH\n72 XF\n58 OX\n76 FH\n52 PB\n44 OP\n43 FH\n91 OP\n49 OX\n83 PS\n93 PP\n61 XU\n91 UX\n74 OF\n19 PO\n62 LB\n97 LS\n61 PU\n54 U\n12 U\n38 L\n43 FF\n3 O\n7 O\n66 PH\n27 FF\n61 XB\n4 P\n58 LP\n92 O\n78 SL\n16 PT\n42 OB\n74 LS\n37 P\n80 OS\n59 P\n71 US\n15 O\n74 FX\n9 X\n3 O\n82 PU\n92 H\n74 OO\n75 FH\n93 OX\n88 SS\n50 PL\n99 PP\n81 UL\n74 PO\n84 OB\n15 X\n2 F\n76 SO\n6 U\n22 PX\n57 OO\n18 U\n87 FH\n36 FX\n89 XO\n3 O\n73 LU\n26 U\n91 SH\n28 PU\n41 OU\n14 P\n75 XU\n75 OL\n72 US\n57 OP\n34 FU\n41 OL\n75 PB\n16 H\n37 FH\n30 FT\n62 XX\n88 HX\n15 B\n55 OS\n43 PP\n23 PT\n35 OX\n97 LT\n55 B\n85 H\n23 S\n69 XH\n65 LT\n77 XO\n25 B\n29 U\n6 X\n88 OS\n90 PB\n18 O\n97 LX\n27 PS\n56 PU\n98 OS\n90 SS\n90 HX\n52 XF\n57 LT\n60 LX\n31 PB\n14 PF\n97 SB\n15 X\n62 LU\n37 FL\n99 OF\n29 PF\n52 OX\n26 B\n46 OO\n57 OB\n45 H\n84 FP",
        "sample_output": "Case #1: TPFOXLUSHB",
        "source": "2020\\round_1c\\overrandomized"
    },
    {
        "problem_name": "Oversized Pancake Choppers",
        "problem_statement": "You just showed up to your job as the head chef of the Infinite House of\n  Pancakes, and as usual, you found a disaster in progress! The other chefs\n  accidentally created some enormous circular pancakes, all of the same size.\n  These pancakes are too large to serve whole, so they have already started to\n  chop them up intoslices(which, in this problem, arecircular sectors).\n  You currently haveNslices, the i-th of which is a sector\n  with an internal (central) angle ofAinanodegrees\n  (a nanodegree is 10-9degrees).\nYou haveDdiners waiting for their food. Each diner wants a single\n  slice that is the same size as every other diner's slice, although they do\n  not care what that size is. But it may not be possible to do this using the\n  current slices, so you may need to make one or more radialcuts.\nA cut changes an existing slice with internal angle X into two new slices\n  with internal angles Y and X - Y. You can do this for any 0 < Y < X,\n  and these values do not need to be integers. You may apply further cuts to\n  either or both of these new slices, and so on.\nIt is OK to have one or more leftover slices (of any size) that are not\n  given to the diners; you can eat those later, since this disaster is making\n  you miss your own breakfast!\nDetermine the smallest total number of cuts you need to make to satisfy the\n  diners.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing two\n  integersNandD: the number of slices you currently have and\n  the number of diners. Then, there is one more line containingNintegersA1,A2, ...,AN; the i-th of these represents the internal angle\n  (in nanodegrees) of the i-th slice.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the smallest number of cuts you need, as described above.\nMemory limit: 1GB.1 ≤T≤ 100.1 ≤Ai< 360 × 109, for all i.\nTime limit: 20 seconds.1 ≤N≤ 300.2 ≤D≤ 3.\nTime limit: 20 seconds.1 ≤N≤ 300.2 ≤D≤ 50.\nTime limit: 60 seconds.For exactly 21 cases, 9000 ≤N≤ 10000.For exactlyT-21 cases, 1 ≤N≤ 1000.2 ≤D≤ 50.\nIn Sample Case #1, you only have one tiny slice to start with. The optimal\n  solution is to use one cut to change it into two slices with angles of 1/3\n  nanodegree and 2/3 nanodegrees, and then further cut the latter slice into\n  two more slices with angles of 1/3 nanodegree.\nIn Sample Case #2, you already have two slices of the same size, so you can\n  give those to the two diners, and you do not need to make any cuts.\nIn Sample Case #3, the optimal solution is to cut the slice with internal\n  angle 8 nanodegrees in half. After that operation, you have exactly 3 slices\n  of internal angle 4 nanodegrees, with no leftovers.\nIn Sample Case #4, remember that every diner must receive a single slice.\n  You cannot give one diner the \"3\" slice and the other diner the \"1\" and \"2\"\n  slices, even though the total areas are the same. You must make at least one\n  cut in this case to satisfy the requirements.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing two\n  integersNandD: the number of slices you currently have and\n  the number of diners. Then, there is one more line containingNintegersA1,A2, ...,AN; the i-th of these represents the internal angle\n  (in nanodegrees) of the i-th slice.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the smallest number of cuts you need, as described above.",
        "sample_input": "4\n1 3\n1\n5 2\n10 5 359999999999 123456789 10\n2 3\n8 4\n3 2\n1 2 3",
        "sample_output": "Case #1: 2\nCase #2: 0\nCase #3: 1\nCase #4: 1",
        "source": "2020\\round_1c\\oversized_pancake_choppers"
    },
    {
        "problem_name": "Emacs++",
        "problem_statement": "In 2016's Distributed Code Jam, we introduced the Lisp++ language for Lisp\n  fans who prefer a higher density of parentheses. Here is a reminder of how\n  the language's syntax works:\nA Lisp++ program is a string of balanced parentheses. More formally, a Lisp++\n  program consists of one of the following. (In this specification,Cstands for some program code — not necessarily the same code each time.)\nThis year, we are pleased to announce Emacs++, a text viewer for Lisp++.\n  Emacs++ displays a Lisp++ program of lengthKas a single long line\n  with a cursor that you can move around. The cursor is a \"block cursor\" that\n  is always locatedonone of theKcharacters in the program,\n  rather than between characters.\nAt any point, you can perform one of the following three actions to move the\n  cursor. (i represents the current position of the cursor, counting starting\n  from 1 for the leftmost position.)\nWe think Emacs++ will be simple for power users, but we still need to\n  understand how efficient it is. We have a single Lisp++ program and list ofQqueries about that program; each query consists of a start positionSjand an end positionEj. To answer the j-th query,\n  you must determine the smallest possible amount of time Nj(in\n  seconds) that it will take to take the cursor from positionSjto positionEj, if you make optimal decisions.\nPlease output the sum of all of those Njvalues.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains two integersK,\n  which is the length of the Lisp++ program, andQ, which is the number of queries.\nThe second line of a test case contains a stringPofKcharacters, each of which\n  is either(or),\n  representing a Lisp++ program (string of balanced parentheses), as described above.\nThe third, fourth, and fifth lines of a test case each containKintegers. The i-th\n  integers in these lines are the valuesLi,Ri, andPi, respectively, that are described above.\nThe sixth and seventh lines of a test case each containQintegers. The j-th integers\n  in these lines areSjandEj, respectively, that are\n  described above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the sum of the Njvalues that are described above.\nTime limit: 60 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.K= 105andQ= 105, for at most 9 test cases.2 ≤K≤ 1000 and  1 ≤Q≤ 1000, in all other cases.length ofP=KPis a string of balanced parentheses, as described above.1 ≤Sj≤K, for all j.1 ≤Ej≤K, for all j.\nLi= 1, for all i.Ri= 1, for all i.Pi= 1, for all i.\n1 ≤Li≤ 106, for all i.1 ≤Ri≤ 106, for all i.1 ≤Pi≤ 106, for all i.\nIn the sample case, which obeys the limits for Test Set 1, all of the time\n  costs are the same (1 second per move).The shortest times for the queries are as follows:Move right from 7 five times to 12 taking 5 seconds.Teleport from 4 to 11 taking 1 second.Teleport from 4 to 11, then move left to 10 taking 2 seconds.Teleport from 12 to 1, taking 1 second.Move right from 5 to 6 taking 1 second.Thus, the sum of query times is 5+1+2+1+1 = 10 seconds.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains two integersK,\n  which is the length of the Lisp++ program, andQ, which is the number of queries.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the sum of the Njvalues that are described above.",
        "sample_input": "1\n12 5\n(()(((()))))\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1\n7 4 4 12 5\n12 11 10 1 6",
        "sample_output": "Case #1: 10",
        "source": "2020\\round_2\\emacs"
    },
    {
        "problem_name": "Incremental House of Pancakes",
        "problem_statement": "Every morning at The Incremental House of Pancakes, the kitchen staff prepares all of its\n  pancakes for the day and arranges them into two stacks. Initially, the stack on the left hasLpancakes, and the stack on the right hasRpancakes.\nThis restaurant's customers behave very consistently: the i-th customer to arrive (counting\n  starting from 1) always orders i pancakes. When the i-th customer places their order of i\n  pancakes, you take i pancakes from the stack that has the most pancakes remaining (or from the\n  left stack if both have the same amount). If neither stack has at least i pancakes, the restaurant\n  closes and the i-th customer does not get served any pancakes. You never complete an order using\n  pancakes from both stacks.Given the initial numbers of pancakes in each stack, you want to know how many customers will be\n  served, and how many pancakes will remain in each stack when the restaurant closes.InputThe first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each test case consists of a single line containing two integersLandR: the\n  initial numbers of pancakes in the left and right stacks, respectively, as described above.OutputFor each test case, output one line containingCase #x: n l r, wherexis the test case number (starting from 1),nis the number of customers who will be\n  served, andlandrare the numbers of pancakes that will remain in the\n  left and right stacks, respectively, when the restaurant closes.LimitsTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 1000.Test Set 1 (Visible Verdict)1 ≤L≤ 1000.1 ≤R≤ 1000.Test Set 2 (Hidden Verdict)1 ≤L≤ 1018.1 ≤R≤ 1018.SampleSample Inputsave_altcontent_copyCopied!3\n1 2\n2 2\n8 11Sample Outputsave_altcontent_copyCopied!Case #1: 1 1 1\nCase #2: 2 1 0\nCase #3: 5 0 4In Sample Case #1, the first customer gets 1 pancake from the right stack, leaving 1 pancake in\n  each stack. The second customer wants 2 pancakes, but neither stack has enough for them, even\n  though there are 2 pancakes in total.In Sample Case #2, the first customer gets 1 pancake from the left stack, because both\n  stacks have the same amount. This leaves 1 pancake in the left stack and 2 in the right stack.\n  The second customer wants 2 pancakes, which you serve to them from the right stack, emptying it.\n  When the third customer arrives, neither stack has 3 pancakes, so no more orders are fulfilled.In Sample Case #3, the first customer is served from the right stack, leaving 8 pancakes in the\n  left stack and 10 in the right stack. The second customer is also served from the right stack,\n  leaving 8 pancakes in each stack. The third customer is served from the left stack, leaving 5\n  pancakes there and 8 in the right stack. The fourth customer is then served from the right stack,\n  leaving 4 pancakes there. Serving the fifth customer empties the left stack, and then there are\n  not enough pancakes remaining in either stack to serve a sixth customer.\n\nInputThe first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each test case consists of a single line containing two integersLandR: the\n  initial numbers of pancakes in the left and right stacks, respectively, as described above.OutputFor each test case, output one line containingCase #x: n l r, wherexis the test case number (starting from 1),nis the number of customers who will be\n  served, andlandrare the numbers of pancakes that will remain in the\n  left and right stacks, respectively, when the restaurant closes.LimitsTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 1000.Test Set 1 (Visible Verdict)1 ≤L≤ 1000.1 ≤R≤ 1000.Test Set 2 (Hidden Verdict)1 ≤L≤ 1018.1 ≤R≤ 1018.SampleSample Inputsave_altcontent_copyCopied!3\n1 2\n2 2\n8 11Sample Outputsave_altcontent_copyCopied!Case #1: 1 1 1\nCase #2: 2 1 0\nCase #3: 5 0 4In Sample Case #1, the first customer gets 1 pancake from the right stack, leaving 1 pancake in\n  each stack. The second customer wants 2 pancakes, but neither stack has enough for them, even\n  though there are 2 pancakes in total.In Sample Case #2, the first customer gets 1 pancake from the left stack, because both\n  stacks have the same amount. This leaves 1 pancake in the left stack and 2 in the right stack.\n  The second customer wants 2 pancakes, which you serve to them from the right stack, emptying it.\n  When the third customer arrives, neither stack has 3 pancakes, so no more orders are fulfilled.In Sample Case #3, the first customer is served from the right stack, leaving 8 pancakes in the\n  left stack and 10 in the right stack. The second customer is also served from the right stack,\n  leaving 8 pancakes in each stack. The third customer is served from the left stack, leaving 5\n  pancakes there and 8 in the right stack. The fourth customer is then served from the right stack,\n  leaving 4 pancakes there. Serving the fifth customer empties the left stack, and then there are\n  not enough pancakes remaining in either stack to serve a sixth customer.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each test case consists of a single line containing two integersLandR: the\n  initial numbers of pancakes in the left and right stacks, respectively, as described above.\nFor each test case, output one line containingCase #x: n l r, wherexis the test case number (starting from 1),nis the number of customers who will be\n  served, andlandrare the numbers of pancakes that will remain in the\n  left and right stacks, respectively, when the restaurant closes.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 1000.\n1 ≤L≤ 1000.1 ≤R≤ 1000.\n1 ≤L≤ 1018.1 ≤R≤ 1018.\nIn Sample Case #1, the first customer gets 1 pancake from the right stack, leaving 1 pancake in\n  each stack. The second customer wants 2 pancakes, but neither stack has enough for them, even\n  though there are 2 pancakes in total.\nIn Sample Case #2, the first customer gets 1 pancake from the left stack, because both\n  stacks have the same amount. This leaves 1 pancake in the left stack and 2 in the right stack.\n  The second customer wants 2 pancakes, which you serve to them from the right stack, emptying it.\n  When the third customer arrives, neither stack has 3 pancakes, so no more orders are fulfilled.\nIn Sample Case #3, the first customer is served from the right stack, leaving 8 pancakes in the\n  left stack and 10 in the right stack. The second customer is also served from the right stack,\n  leaving 8 pancakes in each stack. The third customer is served from the left stack, leaving 5\n  pancakes there and 8 in the right stack. The fourth customer is then served from the right stack,\n  leaving 4 pancakes there. Serving the fifth customer empties the left stack, and then there are\n  not enough pancakes remaining in either stack to serve a sixth customer.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each test case consists of a single line containing two integersLandR: the\n  initial numbers of pancakes in the left and right stacks, respectively, as described above.",
        "output_description": "For each test case, output one line containingCase #x: n l r, wherexis the test case number (starting from 1),nis the number of customers who will be\n  served, andlandrare the numbers of pancakes that will remain in the\n  left and right stacks, respectively, when the restaurant closes.",
        "sample_input": "3\n1 2\n2 2\n8 11",
        "sample_output": "Case #1: 1 1 1\nCase #2: 2 1 0\nCase #3: 5 0 4",
        "source": "2020\\round_2\\incremental_house_of_pancakes"
    },
    {
        "problem_name": "Security Update",
        "problem_statement": "The Apricot Rules company just installed a critical security update on its network. The network\n  has onesource computer, and all other computers in the network are connected to the\n  source computer via a sequence of one or more direct bidirectional connections.\nThis kind of update propagates itself: once a computer receives the update for the first time,\n  that computer immediately begins to transmit the update to all of\n  the computers that are directly connected to it. Each of the direct connections has alatencyvalue: the number of seconds needed for that connection to transmit the update\n  (which is the same in either direction). Therefore, the update does not spread to all computers\n  instantly.\nThe Apricot Rules engineers do not know any of these latency values, but they know\n  that they are all positive integers. They would like your help in figuring out what these latency\n  values could be, based on how they saw the update spread in a recent experiment.\nThe Apricot Rules engineers installed the update only on the source computer and then waited\n  for it to propagate throughout the system until every computer was updated. They recorded some\n  information about how the update spread. Specifically, for every computer K other than the\n  source computer, you know exactly one of two things.\nNotice that multiple computers may have received the update at the exact same time.\nYou are required to compute a latency in seconds for each of the direct connections between two\n  computers. Each latency value must be a positive integer no greater than 106. The set\n  of latencies that you provide must be consistent with all of the known information. It is\n  guaranteed that there is at least one consistent way to assign latencies.\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each case begins with one line containing two integersCandD: the number of\n  computers and the number of direct connections, respectively. The computers are numbered from 1 toC, with computer 1 being the source computer.\nThe next line containsC-1 integersX2,X3, ...,XC. A positiveXivalue indicates that computer i received\n  the updateXiseconds after computer 1. A negativeXivalue\n  indicates that -Xiother computers received the update strictly before computer\n  i; this value includes the source computer.\nAfter that, there areDmore lines that represent theDdirect connections in the\n  network. The i-th of these lines contains two integersUiandVi, indicating that computersUiandViare directly connected to each other.\nFor each test case, output one line containingCase #x: y1y2...\n  yD, wherexis the test case number (starting from 1) andyiis a positive integer not more than 106representing the\n  latency, in seconds, assigned to the i-th direct connection.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤C≤ 100.C- 1 ≤D≤ 1000.1 ≤Ui<Vi≤C, for all i.(Ui,Vi) ≠ (Uj,Vj),\n  for all i ≠ j.All computers (except the source computer) are connected to the source computer through a sequence\n  of one or more direct connections.There exists at least one way of assigning latency values that is consistent with the input.\n-C<Xi< 0, for all i.\n    (You get the second type of information for all computers.)\n-C<Xi≤ 1000, for all i.Xi≠ 0, for all i.\nIn Sample Case #1, the following picture represents the computer network that is illustrated by\n  the sample output. The i-th computer is represented by the circle with the label i. A line\n  linking two circles represents a direct connection. The number on each line represents the\n  latency of the direct connection.\n\nIn Sample Case #2, the first three connections need to have the same latency, while the fourth\n  can have any valid latency. Note that -2, 0, 1000001, and 3.14 are examples of invalid latencies.\nIn Sample Case #3, remember that the connections are bidirectional, and so the update can travel\n  from computer 3 to computer 2. Any two valid latency values work here.\nThe following case could not appear in Test Set 1, but could appear in Test Set 2:\nOne of the correct outputs is10 12 4 15 8 3 9 7 5, as illustrated by the picture\n  below.\n\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\n  Each case begins with one line containing two integersCandD: the number of\n  computers and the number of direct connections, respectively. The computers are numbered from 1 toC, with computer 1 being the source computer.",
        "output_description": "For each test case, output one line containingCase #x: y1y2...\n  yD, wherexis the test case number (starting from 1) andyiis a positive integer not more than 106representing the\n  latency, in seconds, assigned to the i-th direct connection.",
        "sample_input": "3\n4 4\n-1 -3 -2\n1 2\n1 3\n2 4\n3 4\n4 4\n-1 -1 -1\n1 4\n1 2\n1 3\n2 3\n3 2\n-2 -1\n2 3\n1 3",
        "sample_output": "Case #1: 5 10 1 5\nCase #2: 2020 2020 2020 2020\nCase #3: 1000000 1000000",
        "source": "2020\\round_2\\security_update"
    },
    {
        "problem_name": "Wormhole in One",
        "problem_statement": "You are participating in an inter-galactic hyperspace golf competition, and\n  you have advanced to the final round! You are really determined to triumph,\n  and so you want to prepare a winning strategy.\nIn hyperspace golf, just as in conventional golf, you hit a ball with a\n  club, which sends the ball in a direction chosen by you. The playing field in\n  hyperspace golf is a 2-dimensional plane with points representing the\n  different holes. The ball is also represented by a point, and you get to\n  choose where the ball starts, as long as it is not in the same place as a\n  hole.\nSince this is hyperspace golf, the players are allowed to turn some pairs of\n  holes into wormholes by linking them together. Each hole can be either left\n  as a normal hole, or linked to at most one other hole (never to itself).\n  Wormholes are undirected links, and can be traversed in either direction.\nBecause the environment is frictionless, when you hit the ball, it moves in\n  a straight direction that it maintains forever unless it reaches a hole;\n  call that hole h. Upon touching hole h, the ball stops if h is not connected\n  to another hole. If h is connected to another hole h', then the ball\n  immediately comes out of h' and continues moving in the same direction as\n  before.\nYou know the location of each hole. You want to maximize the number of\n  distinct holes you can touch with a single hit. With that goal in mind, you\n  want to pick the ball's starting location, the direction in which to send\n  the ball, and which pairs of holes, if any, to link together as wormholes.\n  The ball cannot start in the same place as a wormhole.\n  When the ball goes through a wormhole, both the hole it goes into and the\n  hole it comes out of are counted towards your total. Each hole is only\n  counted once, even if the ball goes into it or comes out of it (or both)\n  multiple times. If the ball stops in a hole, that hole also counts toward\n  your total.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing a\n  single integerN: the total number of holes. The followingNlines contain two integers each:XiandYi, representing the X and Y coordinates, respectively, of\n  the i-th hole.\nFor each test case, output one line containing Case #x: y, where x is\n  the test case number (starting from 1) and y is the maximum number of distinct holes\n  you can touch if you make optimal decisions as described above.\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.-109≤Xi≤ 109, for all\n  i.-109≤Yi≤ 109, for all\n  i.(Xi,Yi) ≠ (Xj,Yj),\n    for all i ≠ j. (No two holes are at the same coordinates.)\n1 ≤N≤ 7.\n1 ≤N≤ 100.\nIn Sample Case #1, we can connect the two holes with a wormhole so that we\n  could touch both of them by sending the ball into either one. Notice that\n  without the wormhole, the ball would just stay in the first hole it touches,\n  so it would be impossible to touch more than one hole.\n\nIn Sample Case #2, we can connect the holes at (0, 0) and at (5, 5). We can\n  then hit the ball from position (4.9, 5), for example, in the positive horizontal direction\n  so that it first touches the hole at (5, 5). It goes into that hole and comes out of the\n  hole at (0, 0), retaining its positive horizontal direction of movement. Finally, it\n  touches the hole at (5, 0), and stops (since there is no wormhole linked to that hole).\n\nIn Sample Case #3, we can connect the pair of holes at positions (0, 0) and\n  (5, 0), and also the pair of holes at positions (3, 2) and (5, 5). Hitting\n  the ball from (4, -1) towards the hole at (5, 0) makes it touch the holes at\n  positions (5, 0), (0, 0), (5, 5) and (3, 2), in that order.\n\nIn Sample Case #4, we can connect the pairs of holes at positions (0, 0) and\n  (1, 1), the pair of holes at positions (2, 1) and (11, 2), and also the pair of holes\n  at positions (8, 2) and (14, 2). Hitting\n  the ball from (-1, 0) towards the hole at (0, 0) makes it touch the holes at the following\n  positions, in this order: (0, 0), (1, 1), (2, 1), (11, 2), (14, 2), (8, 2), (11, 2), (2, 1),\n  and (3, 1). Note that although the holes at positions\n  (11, 2) and (2, 1) are touched twice, they are only counted once each for the answer,\n  since the problem asks for a count of distinct holes.\n\nIn Sample Case #5, there is only one hole, and we can hit the ball into it\n  without needing to consider wormholes at all. (For what it's worth, we can\n  choose any starting location we want, even outside of the allowable range of\n  coordinates for holes.)\n\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case begins with one line containing a\n  single integerN: the total number of holes. The followingNlines contain two integers each:XiandYi, representing the X and Y coordinates, respectively, of\n  the i-th hole.",
        "output_description": "For each test case, output one line containing Case #x: y, where x is\n  the test case number (starting from 1) and y is the maximum number of distinct holes\n  you can touch if you make optimal decisions as described above.",
        "sample_input": "5\n2\n0 0\n5 5\n3\n0 0\n5 5\n5 0\n5\n0 0\n5 5\n5 0\n3 2\n2 4\n7\n0 0\n1 1\n2 1\n3 1\n8 2\n11 2\n14 2\n1\n-1000000000 1000000000",
        "sample_output": "Case #1: 2\nCase #2: 3\nCase #3: 4\nCase #4: 7\nCase #5: 1",
        "source": "2020\\round_2\\wormhole_in_one"
    },
    {
        "problem_name": "Naming Compromise",
        "problem_statement": "Cameron and Jamie are about to welcome a second baby into their lives. They are\n  already good at working together as parents, but right now they are\n  disagreeing about one crucial thing! Cameron wants to name the baby one name\n  (the stringC), whereas Jamie wants to name the baby something else\n  (the stringJ).\nYou want to help them find acompromise namethat is as close as possible\n  to what each of them wants. You think you can do this using the notion ofedit distance. The edit distance between two strings S1and\n  S2is the minimum number of operations required to transform\n  S1into S2, where the allowed operations are as follows:\nFor example, the edit distance betweenCAMERONandJAMIEis 5. One way to accomplish the transformation in 5 steps\n  is the following:CAMERONtoJAMERON(change) toJAMIERON(insert) toJAMIEON(delete) toJAMIEN(delete) toJAMIE(delete).\n  Any transformation fromCAMERONintoJAMIErequires at least this many operations.\nTo make the compromise name N as close as possible to the original desires\n  of the parents, you want N to be a non-empty string\n  such that the sum of the edit distances betweenCand N and\n  betweenJand N is as small as possible.\n  Out of all those choices for N, to make sure the compromise is fair,\n  you must choose an N such that the\n  difference between those two edit distances is also as small as possible.\n  Please find a compromise name for Cameron and Jamie.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of a single line with two\n  stringsCandJ: the names that Cameron and Jamie have\n  proposed for the baby, respectively. Each of these names is made up of\n  uppercase English alphabet letters.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a name that meets the requirements mentioned in the statement. Note thatymust contain only uppercase English letters.\nTime limit: 20 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.C≠J.\n1 ≤ length ofC≤ 6.1 ≤ length ofJ≤ 6.The i-th letter ofCis an uppercaseX,Y, orZ,\n    for all i.The i-th letter ofJis an uppercaseX,Y, orZ,\n    for all i.\n1 ≤ length ofC≤ 60.1 ≤ length ofJ≤ 60.The i-th letter ofCis an uppercase English alphabet letter, for all i.The i-th letter ofJis an uppercase English alphabet letter, for all i.\nThe above cases meet the limits for Test Set 1. Another sample case that does not meet those\n  limits appears at the end of this section.\nIn Sample Case #1, the edit distance fromXYZZYtoZZYis 2 (delete the first two letters), and the edit distance\n  fromZZYZXtoZZYis 2 (delete the last two\n  letters).XZZXandZYYZYwould also work.\n  No possible name has a sum of edit distances that is less than 4.\nZY, for example, has the same edit distance toCas toJ(3, in each case). However the sum of those distances would be 6, which is not\n  minimal, so it would not be an acceptable answer.\nXZZYis also unacceptable. Its edit distances toCandJ,\n  respectively, are 1 and 3. The sum of those edit distances is minimal, but the difference\n  between the two (|1-3| = 2) is not minimal, since we have shown that it is possible to\n  achieve a difference of 0.\nIn Sample Case #2,YandZare the only acceptable answers.\nIn Sample Case #3, notice that input length restrictions do not apply to the\n  output, so the shown answer is acceptable in either test set.\n  Another possible answer isYYXXY.\nIn Sample Case #4, the edit distance betweenXZXZXZandZYZXis 3, and the edit distance betweenYZandZYZXis 2.\n  The sum of those edit distances is 5, and their difference is 1; these values are\n  optimal for this case.\nThe following additional case could not appear in Test Set 1, but could appear in Test Set 2.\nCase #1: GCis one of the possible correct outputs.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each case consists of a single line with two\n  stringsCandJ: the names that Cameron and Jamie have\n  proposed for the baby, respectively. Each of these names is made up of\n  uppercase English alphabet letters.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis a name that meets the requirements mentioned in the statement. Note thatymust contain only uppercase English letters.",
        "sample_input": "4\nXYZZY ZZYZX\nY Z\nYYXXYZ ZYYXXY\nXZXZXZ YZ",
        "sample_output": "Case #1: ZZY\nCase #2: Z\nCase #3: ZYYXXYZ\nCase #4: ZYZX",
        "source": "2020\\round_3\\naming_compromise"
    },
    {
        "problem_name": "Pen Testing",
        "problem_statement": "You haveNballpoint pens. You know that each has a distinct integer number of units of\nink between 0 andN-1, but the pens are given to you in random order, and therefore you do\nnot know which pen is which.\nYou are about to go on a trip to the South Pole (where there are no pens), and your luggage only has\nroom for two pens, but you know you will need to do a lot of important postcard writing. Specifically,\nthe two pens you choose must have a total of at leastNink units.\nYour only way to get information about the pens is to choose one and try writing something with it.\nYou will either succeed, in which case the pen will now have one unit of ink less (and is now\npossibly empty), or fail, which means that the pen already had no ink left. You can repeat this\nmultiple times, with the same pen or different pens.\nEventually, you must select the two pens to take on your trip, and you succeed if the total amount\nof ink remaining in those two pens is at leastNunits.You will be givenTtest cases, and you must succeed in at leastCof them. Note that\nall test sets in this problem are Visible.Input and outputThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.Initially, your program should read a single line containing three integersT,N, andC: the number of test\n  cases, the number of pens, and the minimum number of test cases you must succeed in.\n  (Note that the value ofNis the same for all test sets,\n  and is provided as input only for convenience; see the Limits section for\n  more details.)Then, your program needs to process allTtest cases at the same time (this is done to\n  reduce the number of roundtrips between your solution and the judging program). The interaction\n  is organized into rounds.At the beginning of each round, your program must print one line containingTintegers:\n  thei-th integer is the number of the pen you want to try writing with in thei-th test case, or 0 if you do not want to write with any pen in this test case in this\n  round. The pens are numbered from 1 toN.Be aware that flushing the output buffer after each one of these integers, instead of\n  only once after printing allT, could cause a Time Limit Exceeded error because of the\n  time consumed by the flushing itself.The judge responds with one line containingTintegers: thei-th integer is the\n  amount of ink spent in thei-th test case in this round. It will be equal to 1\n  if the writing in thei-th test case was successful. Otherwise, it will be\n  equal to 0, which could mean that you tried to write in thei-th test case but\n  the pen you chose had no ink left, or that you did not try to write in thei-th\n  test case at all.You may participate in at mostN×(N+1)/2 rounds. Note that this is enough to\n  be confident that all pens are empty.When your program is ready to submit an answer for all test cases, it must print a line containing\n  the number 0Ttimes. This line is not counted towards the limit on the number of rounds,\n  and the judge will not send a response.Then, your program must print another line with 2×Tintegers: the\n  (2×i-1)-th and the (2×i)-th integers in this line are the distinct\n  numbers of the pens that you take to the South Pole in thei-th test case.\n  The judge will not send a response, and your program must then terminate with no error.If the judge receives unexpected output from\n  your program at any moment, the judge will print a single\n  number -1 and not print any further output. If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.You can assume that the pens are given to you in random order. These orders are chosen\n  uniformly at random and independently for each test case and for each submission.Therefore\n  even if you submit exactly the same code twice the judge will use different random orders.LimitsTime limit: 90 seconds per test set.Memory limit: 1GB.N= 15.Test Set 1 (Visible Verdict)T= 20000.C= 10900 (C=0.545×T).Test Set 2 (Visible Verdict)T= 20000.C= 12000 (C=0.6×T).Test Set 3 (Visible Verdict)T= 100000.C= 63600 (C=0.636×T).Testing ToolYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.Download testing toolSample InteractionThe following interaction does not correspond to any of the three test sets, as its values ofTandNare too small. It merely serves to demonstrate the protocol.Input to your programOutput of your program2 5 11 00 10 14 54 30 20 03 4 3 4Here is the same interaction, explained:// The following reads 2 into t, 5 into n and 1 into c.\n  t, n, c = readline_int_list()\n  // The judge secretly picks the number of units for each pen:\n  // in test case 1: 2 0 4 1 3\n  // in test case 2: 1 3 2 4 0\n  // We write with the 4-th pen in test case 1, and with the 5-th pen in test case 2.\n  printline 4 5 to stdout\n  flush stdout\n  // Reads 1 0, as the 4-th pen in test case 1 still had ink left,\n  // but the 5-th pen in test case 2 did not.\n  a1, a2 = readline_int_list()\n  // We write with the 4-th pen in test case 1 again, and with the 3-rd pen in test case 2.\n  printline 4 3 to stdout\n  flush stdout\n  // Reads 0 1.\n  a1, a2 = readline_int_list()\n  // We only write in test case 2 this time, with the 2-nd pen.\n  printline 0 2 to stdout\n  flush stdout\n  // Reads 0 1.\n  a1, a2 = readline_int_list()\n  // We decide we are ready to answer.\n  printline 0 0 to stdout\n  flush stdout\n  // We take the 3-rd and the 4-th pens to the South Pole in both test cases.\n  printline 3 4 3 4 to stdout\n  flush stdout\n  // In test case 1, the remaining amounts in the 3-rd and the 4-th pens are 4 and 0, and 4+0<5,\n  // so we did not succeed.\n  // In test case 2, the remaining amounts in the 3-rd and the 4-th pens are 1 and 4, and 1+4≥5,\n  // so we succeeded.\n  // We have succeeded in 1 out of 2 test cases, which is good enough since c=1.\n  exit\nYou will be givenTtest cases, and you must succeed in at leastCof them. Note that\nall test sets in this problem are Visible.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing three integersT,N, andC: the number of test\n  cases, the number of pens, and the minimum number of test cases you must succeed in.\n  (Note that the value ofNis the same for all test sets,\n  and is provided as input only for convenience; see the Limits section for\n  more details.)\nThen, your program needs to process allTtest cases at the same time (this is done to\n  reduce the number of roundtrips between your solution and the judging program). The interaction\n  is organized into rounds.\nAt the beginning of each round, your program must print one line containingTintegers:\n  thei-th integer is the number of the pen you want to try writing with in thei-th test case, or 0 if you do not want to write with any pen in this test case in this\n  round. The pens are numbered from 1 toN.\nBe aware that flushing the output buffer after each one of these integers, instead of\n  only once after printing allT, could cause a Time Limit Exceeded error because of the\n  time consumed by the flushing itself.\nThe judge responds with one line containingTintegers: thei-th integer is the\n  amount of ink spent in thei-th test case in this round. It will be equal to 1\n  if the writing in thei-th test case was successful. Otherwise, it will be\n  equal to 0, which could mean that you tried to write in thei-th test case but\n  the pen you chose had no ink left, or that you did not try to write in thei-th\n  test case at all.\nYou may participate in at mostN×(N+1)/2 rounds. Note that this is enough to\n  be confident that all pens are empty.\nWhen your program is ready to submit an answer for all test cases, it must print a line containing\n  the number 0Ttimes. This line is not counted towards the limit on the number of rounds,\n  and the judge will not send a response.\nThen, your program must print another line with 2×Tintegers: the\n  (2×i-1)-th and the (2×i)-th integers in this line are the distinct\n  numbers of the pens that you take to the South Pole in thei-th test case.\n  The judge will not send a response, and your program must then terminate with no error.\nIf the judge receives unexpected output from\n  your program at any moment, the judge will print a single\n  number -1 and not print any further output. If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nYou can assume that the pens are given to you in random order. These orders are chosen\n  uniformly at random and independently for each test case and for each submission.Therefore\n  even if you submit exactly the same code twice the judge will use different random orders.\nTime limit: 90 seconds per test set.Memory limit: 1GB.N= 15.\nT= 20000.C= 10900 (C=0.545×T).\nT= 20000.C= 12000 (C=0.6×T).\nT= 100000.C= 63600 (C=0.636×T).\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nThe following interaction does not correspond to any of the three test sets, as its values ofTandNare too small. It merely serves to demonstrate the protocol.\nHere is the same interaction, explained:\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2020\\round_3\\pen_testing"
    },
    {
        "problem_name": "Recalculating",
        "problem_statement": "You are working for the Driverless Direct Delivery Drone Directions Design Division of\nApricot Rules LLC. The company is about to take its first drone \"Principia\" to market.\nYou are tasked with designing backup systems for Principia, in case it\nloses access to its primary geolocation systems (like GPS), but it still needs a way to get\ndirections. Principia is designed for use on a flat region; formally, the region is a Cartesian\nplane in which the coordinates are in meters. One or more points on this plane aredrone repair centers. No two drone repair centers are at the same location.\nPrincipia has a system that can retrieve the relative locations of drone repair centers\nthat are within an L1distance (which is also known asManhattan distance)\nof at mostDmeters of its location. The information retrieved is a set of repair center\nlocations relative to Principia's current location. For example: \"there is a repair center 4 meters\nnorth and 3.5 meters west, and another one 2.5 meters east\". Notice that the information does\nnot identify repair centers; it gives their locations relative to Principia.\nYou quickly realized that there may be points on the\nmap where this information may not be enough for Principia to uniquely determine its current\nlocation. This is because there might be two (or more) different points from which the\ninformation looks the same. Points with this property are callednon-distinguishable, while\nall other points are calleddistinguishable.\nFormally, the information retrieved by Principia when located at point (x, y)\nis Info(x, y) := the set of all points (z - x, w - y), where (z, w) is the location\nof a repair center and |z - x| + |w - y| ≤D. Here\n|z - x| and |w - y| denote the absolute values of z - x and w - y, respectively.\nA point (x1, y1) is non-distinguishable if and only if\nthere exists another point (x2, y2) such that\nInfo(x1, y1) = Info(x2, y2).\nFor example, supposeD=4 and there are repair centers at points (0, 0) and (5, 0).\nThe point (0, 0) is non-distinguishable because Info(0, 0)={(0, 0)}=Info(5, 0).\nThis means that point (5, 0) is also non-distinguishable. On the other hand,\nInfo(3.5, 0.1)={(-3.5, -0.1), (1.5, -0.1)} is not equal to the information from any other point,\nwhich means that point (3.5, 0.1) is distinguishable. The following picture illustrates the\nregions of distinguishable points (in red) and non-distinguishable points (in blue):\n\nPrincipia is deployed to a point that is chosen uniformly at random from the set of all points\nthat are withinDmeters (using L1distance) of at least one repair center\n— that is, the set of all points (x, y) such that Info(x, y) is non-empty.\nThe probability of that choice belonging to a given continuous set of points S is\nproportional to the number of square meters of S's area.\nIn the example above, each red square has an area of 4.5 square meters, while each blue section\nhas an area of 23 square meters. Therefore, the probability of Principia being deployed within\neach red square is 4.5/(3×4.5 + 2×23) and the probability of it being deployed\nwithin each blue section is 23/(3×4.5 + 2×23). Since the border between adjacent\ndifferently-colored sections has area equal to 0, the probability of Principia being\ndeployed exactly on the border is exactly 0.\nGiven the locations of all repair centers, what is the probability that the point to which\nPrincipia is deployed is distinguishable?\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containing two integersNandDrepresenting\n(respectively) the number of repair centers and the maximum L1distance from which\nPrincipia can retrieve information from a repair center, as described above. Then,Nlines\nfollow. The i-th of these contains two integersXiandYirepresenting the coordinates of the i-th repair center. The unit of measurement for\nall coordinates andDis meters.\nFor each test case, output one line containingCase #x: y z, wherexis\nthe test case number (starting from 1) andyandzare non-negative\nintegers. The fractiony/zmust represent\nthe probability of Principia being at a distinguishable location,\nif one is chosen uniformly at random from all locations that are\nwithinDmeters of at least one repair center (using L1distance).\nIf there are multiple acceptable values foryandz, choose\nthe one such thatzis minimized.\nLimitsMemory limit: 1GB.1 ≤T≤ 100.1 ≤D≤ 107.-109≤Xi≤ 109, for all i.-109≤Yi≤ 109, for all i.(Xi, Yi) ≠ (Xj, Yj) for all i ≠ j.\n  (No two repair centers share the same location.)Test Set 1 (Visible Verdict)Time limit: 20 seconds.N= 2.Test Set 2 (Visible Verdict)Time limit: 60 seconds.2 ≤N≤ 10.Test Set 3 (Visible Verdict)Time limit: 120 seconds.For 6 cases,N= 1687.ForT-6 cases, 2 ≤N≤ 100.SampleSample Inputsave_altcontent_copyCopied!4\n2 4\n0 0\n5 0\n2 1\n0 0\n5 0\n2 4\n0 0\n4 4\n2 4\n0 0\n5 1Sample Outputsave_altcontent_copyCopied!Case #1: 27 119\nCase #2: 0 1\nCase #3: 0 1\nCase #4: 1 5The above cases meet the limits for Test Set 1. Another sample case that does not meet those\n  limits appears at the end of this section.Sample Case #1 is described and depicted in the statement.The points in the middle red region are all distinguishable points because they are the only\n  points that retrieve information from both repair centers, and each point in that region\n  retrieves a distinct set of information.The points in the left and right red region each receive information from only one repair center,\n  but that information is always unique, so these are all distinguishable points. For example, if\n  Principia knows it is 3 meters east of a repair center, it can be sure it is not 3 meters east of\n  the repair center at (0, 0), because then it would have retrieved information from both repair\n  centers. So it must be 3 meters east of the repair center at (5, 0).The points in the blue regions are all non-distinguishable points. Choose any point in one of\n  those regions, and consider the information that Principia would get from that point.\n  It contains only the one repair center in range. But, there is a corresponding point in\n  the other blue region from which Principia would get exactly the same information.As explained above, the probability of Principia being deployed to one of the red sections\n  is 4.5/59.5, so the total probability of it being deployed to any of them is 3×4.5/59.5 = 27/119.The following picture illustrates Sample Case #2. There is no way to retrieve information from\n  more than one repair center, so every point close enough to one of them is non-distinguishable;\n  the same information is retrieved from an equivalent point near the other one.\n  Remember thatz(the denominator) must be minimal, so0 1is\n  the only acceptable answer.The following picture illustrates Sample Case #3. Notice that the border between the two blue\n  squares consists of distinguishable points. However, since its area is 0, the probability\n  of Principia being deployed there is 0. All other points where Principia can be deployed\n  are non-distinguishable.The following picture illustrates Sample Case #4.The following picture illustrates the additional case.The following additional case could not appear in Test Set 1, but could appear in any of the\n  other test sets.1\n3 4\n0 0\n1 1\n2 3The correct output isCase #1: 101 109.\nMemory limit: 1GB.1 ≤T≤ 100.1 ≤D≤ 107.-109≤Xi≤ 109, for all i.-109≤Yi≤ 109, for all i.(Xi, Yi) ≠ (Xj, Yj) for all i ≠ j.\n  (No two repair centers share the same location.)\nTime limit: 20 seconds.N= 2.\nTime limit: 60 seconds.2 ≤N≤ 10.\nTime limit: 120 seconds.For 6 cases,N= 1687.ForT-6 cases, 2 ≤N≤ 100.\nThe above cases meet the limits for Test Set 1. Another sample case that does not meet those\n  limits appears at the end of this section.\nSample Case #1 is described and depicted in the statement.\nThe points in the middle red region are all distinguishable points because they are the only\n  points that retrieve information from both repair centers, and each point in that region\n  retrieves a distinct set of information.\nThe points in the left and right red region each receive information from only one repair center,\n  but that information is always unique, so these are all distinguishable points. For example, if\n  Principia knows it is 3 meters east of a repair center, it can be sure it is not 3 meters east of\n  the repair center at (0, 0), because then it would have retrieved information from both repair\n  centers. So it must be 3 meters east of the repair center at (5, 0).\nThe points in the blue regions are all non-distinguishable points. Choose any point in one of\n  those regions, and consider the information that Principia would get from that point.\n  It contains only the one repair center in range. But, there is a corresponding point in\n  the other blue region from which Principia would get exactly the same information.\nAs explained above, the probability of Principia being deployed to one of the red sections\n  is 4.5/59.5, so the total probability of it being deployed to any of them is 3×4.5/59.5 = 27/119.\nThe following picture illustrates Sample Case #2. There is no way to retrieve information from\n  more than one repair center, so every point close enough to one of them is non-distinguishable;\n  the same information is retrieved from an equivalent point near the other one.\n  Remember thatz(the denominator) must be minimal, so0 1is\n  the only acceptable answer.\n\nThe following picture illustrates Sample Case #3. Notice that the border between the two blue\n  squares consists of distinguishable points. However, since its area is 0, the probability\n  of Principia being deployed there is 0. All other points where Principia can be deployed\n  are non-distinguishable.\n\nThe following picture illustrates Sample Case #4.\n\nThe following picture illustrates the additional case.\n\nThe following additional case could not appear in Test Set 1, but could appear in any of the\n  other test sets.\nThe correct output isCase #1: 101 109.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case starts with a line containing two integersNandDrepresenting\n(respectively) the number of repair centers and the maximum L1distance from which\nPrincipia can retrieve information from a repair center, as described above. Then,Nlines\nfollow. The i-th of these contains two integersXiandYirepresenting the coordinates of the i-th repair center. The unit of measurement for\nall coordinates andDis meters.",
        "output_description": "For each test case, output one line containingCase #x: y z, wherexis\nthe test case number (starting from 1) andyandzare non-negative\nintegers. The fractiony/zmust represent\nthe probability of Principia being at a distinguishable location,\nif one is chosen uniformly at random from all locations that are\nwithinDmeters of at least one repair center (using L1distance).\nIf there are multiple acceptable values foryandz, choose\nthe one such thatzis minimized.",
        "sample_input": "4\n2 4\n0 0\n5 0\n2 1\n0 0\n5 0\n2 4\n0 0\n4 4\n2 4\n0 0\n5 1",
        "sample_output": "Case #1: 27 119\nCase #2: 0 1\nCase #3: 0 1\nCase #4: 1 5",
        "source": "2020\\round_3\\recalculating"
    },
    {
        "problem_name": "Thermometers",
        "problem_statement": "You are part of a team of researchers investigating the climate along the\n  coast of an island. The island's coast is modeled as a circle with a\n  circumference ofKkilometers. There is a lighthouse on the coast\n  which occupies a single point on the circle's circumference. Each point on\n  the coast is mapped to a real number in the range [0,K); formally,\n  point x is the point on the coast that is x kilometers away from the\n  lighthouse when walking clockwise along the coast. For example, ifK= 5, point 0 is the point where the lighthouse is, point 1.5 is the\n  point that is 1.5 kilometers away from the lighthouse in the clockwise direction,\n  and point 2.5 is the point that is located at the diametrical opposite of the\n  lighthouse.\nYou are in charge of studying coastal temperatures. Another team installed a\n  coastal temperature measuring system that works as follows: a number of\n  thermometers were deployed at specific points to measure the temperature at\n  those points. No two thermometers were placed at the same point. In that\n  team's model, points without thermometers are assumed to have the same\n  temperature as the one measured by the closest thermometer. For points that\n  are equidistant from two thermometers, the thermometer in the clockwise\n  direction is used (the first one you would encounter if walking clockwise\n  from the point).\nUnfortunately, you do not know how many thermometers the system used or\n  where they were placed, but you do have access to the system's temperature\n  data. It is given as two lists\n  ofNvalues eachX1,X2, ...,XNandT1,T2, ...,TN, representing that each point x whereXi≤ x <Xi+1is assigned\n  temperatureTi, for each 1 ≤ i <N, and each\n  point x where 0 ≤ x <X1orXN≤ x <Kis assigned temperatureTN. The points are enumerated in the clockwise direction,\n  soXi<Xi+1, for all i.\nYou want to determine the smallest number of thermometers\n  that, when placed in some set of locations, could have produced the observed\n  data.\nThe first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line of a\n  test case contains two integersKandN: the circumference\n  of the island and the size of the lists representing the temperature data.\n  The second line\n  containsNintegersX1,X2, ...,XN. The third line containsNintegersT1,T2, ...,TN. The\n  way in which the integers in the second and third line represent the\n  temperatures is explained above.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of thermometers that could have produced the observed\n  input data, as described above.\nTime limit: 30 seconds per test set.Memory limit: 1 GB.1 ≤T≤ 100.2 ≤N≤ min(100,K).0 ≤X1.Xi<Xi+1, for all i.XN<K.184 ≤Ti≤ 330, for all i.Ti≠Ti+1, for all i.T1≠TN.\n2 ≤K≤ 10.\n2 ≤K≤ 109.\nIn Sample Case #1, at least 2 thermometers are needed because there are two\n  different temperatures measured. It is possible to produce the data using\n  exactly 2 thermometers, with one thermometer (measuring 184) at point 0.5 and\n  another (measuring 330) at point 1.5. Note that point 0 and point 1 are\n  equidistant from both thermometers, so the thermometer in the clockwise\n  direction is used. The temperature measured at point 0 comes from the\n  thermometer at point 0.5 and the temperature measured at point 1 comes from\n  the thermometer at point 1.5.\n\nThe data from Sample Case #2 could not be produced with just 2 thermometers.\n  It could be produced with 3 thermometers if they were placed at point 0.2,\n  point 1.8, and point 2.8, measuring 184, 330 and 330, respectively. There are\n  other ways to place 3 thermometers that would also yield the input data.\n\nIn Sample Case #3, one way to produce the data with 3 thermometers is to\n  place them at point 0, point 2 and point 8, measuring 330, 184 and 200,\n  respectively.\n\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow; each consists of three lines. The first line of a\n  test case contains two integersKandN: the circumference\n  of the island and the size of the lists representing the temperature data.\n  The second line\n  containsNintegersX1,X2, ...,XN. The third line containsNintegersT1,T2, ...,TN. The\n  way in which the integers in the second and third line represent the\n  temperatures is explained above.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the minimum number of thermometers that could have produced the observed\n  input data, as described above.",
        "sample_input": "3\n2 2\n0 1\n184 330\n3 2\n0 1\n184 330\n10 3\n1 5 9\n184 200 330",
        "sample_output": "Case #1: 2\nCase #2: 3\nCase #3: 3",
        "source": "2020\\round_3\\thermometers"
    },
    {
        "problem_name": "Adjacent and Consecutive",
        "problem_statement": "Two players, A and B, are playing a game. The game usesNtiles\n  numbered 1 throughN, and a board consisting of a single horizontal row\n  ofNempty cells.\nPlayers alternate turns, with Player A going first. On a turn, a player picks an unused tile\n  and an empty cell and places the tile in the cell. At the end of the game, Player A wins if\n  there are two tiles with consecutive numbers in adjacent cells (regardless of who put them\n  there). Otherwise, Player B wins. For example, final boards of 1 2 3 4 and 4 1 3 2 are examples\n  of wins for Player A, and a final board of 3 1 4 2 is an example of a win for Player B.\n  (Notice that consecutive numbers may appear in either order.)\nYou just watched two players play a game, but you could not understand their strategy. They\n  may not have played rationally! You decide to compare their moves against an optimal strategy.\nAwinning stateis a state of the game from which the player whose turn it is can\n  guarantee a win if they play optimally, regardless of what the opponent does. Amistakeis a move made while in a winning state that results in the opponent having a winning state on\n  their next turn. (Notice that it is not possible to make a mistake on the last turn of the game,\n  since if the last turn begins with a winning state for that player, it must be because that\n  player's only move results in a win.)\nGiven theNmoves, count the number of mistakes made by each player.\nThe first line of the input gives the number of test cases,T.Ttest cases\n  follow. Each case begins with one line containing an integerN: the number of tiles in\n  the game (which is also the number of turns, and the number of cells on the board).\nThen,Nmore lines follow. The i-th of these (counting starting from 1) has two integersMiandCi. Respectively, these represent the tile chosen on\n  the i-th turn, and the index of the cell (counting from 1 at the left end toNat the\n  right end) where that tile is placed.\nNote that it is Player A's turn whenever i is odd, and Player B's turn whenever i is even.\nFor each test case, output one line containingCase #x: a b, wherexis the test case number (starting from 1),ais the total number of mistakes made by\n  Player A, andbis the total number of mistakes made by Player B.\nTime limit: 40 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.1 ≤Mi≤N, for all i.Mi≠Mj, for all i ≠ j.1 ≤Ci≤N, for all i.Ci≠Cj, for all i ≠ j.\n4 ≤N≤ 10.\n4 ≤N≤ 50.\nNotice that any game always begins in a winning state for Player A. For example, Player A can\n  play tile 2 in cell 2 (i.e. the second cell from the left). No matter what Player B does on their\n  turn, at least one of tiles 1 and 3 will be unused, and at least one of cells 1 and 3 will be\n  empty. Then Player A can play one of those tiles in one of those cells, and this secures a win\n  for Player A regardless of what happens in the rest of the game.\nIn Sample Case #1, the game plays out as follows:\nIn total, Player A made 2 mistakes and Player B made 1 mistake.\nIn Sample Case #2, although some of the moves may look risky, neither player made a mistake as\n  defined in this problem. Player A never gave up a winning state to Player B, and Player B had no\n  opportunity to make a mistake because they were never in a winning state.\nIn Sample Case #3, notice that even though the outcome of the game is determined after the\n  second move (since that move creates a pair of adjacent and consecutive tiles), all tiles must\n  be placed in each game. Moreover, although the second move assures Player A's victory, it is not\n  a mistake for Player B because Player B was not in a winning state at the time.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases\n  follow. Each case begins with one line containing an integerN: the number of tiles in\n  the game (which is also the number of turns, and the number of cells on the board).",
        "output_description": "For each test case, output one line containingCase #x: a b, wherexis the test case number (starting from 1),ais the total number of mistakes made by\n  Player A, andbis the total number of mistakes made by Player B.",
        "sample_input": "3\n6\n2 2\n3 5\n4 3\n6 6\n1 4\n5 1\n4\n4 1\n1 3\n3 4\n2 2\n4\n3 1\n2 2\n4 3\n1 4",
        "sample_output": "Case #1: 2 1\nCase #2: 0 0\nCase #3: 0 0",
        "source": "2020\\virtual_world_finals\\adjacent_and_consecutive"
    },
    {
        "problem_name": "Hexacoin Jam",
        "problem_statement": "The Code Jam team's first cryptocurrency, jamcoins, never caught on. This year,\n  we are trying again withhexacoins, which are named for their\n  use of base 16. To \"mine\" aD-digit hexacoin, one has to work with\n  integers using exactlyDbase 16 digits, including leading zeroes\n  if needed. Each value represents an integer between 0 and 16D- 1,\n  inclusive. Base 16 digits are represented by the numbers 0 through 9 and\n  the uppercase letters A through F, as usual. For example, F2B, 0C8 and 000 are valid values whenD=3,\n  corresponding to the base 10 values 3883, 200 and 0. On the other\n  hand, 1234, DF, C0DE and JAM are not valid values whenD=3.\nWhen performing addition ofD-digit base 16 values, any overflow\n  digits are dropped. That is, the addition is performed modulo\n  16D. For example, F2B + 0C8 = FF3 (4083 in base 10) and F2B + F2B = E56 (3670 in base 10,\n  because the sum's result is 7766, and taking modulo 163yields 3670).\nTo \"mine\" aD-digit hexacoin, a computer must perform the following\n  steps:\nIf the sum calculated in the last step is betweenSandE, inclusive,\nthen a hexacoin has been found! For example, suppose that:\nThen, when P is applied toL, the resulting L' is\n  [A89, 444, DD3, 444, 001]. Notice that P is not applied toSandE.\nThere are (5 × 4) / 2 = 10 pairs of values to choose, and each pair\n  has a probability of 1/10 of being chosen. The only sums that fall within the\n  range are A89 + DD3 = 85C, 444 + 444 = 888, A89 + 001 = A8A, DD3 + 001 = DD4,\n  and A89 + 444 = ECD (twice).\nThe first two steps are already computed and you know the listLand\n  the range [S,E] that were chosen. What is the probability that\n  a hexacoin is found after the rest of the process is performed?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of three lines.\n  The first line contains two integersNandD: the size\n  of the given list and the number of digits to work with,\n  respectively. The second line contains twoD-digit base 16 numbersSandE: the inclusive lower and upper bounds of the target range,\n  respectively. Then there is one more line containingND-digit\n  base 16 numbersL1,L2, ...,LN, representing the values in the list.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1) andyandzare non-negative integers, such that the\n  fractiony/zrepresents the probability of\n  finding a hexacoin, under the conditions described above. All ofx,y, andzmust be in base 10. If there\n  are multiple acceptable values foryandz, choose\n  the ones such thatzis minimized.\nTime limit: 90 seconds per test set.Memory limit: 1GB.2 ≤N≤ 450.Scontains exactlyDcharacters.Each character ofSis a base 16 digit.Econtains exactlyDcharacters.Each character ofEis a base 16 digit.S≤E.Licontains exactlyDcharacters, for all i.Each character ofLiis a base 16 digit, for all i.\n1 ≤T≤ 100.2 ≤D≤ 3.\n1 ≤T≤ 100.2 ≤D≤ 4.\n1 ≤T≤ 10.2 ≤D≤ 5.\nIn Sample Case #1, the target range is just a single value 10. Since the result\n  ends with 0, the sum of the values assigned to both last digits 0 and F\n  must end in 0 as well. Since P[0] and P[F] are different values, their sum cannot\n  be exactly 0. Therefore, P[0] + P[F] must be 10 (in base 16). There are 7 pairs\n  of different digits that accomplish that. P[0] and P[F] cannot both be 8.\n  All 7 pairs lead to an overall sum of 10 (after dropping an overflow 1).\n  Therefore, there are 14 assignments of different digits to 0 and F that lead to a\n  hexacoin. There are 16 × 15 possible assignments to those digits, so the result is\n  14/240 = 7/120.\nIn Sample Case #2, we need to add the probability of the result being exactly 11\n  to the result of Sample Case #1.\n  The only way that happens is if 0 and F are assigned to\n  0 and 1, in either order. That has a probability of 2/240=1/120, leading to a total\n  of 7/120 + 1/120 = 8/120 = 1/15.\nIn Sample Case #3, notice that regardless of which permutation and pair of numbers\n  the computer chooses from the list, we will add two numbers that end in the same digit.\n  That produces an even result, even after taking it modulo 163. Since the only\n  value in range is odd, we have no hope of mining a hexacoin in this case. Notice that0 2is an invalid representation of the answer becausezwould not be minimum.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. Each test case consists of three lines.\n  The first line contains two integersNandD: the size\n  of the given list and the number of digits to work with,\n  respectively. The second line contains twoD-digit base 16 numbersSandE: the inclusive lower and upper bounds of the target range,\n  respectively. Then there is one more line containingND-digit\n  base 16 numbersL1,L2, ...,LN, representing the values in the list.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1) andyandzare non-negative integers, such that the\n  fractiony/zrepresents the probability of\n  finding a hexacoin, under the conditions described above. All ofx,y, andzmust be in base 10. If there\n  are multiple acceptable values foryandz, choose\n  the ones such thatzis minimized.",
        "sample_input": "4\n2 2\n10 10\n00 FF\n2 2\n10 11\n00 FF\n4 3\nFFF FFF\n230 A10 010 F70\n4 3\nAFF FFF\n230 A10 010 F70",
        "sample_output": "Case #1: 7 120\nCase #2: 1 15\nCase #3: 0 1\nCase #4: 2731 8736",
        "source": "2020\\virtual_world_finals\\hexacoin_jam"
    },
    {
        "problem_name": "Musical Cords",
        "problem_statement": "Lauren is trying to play the most beautiful notes possible using a harp. The\n  harp is a circle with a radius ofRcentimeters.\n  To play a note, a cord must be attached to the harp\n  in a way that connects two differentattachment pointson the\n  perimeter of the circle. Lauren then plucks this cord to play a note.\nThere areNattachment points on the perimeter of the circular harp at\n  which a cord can be attached. The i-th such attachment point\n  is at a location that isDinanodegrees (a nanodegree is 10-9degrees) clockwise around the perimeter of the circular harp, starting from the rightmost\n  point on the perimeter.\nNot all attachment points use the same technology to properly fix the cords onto them.\n  The i-th attachment point requires Licentimeters of cord to be used for attaching.\n  A cord fixed between two different attachment points i and j needs to be exactly\n  Li+ Lj+ distance(i, j) centimeters long. By\n  distance(i, j) we mean the length of the geometricchordconnecting the i-th and j-th attachment points, that is, the Euclidean distance between\n  the two points.\nLauren thinks that notes sound better when they come from longer cords. What are theKlongest cords that can be used with Lauren's harp?\nThe first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains three integers:N,RandK: the number of attachment points,\n  the radius of the circular harp in centimeters, and\n  the number of lengths of cords that Lauren is interested in knowing.\nThe nextNlines describe the attachment points. The i-th of these lines contains\n  two integers,DiandLi, which describe the position (in number of\n  nanodegrees clockwise from the rightmost point of the harp) and length of cord in\n  centimeters needed at the i-th attachment point.\nFor each test case, output one line containingCase #x: y1y2... yK, wherexis the test case number (starting from 1), andynis the\n  n-th value in the list of lengths of allN×(N-1)/2 cords\n  that can be used in Lauren's harp, sorted in non-increasing order.\nEachynwill be considered correct if it is within an absolute or\nrelative error of 10-9of the correct answer. See theFAQfor an\nexplanation of what that means, and what formats of real numbers we accept.\nTime limit: 120 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.N= 150000 in at most 10 cases.5 ≤N≤ 104in all cases withN≠ 150000.1 ≤R≤ 109.0 ≤D1.Di<Di+1, for all i.DN< 360 × 109.\nLiis chosen independently and uniformly at random between 1 and\n  109, inclusive, for each i.K= 1.\n1 ≤Li≤ 109, for all i.(There is no guarantee as to how each Liis generated.)K= 10.\nThe above cases meet the limits for Test Set 1. Another sample case that does not meet those\n  limits appears at the end of this section.\nNote: theLivalues in these sample cases for Test Set 1 were chosen\n  for ease of understanding and were not randomly generated. Your solution will be run against\n  these sample cases and must pass them.\nIn Sample Case #1, all of the attachment points have the same value, so we should\n  pick the pair connected by the longest chord, which in this case is a horizontal\n  diameter of the circle that has a length of 4 centimeters. So the total length needed is\n  4 + 3 + 3 = 10 centimeters.\nIn Sample Case #2, the fourth and fifth points are extremely close to the third\n  point, but have much smallerLvalues. We can effectively rule them\n  out and focus on the possible connections among the first three points,\n  as follows:first and second points: length 10√2 + 8 + 7: ≈29.142136.first and third points: length ≈19.923894 + 8 + 9: ≈36.923894.second and third points: length ≈12.855726 + 7 + 9: ≈28.855726.Using the first and third points gives us the greatest total length.The following additional case could not appear in Test Set 1, but could appear in Test\n  Set 2.1\n6 1 10\n0 10\n15000000000 1\n30000000000 1\n45000000000 1\n60000000000 1\n75000000000 1The correct output isCase #1: 12.2175228580 12.0000000000 11.7653668647 11.5176380902 11.2610523844 3.0000000000 2.7653668647 2.7653668647 2.5176380902 2.5176380902Notice that there are three possible pairs of points tied for producing the 9th longest cord. Also, it is\n  fine if lines connecting different pairs of points intersect, since Lauren will only be playing one note\n  at a time.\nUsing the first and third points gives us the greatest total length.\nThe following additional case could not appear in Test Set 1, but could appear in Test\n  Set 2.\nThe correct output isCase #1: 12.2175228580 12.0000000000 11.7653668647 11.5176380902 11.2610523844 3.0000000000 2.7653668647 2.7653668647 2.5176380902 2.5176380902\nNotice that there are three possible pairs of points tied for producing the 9th longest cord. Also, it is\n  fine if lines connecting different pairs of points intersect, since Lauren will only be playing one note\n  at a time.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains three integers:N,RandK: the number of attachment points,\n  the radius of the circular harp in centimeters, and\n  the number of lengths of cords that Lauren is interested in knowing.",
        "output_description": "For each test case, output one line containingCase #x: y1y2... yK, wherexis the test case number (starting from 1), andynis the\n  n-th value in the list of lengths of allN×(N-1)/2 cords\n  that can be used in Lauren's harp, sorted in non-increasing order.",
        "sample_input": "2\n5 2 1\n0 3\n1234567890 3\n3154510113 3\n180000000000 3\n359999999999 3\n5 10 1\n90000000000 8\n180000000000 7\n260000000000 9\n260000000001 1\n260000000002 1",
        "sample_output": "Case #1: 10.0000000000\nCase #2: 36.9238939618",
        "source": "2020\\virtual_world_finals\\musical_cords"
    },
    {
        "problem_name": "Pack the Slopes",
        "problem_statement": "You are trying to organize a group of skiers. The skiers are taking a trip to a\n  large mountain, which has been rented for the day.\nThere areNrest points numbered from 1 toNon the mountain,\n  and they are connected byN-1 slopes. Each slope starts at some rest\n  point and goes directly to another rest point, with no intermediate slopes\n  or rest points. A slope can be traversed in only one direction.\nEach skier starts at the summit rest point and traverses a slope to reach\n  another rest point. From there, the skier can traverse another slope to reach\n  another rest point, and so on. Once a skier reaches their destination rest point,\n  they stop skiing for the day and head to the ski lodge for hot cocoa.\n  The destination rest point cannot be the summit rest point.\n  However, notice that a skier's destination rest point can be the start of zero or more\n  slopes; that is, a skier does not necessarily have to keep using available\n  slopes until there are none available:\n  they can always walk carefully down the rest of the mountain!\n  For all rest points, there is exactly one sequence of slopes that a skier can\n  use to reach it from the summit rest point.\nEach slope can accommodate only a certain total number of skiers in a day, after\n  which the snow gets too choppy to ski. In addition, the ski resort can\n  charge or reward each skier for each slope that they ski on.\n  Each slope may have a different price, and each skier must pay the price\n  for each slope they ski on. A slope's price can be positive, zero, or even\n  negative; a negative price represents a bounty awarded for testing that\n  slope. As the organizer, you pay all the slope prices and collect all\n  the bounties on behalf of your group of skiers.\n  Notice that if multiple skiers use the same slope, you pay that slope's\n  price or collect the slope's bounty multiple times.\n  The sum of all costs you pay minus the sum of all bounties you collect\n  is the total expense for the trip. The expense can be positive, zero,\n  or negative. A negative expense means that you actually made money on the trip!\nAs the organizer, you want to figure out the maximum number of skiers that\n  you can put on the mountain. Also, you would like to figure out the minimum\n  possible expense for a trip with that maximum number of skiers.\nThe first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains a single\n  integerN: the number of rest points on the mountain.\nEach of the finalN-1 lines of a test case describes a slope via four integersUi,Vi,Si, andCi. These are the slope's starting rest point, the slope's\n  ending rest point, the maximum number of skiers the slope can accommodate,\n  and the slope's price per skier, respectively.\nThe summit rest point where the skiers start from is always numbered 1.\nFor each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis the maximum number of skiers, andzis the\n  minimum expense for havingyskiers\n  ski at least one slope each.\nTime limit: 30 seconds per test set.Memory limit: 1GB.1 ≤Ui≤N, for all i.2 ≤Vi≤N, for all i. (No\n    slope can end at the summit rest point.)Ui≠Vi, for all i.1 ≤Si≤ 105, for all i.-105≤Ci≤ 105, for all i.There is exactly one sequence of slopes that a skier can\n  use to reach rest point r from the summit rest point, for all r.\n1 ≤T≤ 100.2 ≤N≤ 1000.\nT= 17.2 ≤N≤ 105.\nIn Sample Case #1, we can send one skier to rest point 4, one skier to rest\n  point 3, and two skiers to rest point 2.\nIn Sample Case #2, we can send three skiers to rest point 2, two skiers to\n  rest point 5, and two skiers to rest point 4.\nNotice that the first slope listed in a test case does not need to start at\n  the summit rest point, and that slopes can haveUi>Vi.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow. The first line of a test case contains a single\n  integerN: the number of rest points on the mountain.",
        "output_description": "For each test case, output one line containingCase #x: y z,\n  wherexis the test case number (starting from 1),yis the maximum number of skiers, andzis the\n  minimum expense for havingyskiers\n  ski at least one slope each.",
        "sample_input": "2\n4\n1 2 2 5\n1 3 2 5\n3 4 1 -2\n7\n4 7 2 2\n1 3 5 5\n1 4 2 -1\n3 2 3 -2\n3 5 2 -1\n3 6 2 2",
        "sample_output": "Case #1: 4 18\nCase #2: 7 15",
        "source": "2020\\virtual_world_finals\\pack_the_slopes"
    },
    {
        "problem_name": "Replace All",
        "problem_statement": "Banana Rocks Inc is coming up with a revolutionary technology to perform the common edit operation\n\"replace all\". Their implementation replaces every occurrence of a character\nwithin a given text with another character. (If the character does not appear in the text, then\nthe operation occurs but has no effect.)\nFor example, if the starting text isCODEJAMWORLDFINALSand an operation is performed to replaceAwithO, the new text would beCODEJOMWORLDFINOLS. If another operation\nis performed on that result to replaceOwithY, the final text\nwould beCYDEJYMWYRLDFINYLS.\nUnfortunately, the implementation is incomplete, so it can only perform replacements from\na specific list ofNpairs of characters. Also, even if a replacement of a specific\ncharacter c1with another character c2is implemented, the reverse\nreplacement of c2with c1may or may not be implemented.\nYou want to try all the implemented replacements. You are given some initial stringSto use as the initial text. You can perform any number of replacements in sequential order:\nthe first replacement is performed onS, and the (i+1)-th replacement is performed\non the result of performing the i-th replacement. The only requirement is that each\nimplemented replacement is performed at least once during this process. There is no upper limit\non how many times you may perform each replacement.\nThe allowed characters are decimal digits and uppercase and lowercase English alphabet\nletters. In this problem, uppercase and lowercase versions of the same letter are treated\nas distinct characters.\nWhat is the maximum number of unique characters that can appear in a text that is\nthe result of the last replacement performed?\nThe first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case consists of two lines. The first line contains a stringSand an integerN: the initial text and the number of implemented replacements.\nThe second line containsNtwo-character stringsR1,R2, ...,RN, representing\nthe implemented replacements.AiandBiare the first and second characters ofRi, respectively.\nThe i-th implemented replacement corresponds to replacing all occurrences ofAiwithBi.\nFor each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum number of\nunique characters that can appear in a text that is the result of performing all implemented\nreplacements toSone or more times each, in some order.\nTime limit: 60 seconds per test set.Memory limit: 1GB.1 ≤T≤ 100.2 ≤ length ofS≤ 1000, for all i.Each character ofSis an uppercase or lowercase English alphabet letter or\n  a decimal digit.Aiis an uppercase or lowercase English alphabet letter or\n  a decimal digit, for all i.Biis an uppercase or lowercase English alphabet letter or\n  a decimal digit, for all i.Ai≠Bi, for all i.(Ai,Bi) ≠ (Aj,Bj), for all i ≠ j. (Each replacement is unique.)\n2 ≤N≤ 62.Bi≠Bj, for all i ≠ j.\n2 ≤N≤ 62 × 61.\nThe above cases meet the limits for Test Set 1. Another sample case that does not meet those\n  limits appears at the end of this section.\nSample Case #1 is the one in the statement. Notice that if we perform the replacements in the\n  order mentioned in the statement, we get 13 different characters in the final text. If we perform\n  them both once in the other order, however, we can getCYDEJOMWYRLDFINOLS, which\n  has 14 different characters.\nIn Sample Case #2, one way to get 2 different characters in the final text is to perform\n  the replacements in the order given from left to right, once each.\nIn Sample Case #3, none of the replacements affect the text at all, so it does not matter\n  how we apply them. We will always be left with the original two letters.\n  Notice that replacements can contain characters not appearing in the initial text, and\n  the initial text can contain characters not appearing in the implemented replacements.\nIn Sample Case #4, remember that uppercaseBis not the same character as\n  lowercaseb.\nThe following additional case could not appear in Test Set 1, but could appear in Test Set 2.\nThe correct output isCase #1: 4.\nIn this additional sample case, one possibility is to perform the replacements in the\n  following order:X3 2X X2 2X 12 31. This process goes through the\n  following strings, starting withS:1234 1234 1X34 1234 1X34 2X34 2X14.\n",
        "input_description": "The first line of the input gives the number of test cases,T.Ttest cases follow.\nEach test case consists of two lines. The first line contains a stringSand an integerN: the initial text and the number of implemented replacements.\nThe second line containsNtwo-character stringsR1,R2, ...,RN, representing\nthe implemented replacements.AiandBiare the first and second characters ofRi, respectively.\nThe i-th implemented replacement corresponds to replacing all occurrences ofAiwithBi.",
        "output_description": "For each test case, output one line containingCase #x: y, wherexis the test case number (starting from 1) andyis the maximum number of\nunique characters that can appear in a text that is the result of performing all implemented\nreplacements toSone or more times each, in some order.",
        "sample_input": "4\nCODEJAMWORLDFINALS 2\nAO OY\nxyz 3\nxy zx yz\nCJ 4\n20 2O HC KS\nAB 2\nAb bA",
        "sample_output": "Case #1: 14\nCase #2: 2\nCase #3: 2\nCase #4: 2",
        "source": "2020\\virtual_world_finals\\replace_all"
    },
    {
        "problem_name": "Cheating Detection",
        "problem_statement": "100 players are competing in a 10000-question trivia tournament; the players are numbered from\n  1 to 100. Player i has a skill level of S_i and question j has a\n  difficulty level of Q_j. Each skill level and each question difficulty are chosen\n  uniformly at random from the range [-3.00, 3.00], and independently of all other choices.\n  For example, a player can have a skill level of 2.47853\n  and a question can have a difficulty level of -1.4172.\nWhen player i tries to answer question j, the probability that they answer it\n  correctly is f(S_i - Q_j), where f is thesigmoid function:\n  $f(x) = \\frac{1}{1 + e^{-x}}$\n  where e isEuler's\n  number(approximately 2.718...), the mathematical constant.\n  Notice that 0 < f(x) < 1 for all x, so f(S_i - Q_j) is always a\n  valid probability. Each of these answer attempts is chosen at random\n  independently of all other choices.\nThere is one exception: exactly one of the players is a cheater! The cheater is chosen\n  uniformly at random from among all players, and independently of all other choices.\n  The cheater behaves as follows: before answering each question, they flip a fair coin.\n  If it comes up heads, they do not cheat and\n  the rules work as normal. If it comes up tails, they secretly look up the answer on the Internet\n  and answer the question correctly. Formally, they decide whether to cheat at random with\n  0.5 probability for each question, independently of all other choices.\nThe results of a tournament consist of only the per-question results (correct or incorrect) for\n  each player. Apart from the general description above, you do not know anything about the skill\n  levels of the players or the difficulties of the questions.\nYou must correctly identify the cheater in at least P} percent of the test cases. That is,\n  you must succeed in at least P} * T} / 100 out of T} cases.\nThe first line of the input gives the number of test cases, T}. The second line of the input\n  gives the percentage of test cases, P}, that you must answer correctly for your solution to be\n  considered correct. T} test cases follow.\n  Each case consists of 100 lines of 10000 characters each. The j-th character on the i-th line is1if the i-th player answered the j-th question correctly, or0if they\n  answered it incorrectly.\nFor each test case, output one line containingCase #x: y, where x is\n  the test case number (starting from 1) and y is the number of the cheater (with\n  player numbers starting from 1).\nTime limit: 60 seconds.Memory limit: 1 GB.T} = 50.\nP} = 10.\nP} = 86.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. The second line of the input\n  gives the percentage of test cases, P}, that you must answer correctly for your solution to be\n  considered correct. T} test cases follow.\n  Each case consists of 100 lines of 10000 characters each. The j-th character on the i-th line is1if the i-th player answered the j-th question correctly, or0if they\n  answered it incorrectly.",
        "output_description": "For each test case, output one line containingCase #x: y, where x is\n  the test case number (starting from 1) and y is the number of the cheater (with\n  player numbers starting from 1).",
        "sample_input": "1\n0\\\n\n1111101111111111000111111111111111111101100111111011101111111101111111111010111110010111111110111110110110111111110111111101001111011111111111111111111111111110111111111011111111101011110111111110111011010111011101100111111111111111111111011111011101110110010111111111011111111011111111110011111111011111011011100110101110011110011011111111111101111011111111110100111111011111111111101101101111000001111111111011011111111101110111111111111111111111111011111111111110111011111100111110011011111110111011111110101010111110111111111111001111110111111001101111111111101011111111011111111111101101011111111110110100111111111111111110111111111000111010111111110111011110110011011111111111111111111110111100110111011111011111101111011101111110111111101111010111110111111111011011011111111111010111111110110111111111111111111111111011111111011111110110101111111111111110111111010011111111111111111111111110111111110110111111111011111110111111111111111000111111110101111111111110111110111111101011110111111111110111111001101111100111111101101111111011111111111110101111111111111101110011111001111111111111111111011111101111011111111101111111110111011111111111111101111111111011100011111010011111101001100111110111111011011101011101101110111111111100011101111111011010100111111110100011111111110111111111111100000110111101111111101111111110011111111110111111111111111111111111111110111011101111111111111111011111110111111111010111111111111110101110111101111111111100111111111111111101100011111111110011111111011101001111001111111110110111111101010101101111011001111101111111111110100111011011011101011111111111011111111111111101101111011010111111111010010101111111111011011111110111011111110111111111111111110101011001111111111111111111111111111111011100101111101011100101100011111111010111101110111111111011101111110111111110111111101110111101111011011111100111111111100110111111111011111110111011111101111111111011110110011111101110111101111101111110111110011101111101111111111110010111111110101101001010101110011111111111011110111111011001011111100111111111111111111111110111111001110111101110011111111011111111111111111001110101111111111111000111111111101101111100110111101111111011011101111111111110111100110111110111111111001101101111111111111100111101111111111011111101111101111101101111111101111100011111101111111111111111111111011101011110111011111110111101111011111111011011111101101110110001101100111111101111101011111111111111011111111101111111011011111101110111110011110110110101111111111111111110101101111010111010111111110111111101011111111101111111101111101110100011111110111101111111101111011111101110011101110111110011110111111111111011111111101111111101011011101111001110111101111111110111110111111011011111111111111111111110111111110111111111111111111111111111101111111110111011111111111111100111100111111111111111111111111111110101111101110111111111110111111110100111111110001111011011011111111101111111101111110101111101011011110011111111100011101111111111111011011111101111101111110111111011101111111111011101011111001111110110010101101111111111111101111111111111111011111110111111111111111111111110000111111111110110100100111011110111101111111110110101011111111111101011111111111111111110101111011010111111111111111011010101011111011110101101111111111111111101011111011011111111110101111111101111111111010111101101110111111110111110111111111010111111011111110101111111010101111110011111111101111111101101111011011111111111101110110011011110001001011101111111111111111111011111111111101110111111011000111101110101110111111111111111111110111111111011111101111001111111101110110111101111111001101111111111111110011111011111111111101111111111110010111100111111111111101111100111011110011011011011111110111111010111101111011111100011111011001111111111111111111110111111111111011111111111110111110111110111111110111111111111111111011111111001001110101111111111011111111111111111111001111011111101110111011110111111110101001111111111011101011100011111011110101111111111111100111011101101111010011111111101011101111111101011011011011011111010011011101111111110101110101111100111011011111111011111111101111101111111111011011111110011110111011111111111111111101101111111111101111111111110111111111101111111111111101110011011111001001111111100101111110111111110111111101100101011110111111111111111101101111110011111100111101111111101111111000010111111011111111111111111100111111011111111111111111111111110111111011110100111111111111111101100111111111101111111111100011111111101011110110111111101111110111011100110111111100111111111111101111111011110101010111111110111111101011011111110110111111111111110101111111011111110111011111111111111110111010111111110101111011110111111011100011110101111111011011011111111100110111110111111110101111111111111111111011111111111111101111111001101111110111111111110110111111111111111111011110001111111111010101111111111111011111111111111111100010111111111111111010111111001011111111111001111101111111101111111011111111111001111011111111101111111101101111111101101001111110111110111111111111111111011111111110111111011111011101111100111111110110011011111111110001111110111111101011110011111110011110111111111011111111111101011101111110110011111110111111110101101011011111001110111101000001111111101100111111111101000110111111001110111010110111011111111111011111101111011011101101111111111111111111111111110111001111111111111111110101111111100010111101111101111010111001111111001001110110111010111110110111110110111111111011111110101111111011111111111101011101110011011111111111101111111100001111111110101111111111111111111111010110011011011011111111011111111101110111111111111110011111111111111101101111111111011010111111101111110110111101011111111111111111111111111101111111101101111111111101011110110011111111111110110110111111110101111101111111011111101111111111111110010111111111111101001111111111101111110111110111110011111011111111100011101111111110111111111011011011111101111010001101011111111111111111011111011111011101110111111111111001111100111111011101101110111111111011111111101111100110101110111111111111110001110111011000110111111111011111111011111111111111101011111111110111110111111111101011110111010011011110011111111011111111011110111111111100100111111101101011011101111101101100010111111111101011101111110101101010001111010101010101111011110101100111100111010110111101110001111101111111111110110111101111111111011111001111110111111111111111111111111111101111000101111110011101111111111011011011011011011101111100111111101110011111111111111111111111111100011101111100111011000111111110111011111011111101111111110111111101011111110011111111111011011101001111110111111011111101101110111110111110111111110111110111111111101000111111111101111011011011111111111111110111111111101111111110111011101111001111111111111011010111111111111010111111011110111111111111110011101111111111110000111011101111111111111111111111111011011011111111111111011111111101111110111111111111111111110101110101110111101110110111110011101111111101111101111111111111101111111111110100101101011111111011011010111101101111111001110010001100111011111111111101010111001111111111111111111110111111100111111111011111111111111111111111111111111111111110101111111111111000111101101100111111011111111101111111111110111111101001111111011110110011100111111110110111111010101111111011111111010111100111011100111101111111111110011101101011111011111101111100111111011101111001111101111011111111111011111111111111100111011011111111110011001100110111101111111101011011111101111111001101110111011111101111100111111111101110011111011101101101111011111101101011111111111010111111011101111110111111111111111111111111111111111110110111111111111111111110111101001011111111111111111111011111001111111101100101111111101111111101111110101111111011101110111011111111011110011111011001011111110111111010101110011111111111100111111111111011011110111111101111111111011111101101111110111111011011011110101101111111010111101111111110111111111111111111111111010111011110011111001110111111110010111011111111111011111111111111111101111111111111011111111101110111111101111100111111111101111110111111111010010110111111011111010111111110011111111101111111011100011111111111101111111011110101110011111111111011011110111111101111111110011110111111011001111111111111111100111110100011111111100110110111010110110100111111111111111111111111111111111100111111111111111011111111111111111101110011010111101111111011111111101100011111110111010111111111111111110011111111111111110111111101110111110110111111111111101111111111110101111101111101111111111111010111011100111111010101101000101110101111110110111111111111100111111101011111111111111111111101111111111101111011111111111101111111111100111111011101011011110111111111110111111110011111011111101000111011001111110111111111111110111111111110111110101111111111111111101110110111010111111101111101111111101111111110111111111111110111101011111111111001111101101111111011111111111101111011001100110101110111011011111111111011111111111001111101101110010111111111001111110111110111111110111100111110111111111111011011011011111111111101111111101111111111111111010110001111110111111110111011010111110110111111111010110111111011011111111100100111101110111110111111111111111111101001111111011111001101011111111011100100111011011111011111111101111111111011101110111111111111111101111010111111101111101111110111111111111011111010101111101111101111101111111011111110110110111111111111111101001110101001111101111111100111111101110100110111110110111100101101001111110111000101111111110111001011111111111111110110011111111111111110101101101111011111111111110111111111111101110010011111110111110111111111101110111111111111101111111111101100101111010111001101111111111111011011101110111111111101111111111110011111111111111011100101110111111110010111111111011110000111011111111010101110111110111111101111001111111111001110110001111011111111111101110101101111111110111111110101111101111111111111111111101000111110111110111100111111110111111101101100111111111111111011111110011111110110111\n\\n\\n1101111110111110000110100001000101111110000101111000101010110111100011011011011101011010111010011010111111100100100000011000100010001111100111101101011100011110000110111100101110001010000110011001001000110001101100101010000000111101111111110011011011000010010010111001111011111110101100100011111101001100010010000000001100010111010111110000010000011111011100000000111100000001100011100001001111000110110111010011001111110101010001101101100110000000000000001111011010001111101001111111001011101000010001001110001010010101110100101110101011100100111100010111110111101011001000011000010111101100110000111100100101100010001111100110001011011110101001110101000000010010010010111001111110110100001111011001101100111001011011101111111001111010110111011111010011101010010001110010001110111010000010111100110101101111110111010001011000000010100111110100001010111000011101110111000001100001101100110011101110111001010100111010110111101110110000111011111100010011011100100101100110101010110101101001010010011100111111001000001111101011111011001001111001010101111000000111110110110000010111101000101000101011101011111000000100000011100000011110100100001011001111100100111110111101100011010100110010000101000101010101110010000101101101010111110010111011010001010101000000000000010110100011001101000111010110111100000110001001111010001011110010001111101101001111100111011001111000100111111001100001011011111001001101110101111101010011101101101001101010111101001110110001001011011001011101000010101000010000110010100101000110001101010111000011011100000110100001011000111101111010011000000100001010010111011100101111011110101110101000101001011010011010011000110101000100111110011001100111011001010111111111011110110101111000010001110001011100001011011111110010011000100000001011000010000010000111101101100011111110000111010001111000110000100011111100011010011110100101110111110000111110000010100010111000011101110000110110110111011101111110101111010100001110110111010101110111011010110101010111100100110011110010100010010110100110001010101111000010001111100101111001100100111011010111010011000111001010010010010111111000101111001001110100110011101111110101101001001010001111110111001001000000011101101011110001111010011010101111100010011100000001101010001110010001101101111010100100011101111001001110110000111100011001101110100101011111010101010100111110001000001110111010100110111010000001001000001110010001100101101101101000110011101100010011000111010110001100001000111101100100000001111000110000111110111100110110100100111101110010101111110000110101011101010000101000111111100100100000111101101101011100111111010000100100011000011111110011000101110111111111011101011101110100011010100001001100011001001101110111010111100110010110011110111111001110010111100111011110101011111111110111011111001000001100111011100110000111110010001111001101110010011100110001110000110111001100000111010011100110110010000111011010011010100111100011101110110100011101111010110011111100000101101010010100110010001111100110101111011011001001100101000111011100010010011110101111000000101101011010100101111000100100101011010011100110000111011010111000101011101001010000100000111111100011100111111100010100011111100100001010111111111011011110101101011000101111100111001001110100001011010000001001010110110100011100010001011011101100010111000110101101111010110011101001110001011110101101110011111000011011000100110101001010010111101100010101111011110110000000011101010111101001100010111011001011001100010111001100011011011110010011111101111110110011001001101111010111111110111001011111011000111001111011110101111001001011101010110110111011101001011101001111001010001111011010011011011111111111100000100100100011010010101011100110010000011000011001111001110100010110001110011111100110101100011101111110111001000100001100000110001011101010110011110111110001001101111011001110110110111001000000000110100010001011001111101101110011111110000011101001010111101110010111110000001111111101001101000100000011011100001111100010111110111011100101110010010001000101010000100000001011001011000011011000100011001110100110100001000011100111101010110110110001111101001000011010011011000001110001110111111110101010111010101111101101111101000100110100011111100000101000010000110011111111110100011100011011100100100001010010001110011100101000100111011011110101011101101010111011101111101011110100011101011011011011010111001001001110000110000101111001010111111111001010100001011010100101111101110011101101010011011101110010011100011111110101011010111000111100101100101000000010011010100111010011110100100000011010101011100010100110001101010011110110011000111010000110110110111111011000100010111110010101010101100111000100000010010010100101000000001110000111011000001001011100100010000110111110110001101100111101000100111011001100001101111110101100101100000011011010111110101111100011011111100000101100011011100101111011010011111111001100111000001111011101010110010111111011011010111000001110011011010011111101011001011011000111111111110001100010101010100111111101000011100111000011110010011011011001111100101011101011111000101010100010110110110011010111111100001101010011000100011001111010110010010101110000001001011001000011001010101000011010010111010100000000000001101000010010001000100011101011100001011101101000011101011101000100010010110111010111010110111100110110000101001100000011110011100111011100011001110101111100010101111101101000010010101011100011000000000110100000011100110011010111110110110110010101011010111110000001111111111101011111000111101110010011101110110100111111000001110011010001100110111100100111100010100010011011001000110010101111101100101110101111110101001100111110101100001111100010100110111100101010100011010011101111111111010111100110100010111111001011111011000001110111000111110110110110000110011110001110101000110000011101100001011111110011001101100011100000011101011101010111111000110010010110100010111000011001110101100111011011010010110011101010011001010011000101110101111011010111010010100011001111010101011111000011111110101110100111111010101100100101010000100101100110010101011111011110110011000100000110101011010001010101001001110100111111001100001101011111001000011110011001010100010011001101011111110011011101110001001110111011000100010000100111111001100000101111110111100101111010100000000001111001001110011110000101100110100000011011101110101100001010101111111111100111001101001011100000101000010100110110001010101100111101101000110101011100110001001010010011011100011001110001101000100100011001010111101111001101101100111111100011001100001001001000111111000011110001100101001010100000011000100011001111011100001111000011100011111010001101010111111100110101000110010011100100110100011110101111100100111111111100001010000111111001001010101111011100110010111101001010011001111000001111100000001111101111101111001010110110111100110000001101100011010111001101101101001101100111011110010010000010011001110001111001110010111000010011100100111010111010000010110110110111100000011111110000101111000100101000100111010101101100101110100000011000100110011011000111001000010000000100000101000010001111011010101010000010111101001100001110000010111000111001011011111011011111111110111001001000110000110001110011100101010100100001100111000011111101101010111011010111100101000111011010100011011010111100001011110111010011100011110001110100110100110101000111101111111111010010000100011100011011101010001010001011101110001010101101001111111010011111100101011001010001000100110100010001110101011110101101111011011110100111001001001111111010100001001110011110000001111010100101100001001100000001100001111011111000010111000111101101000100100001101010010100111011001101000110010100001101111011111000101000001111110101011100101000000001111010100100101001101100111101110011100100000100011010110111011110101011010001001001000001110100001101000100010010101010101000010111111001010101000001001100011010101011011101101111110011011110010001100001110100011111000100011110111111001101010111011001111110100001010001110000110101110011011111000111110010000111001111011011001101010101000001111100000111111111101101101110011110110011010001011100010110000111101001110010001001111101110100101110111011100011011111001111101011100110001100001010101111011011010001101100110011110011110111001001010110111111000110000101000101000110101000010010111100110111011010111101111011111011100000000011000110011011110000011100111001101000000010101010011001100001011101101100100001011110101000111000111100101000110110010111111101101010001000010000100111011110110111101110101100111111101111101011101010111010011111000001011000101000000101100011001010100111101110110010001011001011101111111001101011101010011010010111001101010011001111111111100011011011000101011110111110010111010101010011111010101100010100111001110111100101111001111010111111110111010110101110000110001111010110101010111001100101100101001101000100000110101010010000101000001011100110001111101001100111010000110001001110011000100010101110111000001011010101001101010101001001101001101011111010001011111110111100011011011111001000010001010111101011011010011101100111111111111011111111100011111000100011001111011101010011000010011111001111001010110111111001000011100000100100110001110011010101111100011110101100010000100011111000011101101111010000110111101101010110110100000000110100001110100110010001101011100110000010111101111101001110000111001100011111000001110000111101111001001111010101110110110011100111101111111001010001010101001111110101100101001000110000000100011111100101101101101110101000001101010110111011000011111111111110010100000011011111000100011001010111110110011010101011010000111100010001001010011010100011111000110000111010001011100111111001000111100110011000100100001101111001001001000111001101011101011000110000001011111000111100101000111111000010001111001010100100110010111011010100110011100110010101111000110100001001110010011010000001010010001100011001110010010011011110101011001111110101111110110100100011101011101110100101101010101001000101100111001000001111110001010011101000100010\\\nn\\n1111111111111110000101111111111101010111111111111011101101111111101111011011011101000010101011111110110110111111111111111101110110111111110110111111111111111111011111111101111111111011011111111111111011110011101101101111010011111111111111111111111110111110010111111111101111111111011111111111111111011111011011011110101111110111001110111111111010011011011111111100111111111111101101111011011111000111111111110011011111111101011011111111111111111111001000111111110110001011111101111111011101001000101011111110101010110010111010111111101010110101111111001111111011111011111111011011110111111111110101111111100100110101111111101110111111111111101011111111000101111111110010111111111110011111111111111011111111111001111111111111111110011111111111101111110111111110110100101111111111111011110011111100111111111111111101010101110010110111111111111110101101110111111101110111110001101111111111111111111110111111110110011111101010111101111101111111111001110110111110111101100110011111111111111001010011111110110110111110111111111111111111101011111111110111111000110111111110111001010011111011111111111111111111111101011101111011101011111111100011111111011111111111111111110111100111111111111111111111101111010111101111010111101111110110111111110111111111111111111011010010110110100111111101111111110111011101010110011111111111011111110110011111110111111110111111111111011011110110111011101101111111111011111111110111111101010110101011111111101010011111111111110110111111111111011101111010111111110111111111111111001110111111010110101111111100010111000011111111111101111111111111011110101111011111011101111111111111111111111111111111011100011011111011111101110011111110011111110111010111110111111111111111110101110000110011100111111111111011111111111111111111111011111111011110111110110111111100111111111011001111110101111111111101011011111111111010011111101101101110100010101110110011111010111110111011101110111111110111011111111111101111010111111111111110011001011101111111111110010111101111110111010010100111110111100111111111000111111110111111011111101111111101110111111111110000110111101110111011011110111111101101111110110110111111111111101101111101111111011111110111111111001001111101111011110111011011110110101101111110101111101011111110010110011101111111100011110101111101111101111111111000111101001111111101111101111111101111110100111110101000101111111111111010011011001111111111111110111011011111111111111011111011111100011111001111011100111110001010111101111110100110111010111001111111111111111110111101111111110110111111111111111111011111110001111111101111100110100110111111110101111110111111101100110111011101011111111000101111111111111111111111111101111111010111111111111110111101101111100101111111101101011111011111111111111111011111101111111100101111101110111001001111001011111011111111100111001111111101101110101111111011111111110101110110111111011100010111110101111101111110001111111100101011110111111111011111110111111101111011111111111101100111101111101110111111011111111111111111110111111011111111000011011100011111101111110111010111111101011110111101111111110111011111011111101110011111111011111100101011111111010111100100011111111111100111111110111101110111110101111011111111111101011110111111011111011111110110011111111111101111010011111011111101110011111110111101011111111111110111111011101111111111010111011101111101111111111110110111111110111011011110111111111111011101110101011111111101101110011100111111011111111111111110111111111011101011100111101101111111011111111011111111101111101011011101111111111101111111111111111111011010111101111111110111111001111011111110111010101111111101101101111111001011011111011111011111011111111111110100101011110011001011101111111110111100011101011111111010110111110101101111111111101111101001101111111111111101111110011101001111111111011111110111110111110101110111101011111011010111110111110110000110110111110111101011111101111101111010111111101111110101111111111111110100101111111111001111101110101111111111011111111111111110011011101101111010111101111111111111110111011111101111011111111011111111011111010111101111111111100101011011111111011111111111111111111100111110010101011011111111011111110110111011001111101111111111110110101110111110111111111111111011111111111111111111101111111110111100111111110111111110111111111111111111111111111111110101111111111111101111011111111110011101011010111011011111001111111111000111111101111111011111111111001011110001011010101111111101111111111111011011111111111111111101111111111101011110110000111111101110111011111111111011100100110110111100111111001111101110111111000111111111011011111101011100011111111110111011111001101111111111111010111101111101010011111110011110001011101101110110111111110111111101111011111110110110101111111111110111111101110111111111111111111111111111111111111100101101111111111110110111111101111111111111110101111101001011110111111100101111111111111110101111101011111111111110110111111111011111111001100110101011111011011101011111100111011110111111011101110111111111111110011111011011110111111111111111101111111011111101111111011011111000101110000110111101110011011111111101011111100111011101011110111011111011111101111111011111111101101111101111111110111111110111111001011110011010111011111111111001110111101001110111111001111101111111011101100111010101111111111111011111111111011011001101111111111111111111110111010111111101111101111011111111111101111100111111100111111111010101101111111001111100110111011111110111011110010111111111011101111011111111011111111110001111111110011011110100110111111111001111101011110011010111111101111111110010110011011111101111111110011111111111111111111011111111101011111101101101111110111010001110111100111001110011111111111111111110010111110110111110111111001111111111101111110111110101111111100110010111111110011111111011111011111111111111011111111111011111101110101011011111111111110111110100111011110111101111111101011111111111000111111001111111111111101110111011111111101110111111111011111010110011111110111111111101111111111111111111111110010111101101111111111101111100100101110110111111111111010110111111101110111111001011111111110011111111111100111111101010111110111110111100011111011111110010011011111101111111110010110111110111110111111011111001111111110111001111100111111111111101101101111011111111011111111100101111101111110111100111101111011111111111111110011010101111111110111111111101111011110100101101111100110111011100111101111111111001111100011100110101011110111011011110111111110111111111000110111011010011111111111101111101111111101001101101101111011001111111000111110111111111101111111101111101011011111011011101001111111011101011111111111111111110111101110101010111111111111111111110111111001111111111111111111110111011011111011101111111101111110110110000111111001111101111111001111111110011101101111111111110101111100011110001111101101011110010110111100011111101111111011111111110110111000111001111111111111111111101111011011111101111111101111011110011111110110111100110111111111100111111111110111001101111000111101110101111111000101110110111011111011111111101011111000111010111111010011110111111111110001111111101110111101111110111111001111011111111111011010110111110111111111111111011111011011110101111111111111101111011111111111111111110111111101111111101110111011110101111111110111010111011111111011111101111110011111110111100111111110111110111111111100111011110011101011011101011100011101111001110001110011101111101110111011101111101111100110110101111110111011111101111011101011101111111111100101111111111101110110111100101111110011111100101110111111100111101111111111111111111110111011111000111110111101101010110111001101110010110011011011111101111011111111111100111111111100100001111110111011111111010111011111111111101111111111111111111100011110111111110011001111111011111111010011001101011111111110100111011011111111111111110100111111111111111110101010011111110011110111011111001101011111111111011011111110101110111111111101101110111111111011011011111111111111010111101111101110001110111111000011111010111011111111101111101011011001110110111111001111111010110111111111011101110111111010111110111011111010110010111100011111110111111111111111010101111111111101011111111111111111111111101111100100110101111011011111111111110111001111111100111101011011111111111111110101111101111011101011011011111111101111111011111111111111111101111110001101111000100111111110111111110111101111111111111111111111101110101001101111101110010111011111011111011111110010110111111010111111101110111101110011110110011111100111111101111110111111010010111101011111111111010111001011111001111110101001101101111011010110111111111111111111011111011111111111111011011101000110110110111001101101010011111111111101111011111111111001110111111000111011111011111111111111101001001011101111111111011011111111111111111111111111111101010111010111111011110111111111111101111110110111111110101111111111111010010110110101111101101011111100011101111011111111011001111011101100111111110111010111111110111011011111111011101101111101011111111100001110111111111101111111111111111010111111111101110111111111101111111111111111011110111111011111011111011010111111111110011110110111110111111111111101111111001111011110011110111111101111111010111111101111101111111111111100011111101011001101111010100110001111111010111110111101111011111001111111111111011111111101110001111101101111101011110011111011011111011111101011011110101011101111111111101100110110111111111111111111111110001011101111111111111111101111000111110111100110111011100101001111110111101101111111110111111001101111111111111111100011111111111010111101100111101111110111110111111111011111101111111011100111110101111111010101111101111011101100110111111110011101111111001111101101111111111101101010111001111111111111011110000001111111110111101111001111111110111111111011011101100111011111111110111110111111111011101111111111101111011100011101111111110111101111110111101111111011111111010111111111011111111111111111111010011001111111110001110111101111011010101110111111100111111110111111110101000100111\\\nn
        "sample_output": "Case #1: 59",
        "source": "2021\\qualification_round\\cheating_detection"
    },
    {
        "problem_name": "Median Sort",
        "problem_statement": "You want to sort N} distinct items, x_1, x_2, ..., x_N}. Unfortunately, you do not have\na way of comparing two of these items. You only have a way to, given three of them, find\nout which one is the median, that is, which one is neither the minimum nor the maximum among\nthe three.\nFor example, suppose N} = 5 and you know that:x_1 is the median of \\{x_1, x_2, x_3\\}x_2 is the median of \\{x_2, x_3, x_4\\}x_3 is the median of \\{x_3, x_4, x_5\\}\nThen, it is guaranteed that the sorted order of the elements is either\nx_4, x_2, x_1, x_3, x_5 or its reverse x_5, x_3, x_1, x_2, x_4.\nNotice that by knowing only medians, it is impossible to distinguish the order of any list\nfrom its reverse, since the median question has the same result for any three\nelements in both cases.\nYour program will have to find the order of T} lists of N} elements using at most\nQ} median questions in total (or Q} / T} queries per list on average).\nIn each case, finding either the right order or its reverse is considered correct.\nThe order for each case is generated uniformly at random from all possible orders,\nand independently of any other information.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, the judge will send you a single line containing three integers T}, N}, and\n  Q}: the number of test cases, the number of elements to sort within each test case, and\n  the total number of questions you are allowed across all test cases, respectively.\n  Then, you must process T} test cases. Each test case consists of a series of question exchanges\n  plus an additional exchange to provide the answer.\nFor a question exchange, your program must print a single line containing\n  three distinct integers i, j, k all between 1 and N}, inclusive,\n  which corresponds to asking the judge\"which element is the median of the set\n  \\{x_i, x_j, x_k\\}?\"The judge will respond with a single line containing a single integer L},\n  meaning that the median of that set is x_L} (L} is always equal to\n  one of i, j, or k).\n  If you try to perform a (Q}+1)-th question exchange, the judge will simply output-1.\nOnce you are ready to state the result, print a line containing N} integers\n  representing the indices of the elements in sorted or reverse sorted order.\n  The judge will respond with a single integer1if your answer\n  is correct or-1if it is not. After receiving the judge's answer for the\n  T}-th case, your program must finish in time in order to not receive a Time Limit Exceeded\n  error. In addition, if you print additional information after receiving the result\n  for the T}-th case, you will get a Wrong Answer judgment.\nIf the judge receives an invalidly formatted line or invalid values from your\n  program at any moment, the judge will print a single number-1.\n  After the judge prints-1for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a-1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nTime limit: 40 seconds.Memory limit: 1 GB.T} = 100.\nN} = 10.Q} = 300 * T}.\nN} = 50.Q} = 300 * T}.\nN} = 50.Q} = 170 * T}.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2021\\qualification_round\\median_sort"
    },
    {
        "problem_name": "Moons and Umbrellas",
        "problem_statement": "Cody-Jamal is working on his latest piece of abstract art: a mural consisting of a row\nof waning moons and closed umbrellas. Unfortunately, greedy copyright trolls are claiming\nthat waning moons look like an uppercase C and closed umbrellas look like a J, and they have\na copyright on CJ and JC. Therefore, for each time CJ appears in the mural, Cody-Jamal\nmust pay X}, and for each time JC appears in the mural, he must pay Y}.\n\nCody-Jamal is unwilling to let them compromise his art, so he will not change\nanything already painted. He decided, however, that the empty spaces he still has\ncould be filled strategically, to minimize the copyright expenses.\nFor example, ifCJ?CC?represents the current state of the mural,\nwithCrepresenting a waning moon,Jrepresenting a closed umbrella,\nand?representing a space that still needs to be painted with either\na waning moon or a closed umbrella, he could finish the mural asCJCCCC,CJCCCJ,CJJCCC, orCJJCCJ.\nThe first and third options would require paying X} + Y} in copyrights,\nwhile the second and fourth would require paying 2 * X} + Y}.\nGiven the costs X} and Y} and a string representing the current state of the mural,\nhow much does Cody-Jamal need to pay in copyrights if he finishes his mural in a way that\nminimizes that cost?\nThe first line of the input gives the number of test cases, T}. T} lines\nfollow.\nEach line contains two integers X} and Y} and a string S} representing the two costs\nand the current state of the mural, respectively.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the\nminimum cost that Cody-Jamal needs to pay in copyrights for a finished mural.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.Each character of S} is eitherC,J, or?.\n1 <= the length of S} <= 10.1 <= X} <= 100.1 <= Y} <= 100.\n1 <= the length of S} <= 1000.1 <= X} <= 100.1 <= Y} <= 100.\nWhat if some copyright holders could pay Cody-Jamal for the advertisement\ninstead of being paid? Cody-Jamal getting paid is represented by a negative cost.\n1 <= the length of S} <= 1000.-100 <= X} <= 100.-100 <= Y} <= 100.\nSample Case #1 is the one explained in the problem statement. The minimum cost is\nX} + Y} = 2 + 3 = 5.\nIn Sample Case #2, Cody-Jamal is already finished, so he does not have a choice.\nThere are twoCJs and oneJCin his mural.\nIn Sample Case #3, substituting eitherCorJresults\nin oneCJeither from the second and third characters or the first\nand second characters, respectively.\nIn Sample Case #4, Cody-Jamal can finish his mural with allJs.\nSince that contains no instance ofCJnorJC, it yields\nno copyright cost.\nIn Sample Case #1 for Test Set 3, Cody-Jamal can finish his mural optimally\nasJCJJCCorJCJJJC. Either way, there is oneCJand twoJCs in his mural.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines\nfollow.\nEach line contains two integers X} and Y} and a string S} representing the two costs\nand the current state of the mural, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the\nminimum cost that Cody-Jamal needs to pay in copyrights for a finished mural.",
        "sample_input": "1\n2 -5 ??JJ??",
        "sample_output": "Case #1: -8",
        "source": "2021\\qualification_round\\moons_and_umbrellas"
    },
    {
        "problem_name": "Reversort",
        "problem_statement": "Note: The main parts of the statements of the problems \"Reversort\" and \"Reversort Engineering\" are\nidentical, except for the last paragraph. The problems can otherwise be solved independently.\nReversort is an algorithm to sort a list of distinct integers in increasing order.\nThe algorithm is based on the \"Reverse\" operation. Each application of this\noperation reverses the order of some contiguous part of the list.\nThe pseudocode of the algorithm is the following:\nAfter i-1 iterations, the positions 1,\\;2,\\;\\dots,\\;i-1 of the list\ncontain the i-1 smallest elements of L, in increasing order.\nDuring the i-th iteration, the process reverses the sublist going\nfrom the i-th position to the current position of the i-th minimum\nelement. That makes the i-th minimum element end up in the i-th position.\nFor example, for a list with 4 elements, the algorithm would perform 3 iterations.\nHere is how it would process L = [4, 2, 1, 3]:i = 1,~ j = 3 \\longrightarrow L = [1, 2, 4, 3]i = 2,~ j = 2 \\longrightarrow L = [1, 2, 4, 3]i = 3,~ j = 4 \\longrightarrow L = [1, 2, 3, 4]The most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value j - i + 1. The cost of the whole algorithm is the sum of the\ncosts of each iteration.In the example above, the iterations cost 3, 1, and 2, in that order, for a total\nof 6.Given the initial list, compute the cost of executing Reversort on it.InputThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 2 lines. The first line contains a single integer N}, representing\nthe number of elements in the input list. The second line contains N} distinct integers\nL_1}, L_2}, ..., L_N}, representing the\nelements of the input list L, in order.OutputFor each test case, output one line containingCase #x: y, where x\nis the test case number (starting from 1) and y is the total cost of executing\nReversort on the list given as input.LimitsTime limit: 10 seconds.Memory limit: 1 GB.Test Set 1 (Visible Verdict)1 <= T} <= 100.2 <= N} <= 100.1 <= L_i} <= N, for all i.L_i} \\ne L_j}, for all i \\ne j.SampleSample Inputsave_altcontent_copyCopied!3\n4\n4 2 1 3\n2\n1 2\n7\n7 6 5 4 3 2 1Sample Outputsave_altcontent_copyCopied!Case #1: 6\nCase #2: 1\nCase #3: 12Sample Case #1 is described in the statement above.In Sample Case #2, there is a single iteration, in which Reverse is applied to a sublist of\n  size 1. Therefore, the total cost is 1.In Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1.\nThe most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value j - i + 1. The cost of the whole algorithm is the sum of the\ncosts of each iteration.\nIn the example above, the iterations cost 3, 1, and 2, in that order, for a total\nof 6.\nGiven the initial list, compute the cost of executing Reversort on it.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 2 lines. The first line contains a single integer N}, representing\nthe number of elements in the input list. The second line contains N} distinct integers\nL_1}, L_2}, ..., L_N}, representing the\nelements of the input list L, in order.\nFor each test case, output one line containingCase #x: y, where x\nis the test case number (starting from 1) and y is the total cost of executing\nReversort on the list given as input.\nTime limit: 10 seconds.Memory limit: 1 GB.\n1 <= T} <= 100.2 <= N} <= 100.1 <= L_i} <= N, for all i.L_i} \\ne L_j}, for all i \\ne j.\nSample Case #1 is described in the statement above.\nIn Sample Case #2, there is a single iteration, in which Reverse is applied to a sublist of\n  size 1. Therefore, the total cost is 1.\nIn Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 2 lines. The first line contains a single integer N}, representing\nthe number of elements in the input list. The second line contains N} distinct integers\nL_1}, L_2}, ..., L_N}, representing the\nelements of the input list L, in order.",
        "output_description": "For each test case, output one line containingCase #x: y, where x\nis the test case number (starting from 1) and y is the total cost of executing\nReversort on the list given as input.",
        "sample_input": "3\n4\n4 2 1 3\n2\n1 2\n7\n7 6 5 4 3 2 1",
        "sample_output": "Case #1: 6\nCase #2: 1\nCase #3: 12",
        "source": "2021\\qualification_round\\reversort"
    },
    {
        "problem_name": "Reversort Engineering",
        "problem_statement": "Note: The main parts of the statements of the problems \"Reversort\" and \"Reversort Engineering\" are\nidentical, except for the last paragraph. The problems can otherwise be solved independently.\nReversort is an algorithm to sort a list of distinct integers in increasing order.\nThe algorithm is based on the \"Reverse\" operation. Each application of this\noperation reverses the order of some contiguous part of the list.\nThe pseudocode of the algorithm is the following:\nAfter i-1 iterations, the positions 1,\\;2,\\;\\dots,\\;i-1 of the list\ncontain the i-1 smallest elements of L, in increasing order.\nDuring the i-th iteration, the process reverses the sublist going\nfrom the i-th position to the current position of the i-th minimum\nelement. That makes the i-th minimum element end up in the i-th position.\nFor example, for a list with 4 elements, the algorithm would perform 3 iterations.\nHere is how it would process L = [4, 2, 1, 3]:i = 1,~ j = 3 \\longrightarrow L = [1, 2, 4, 3]i = 2,~ j = 2 \\longrightarrow L = [1, 2, 4, 3]i = 3,~ j = 4 \\longrightarrow L = [1, 2, 3, 4]The most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value j - i + 1. The cost of the whole algorithm is the sum of the\ncosts of each iteration.In the example above, the iterations cost 3, 1, and 2, in that order, for a total\nof 6.You are given a size N} and a cost C}. Find a list of N} distinct\nintegers between 1 and N} such that the cost of applying\nReversort to it is exactly C}, or say that there is no such list.InputThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case with two integers N} and C}, the size\nof the wanted list and the desired cost, respectively.OutputFor each test case, if there\nis no list of size N} such that applying Reversort to it costs\nexactly C}, output one line containingCase #x: IMPOSSIBLE, where x is the\n test case number (starting from 1).\nOtherwise, output one line containingCase #x: y_1 y_2 ... y_N},\n where x is the\n test case number (starting from 1) and each y_i is a distinct integer between\n 1 and N}, representing the i-th element of one such possible list.If there are multiple solutions, you may output any one of them.\n(See \"What if a test case has multiple correct solutions?\"\nin theCompeting section of the FAQ.)\nThis information about multiple solutions will not be explicitly stated in the remainder of the\n2021 contest.LimitsTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= C} <= 1000.Test Set 1 (Visible Verdict)2 <= N} <= 7.Test Set 2 (Visible Verdict)2 <= N} <= 100.SampleSample Inputsave_altcontent_copyCopied!5\n4 6\n2 1\n7 12\n7 2\n2 1000Sample Outputsave_altcontent_copyCopied!Case #1: 4 2 1 3\nCase #2: 1 2\nCase #3: 7 6 5 4 3 2 1\nCase #4: IMPOSSIBLE\nCase #5: IMPOSSIBLESample Case #1 is described in the statement above.In Sample Case #2, the algorithm runs for only one iteration on the proposed output.\n  In that iteration, reverse is applied to a sublist of size 1, therefore, its cost is 1.In Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1. Another valid output would be7 5 4 3 2 1 6. For that output, the first\n  iteration has a cost of 6, the last one has a cost of 2, and all others have a cost of 1.In Sample Case #4, Reversort will necessarily perform 6 iterations, each of which will have\n  a cost of at least 1, so there is no way the total cost can be as low as required.\nThe most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value j - i + 1. The cost of the whole algorithm is the sum of the\ncosts of each iteration.\nIn the example above, the iterations cost 3, 1, and 2, in that order, for a total\nof 6.\nYou are given a size N} and a cost C}. Find a list of N} distinct\nintegers between 1 and N} such that the cost of applying\nReversort to it is exactly C}, or say that there is no such list.\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case with two integers N} and C}, the size\nof the wanted list and the desired cost, respectively.\nFor each test case, if there\nis no list of size N} such that applying Reversort to it costs\nexactly C}, output one line containingCase #x: IMPOSSIBLE, where x is the\n test case number (starting from 1).\nOtherwise, output one line containingCase #x: y_1 y_2 ... y_N},\n where x is the\n test case number (starting from 1) and each y_i is a distinct integer between\n 1 and N}, representing the i-th element of one such possible list.\nIf there are multiple solutions, you may output any one of them.\n(See \"What if a test case has multiple correct solutions?\"\nin theCompeting section of the FAQ.)\nThis information about multiple solutions will not be explicitly stated in the remainder of the\n2021 contest.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= C} <= 1000.\n2 <= N} <= 7.\n2 <= N} <= 100.\nSample Case #1 is described in the statement above.\nIn Sample Case #2, the algorithm runs for only one iteration on the proposed output.\n  In that iteration, reverse is applied to a sublist of size 1, therefore, its cost is 1.\nIn Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1. Another valid output would be7 5 4 3 2 1 6. For that output, the first\n  iteration has a cost of 6, the last one has a cost of 2, and all others have a cost of 1.\nIn Sample Case #4, Reversort will necessarily perform 6 iterations, each of which will have\n  a cost of at least 1, so there is no way the total cost can be as low as required.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case with two integers N} and C}, the size\nof the wanted list and the desired cost, respectively.",
        "output_description": "For each test case, if there\nis no list of size N} such that applying Reversort to it costs\nexactly C}, output one line containingCase #x: IMPOSSIBLE, where x is the\n test case number (starting from 1).\nOtherwise, output one line containingCase #x: y_1 y_2 ... y_N},\n where x is the\n test case number (starting from 1) and each y_i is a distinct integer between\n 1 and N}, representing the i-th element of one such possible list.",
        "sample_input": "5\n4 6\n2 1\n7 12\n7 2\n2 1000",
        "sample_output": "Case #1: 4 2 1 3\nCase #2: 1 2\nCase #3: 7 6 5 4 3 2 1\nCase #4: IMPOSSIBLE\nCase #5: IMPOSSIBLE",
        "source": "2021\\qualification_round\\reversort_engineering"
    },
    {
        "problem_name": "Append Sort",
        "problem_statement": "We have a list of integers X_1}, X_2}, ..., X_N}. We would like them to be\nin strictly increasing order, but unfortunately, we cannot reorder them. This means that\nusual sorting algorithms will not work.\nOur only option is to change them by appending digits 0 through 9 to their right\n(in base 10).\nFor example, if one of the integers is 10, you can turn it into 10\\textbf{0} or\n10\\textbf{9} with a single append operation, or into 10\\textbf{34} with two operations\n(as seen in the image below).\nGiven the current list, what is the minimum number of single digit append operations\nthat are necessary for the list to be in strictly increasing order?\nFor example, if the list is 100, 7, 10, we can use 4 total operations to\nmake it into a sorted list, as the following image shows.\n\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger N}, the number of integers in the list. The second line contains N} integers\nX_1}, X_2}, ..., X_N}, the members of the list.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe minimum number of single digit append operations needed for the list to\nbe in strictly increasing order.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.\n2 <= N} <= 3.1 <= X_i} <= 100, for all i.\n2 <= N} <= 100.1 <= X_i} <= 10^9, for all i.\nIn Sample Case #1, the input is the same as in the example given in the problem statement. As the\n  image shows, the list can be turned into a sorted list with 4 operations. Notice that the\n  last two integers need to end up with at least 3 digits (requiring at least 3 append\n  operations in total).\n  If all of the final numbers had exactly three digits, the second would be larger than the third\n  because it starts with a 7 instead of a 1. This means we cannot do it with fewer\n  than 4 operations.\nIn Sample Case #2, notice that the list needs to be in strictly increasing order, so we\n  have to do at least one operation. In this case, any valid append operation to the second\n  integer works.\nIn Sample Case #3, we can use two append operations to get the list to\n  4, 19, 1\\textbf{93}.\nIn Sample Case #4, the given list is already in strictly increasing order, so no\n  operations are necessary.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger N}, the number of integers in the list. The second line contains N} integers\nX_1}, X_2}, ..., X_N}, the members of the list.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe minimum number of single digit append operations needed for the list to\nbe in strictly increasing order.",
        "sample_input": "4\n3\n100 7 10\n2\n10 10\n3\n4 19 1\n3\n1 2 3",
        "sample_output": "Case #1: 4\nCase #2: 1\nCase #3: 2\nCase #4: 0",
        "source": "2021\\round_1a\\append_sort"
    },
    {
        "problem_name": "Hacked Exam",
        "problem_statement": "There is an exam with Q} true or false questions.\n  The correct answer to each question is eitherTorF.\n  Each student taking the exam selects eitherTorFfor each question,\n  and the student's score is the number of questions they answer correctly.\n\nThere are N} students who have already taken this exam.\n  For each of those students, you know the answers they gave to each question and their final score.\n  Assuming that any sequence of answers that is consistent with all of those students' scores has\n  the same probability of being the correct sequence of answers, you want to maximize your own expected score.\n  Determine what that expected score is and how to answer the questions so that you achieve\n  it.\nThe first line of the input gives the number of test cases, T}.\n  T} test cases follow.\n  The first line of each test case contains two integers N} and Q}:\n  the number of students and the number of questions, respectively.\n  Each of the next N} lines contains a string A_i} and an integer S_i}:\n  the i-th student's answers and their score, respectively.\n  The j-th character of A_i} is\n  eitherTorF, representing the answer the i-th student gave\n  to the j-th question.\nFor each test case, output one line containingCase #x: y z/w,\n  where x is the test case number (starting from 1),\n  y is a string representing a sequence of answers that yields the maximum expected score\n  (in the same format as the input),\n  and \\frac{z}{w} is the maximum expected score as an irreducible fraction\n  (that is, w must be positive and of minimum possible value).\nTime limit: 30 seconds.Memory limit: 1 GB.1 <= T} <= 2021.The length of A_i} = Q}, for all i.Each character of A_i} is an uppercaseTor an uppercaseF,\n    for all i.0 <= S_i} <= Q}, for all i.There exists at least one sequence of correct answers consistent with the input.\n1 <= N} <= 2.1 <= Q} <= 10.\n1 <= N} <= 2.1 <= Q} <= 40.\n1 <= N} <= 3.1 <= Q} <= 120.\nIn Sample Case #1,\n  given that the score forFFTis 3,\n  the sequence of correct answers must beFFT.\nIn Sample Case #2,\n  given that the score forFFTis 2,\n  the sequence of correct answers isFFF,FTT, orTFT,\n  each with probability \\frac{1}{3}.\n  Your best strategy is to answerFFT, to achieve the expected score of\n  \\frac{1}{3} \\times 2 + \\frac{1}{3} \\times 2 + \\frac{1}{3} \\times 2 = 2.\nIn Sample Case #3, there are other answers that also achieve an expected score of 4,\n  likeFTFTFT.\nIn Sample Case #4, one of the questions' answer isTand the other one\n  isF, but you do not know which is which. AnsweringTForFTscores you 2 with probability \\frac{1}{2} and\n  0 with probability \\frac{1}{2}, yielding an expected score of 1.\n  AnsweringFForTTguarantees a score of 1.\n  Since any sequence of answers gives the same expected score, you can output any of them.\nIn the Sample Case for Test Set 3, you can get an expected score over 65,\n  which is higher than the actual score of any of the other students. Notice that\n  both the numerator and denominator of the expected score can be significantly larger\n  than 2^{64} (the numerator in this case actually exceeds 2^{97}).\n",
        "input_description": "The first line of the input gives the number of test cases, T}.\n  T} test cases follow.\n  The first line of each test case contains two integers N} and Q}:\n  the number of students and the number of questions, respectively.\n  Each of the next N} lines contains a string A_i} and an integer S_i}:\n  the i-th student's answers and their score, respectively.\n  The j-th character of A_i} is\n  eitherTorF, representing the answer the i-th student gave\n  to the j-th question.",
        "output_description": "For each test case, output one line containingCase #x: y z/w,\n  where x is the test case number (starting from 1),\n  y is a string representing a sequence of answers that yields the maximum expected score\n  (in the same format as the input),\n  and \\frac{z}{w} is the maximum expected score as an irreducible fraction\n  (that is, w must be positive and of minimum possible value).",
        "sample_input": "1\n3 120\nFFTFFFTFFFTTTTTTTFTFFFFFFTTTFTFFFTFTFFTTFTFFTFFTTTFTFTFFTFTFTTFFFFTFTFFFFTTTFTTFTTTTFFFTTFFFFFTTFFTFFTFFTTTFFFFTTFFTFTTF 55\nFFFTFFTTFFFFTFTFFTFFFTTTTTTFFFTTTFTTTTFFTFTTTFTTFFTTTFTFFFFTFFTTFFTTFTTFFTFTFFTFTTFTFTFFTTTFFTFTFTTFFTFTFTFTTFFTFFFTFTFT 62\nFFFTFTTFFFFFTFTFTTTTTTFFTTFTFFFTFFTTTTTTFFFTTTFFFTTFTFFFFFFTFTTFFTFTTTFTTTTFTTFFFFTFFTTFTFFTTTTTTFTFFFFFTTFFTFTFTFFTTTTT 64",
        "sample_output": "Case #1: FFFTFTTTFFFFTFTFFTFTTTTTTTFFFFTTTFTTTTFFTFTTTTTFFFTFTFTFFFFTFFTTFTFTFTTTTTFFTFFFFFFFFTTFTTTTTTFTTTTFFFFTFTFTTFTFFFFTTTFT 189154508532118369075350624633/2901503505434414233388602018",
        "source": "2021\\round_1a\\hacked_exam"
    },
    {
        "problem_name": "Prime Time",
        "problem_statement": "You are playing a new solitaire game called Prime Time.\n  You are given a deck of cards, and each card has a prime number\n  written on it. Multiple cards may have the same\n  number.\nYour goal is to divide the cards into two groups in such a way that the sum of the numbers\n  in the first group is equal to the product of the numbers in the second group. Each card\n  must belong to exactly one of the two groups, and each group must contain\n  at least one card. The sum or product of a group that consists of a single card is simply\n  the number on that card.\n\nFor example, in the image above, the left group has cards whose sum is 25 and the right\n  group has cards whose product is 25. Therefore, this is a valid split into groups.\nYour score is the sum of the numbers in the first group\n  (which is equal to the product of the numbers in the second group),\n  or 0 if you cannot split the cards this way at all. What is the maximum score you can achieve?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\n  The first line of each test case contains a single integer M}, representing the number of\n  distinct prime numbers in your deck.\n  Each of the next M} lines contains two values: P_i} and N_i}, representing\n  that you have exactly N_i} cards with the prime P_i} written on them.\nNote that the total number of cards in your deck is the sum of all N_i}s.\nFor each test case, output one line containingCase #x: y, where x is the\n  test case number (starting from 1) and y is the maximum score you can achieve.\nTime limit: 45 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= M} <= 95. (Note that there are exactly 95 distinct primes between 2 and 499)2 <= P_i} <= 499, for all i.Each P_i} is prime.P_i} < P_{i+1}}, for all i. (The primes are given in strictly increasing order)1 <= N_i}, for all i.\n2 <= N_1} + N_2} + *s + N_M} <= 10.\n2 <= N_1} + N_2} + *s + N_M} <= 100.\n2 <= N_1} + N_2} + *s + N_M} <= 10^{15}.\nIn Sample Case #1, the optimal split is: 11+2+7+3+2=5\\cdot5. Another split is also possible:\n  5+7+3+2+5=11\\cdot2, but it gives a lower score.\nIn Sample Case #2, note that cards with the same number can be placed in different groups.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\n  The first line of each test case contains a single integer M}, representing the number of\n  distinct prime numbers in your deck.\n  Each of the next M} lines contains two values: P_i} and N_i}, representing\n  that you have exactly N_i} cards with the prime P_i} written on them.",
        "output_description": "For each test case, output one line containingCase #x: y, where x is the\n  test case number (starting from 1) and y is the maximum score you can achieve.",
        "sample_input": "4\n5\n2 2\n3 1\n5 2\n7 1\n11 1\n1\n17 2\n2\n2 2\n3 1\n1\n2 7",
        "sample_output": "Case #1: 25\nCase #2: 17\nCase #3: 0\nCase #4: 8",
        "source": "2021\\round_1a\\prime_time"
    },
    {
        "problem_name": "Broken Clock",
        "problem_statement": "Emmett found an old clock in his attic. The clock is a circle with 3 hands that attach\nto the center and rotate clockwise at constant speeds. They are called thehours hand,\ntheminutes handand theseconds hand. At midnight, all hands point up.\nThe hours hand completes a full revolution in 12 hours, the minutes hand\ncompletes a full revolution in 1 hour, and the seconds hand completes a\nfull revolution in 1 minute.\n1 hour is equal to 60 minutes, 1 minute is equal to 60 seconds,\nand 1 second is equal to 10^9 nanoseconds.\nFor example, the clock depicted below is showing that the time is exactly 6 hours\nand 30 minutes after midnight. The hours hand (short black) is halfway between\n6 and 7 (completed 6.5/12 of a revolution),\nthe minutes hand (long black) is pointing straight down because\nit has completed exactly 6 and a half full revolutions and the seconds hand (red)\nis pointing straight up because it has completed an integer number of full revolutions.\n\nUnfortunately, the hands are broken, so they all look identical and there is no way to know which hand\nis which. The clock in the picture above, with its hands broken, would look like this.\n\nIn addition, no markings remain that allow Emmett to know which way is up,\nso any rotation of the clock could be the correct one (the clock can only be rotated, not reflected).\nTo continue with our example, the fully broken clock could look like this.\n\nEmmett does know that the time was strictly\nbefore noon, that is, strictly less than 12 hours after midnight. Emmett has taken a picture\nof the clock. Given that picture (represented by the angles of the hands relative to a single\narbitrary axis), figure out what time it could correspond to.\nNotice that Emmett has already figured out a viable orientation of the clock in some cases\n(Test Set 1) and has managed to narrow down the possible times to a whole integer number of seconds\n(Test Sets 1 and 2) or nanoseconds (Test Set 3). Please see the limits sections for more details.\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case and contains three integers A}, B}, and C}: the angles of each hand,\nrelative to an arbitrary axis and given in ticks in the clockwise direction. 1tickis equal to 1/12 \\times 10^{-10} degrees. This means that the hours hand rotates exactly\n1 tick each nanosecond, the minutes hand rotates exactly 12 ticks each nanosecond and\nthe seconds hand rotates exactly 720 ticks each nanosecond.\nFor each test case, output one line containingCase #x: h m s n,\nwhere x is the test case number (starting from 1) and\nh, m, s, and n are integers: h is the number of full hours since\nmidnight (between 0 and 11, inclusive),\nm is the number of full minutes since the last full hour (between 0 and 59,\ninclusive), s is the number of full seconds since the last full minute (between 0\nand 59, inclusive) and n is the number of full nanoseconds since the\nlast full second (between 0 and 10^9-1, inclusive).\nTime limit: 30 seconds.Memory limit: 1 GB.1 <= T} <= 100.0 <= A} <= B} <= C} < 360 \\times 12 \\times 10^{10}.\nThere is a time t that corresponds to the input such that:t is an integer number of seconds after midnight.t can be read from the input clock without rotating it.\nThere is a time that corresponds to the input and is an integer number of seconds after midnight.\nThere is a time that corresponds to the input and is an integer number of nanoseconds after\nmidnight.\nIn Sample Case #1, all hands point up (as in the first picture below)\nwhich happens only exactly at midnight (as in the second picture below).\n\nSample Case #2 is the one pictured in the main part of the statement.\nThe angles of the hands in degrees are 0, 180 and 195. These\nangles can correspond to 6⁠h 30⁠m 0⁠s without rotating the clock, as the\npictures in the main part of the statement show. Notice however, that at\n0⁠h 30⁠m 0⁠s (pictured below), the clock looks\nthe same but rotated 180 degrees.\n\nEven in Test Set 1,\n0⁠h 30⁠m 0⁠s would be a valid answer. The limit\nonly says that there\nis one valid time that does not require rotating the clock, but times that work with rotation\nare also valid answers.\nIn Sample Case #3, the input represents the clock in the first picture below and the given output happens\nwhen interpreting the clock as in the second picture below.\n\nSample Cases in this test set are the same as in the previous one, but the clock is rotated by\n45, 90, and 180 degrees clockwise respectively, as shown below.\n\nAs explained above, 1 nanosecond after midnight the hands are moved\nby 1, 12, and 720 ticks, respectively. If the clock is also rotated\ncounter-clockwise by 1 tick, the hand angles are exactly the ones given in the input.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case and contains three integers A}, B}, and C}: the angles of each hand,\nrelative to an arbitrary axis and given in ticks in the clockwise direction. 1tickis equal to 1/12 \\times 10^{-10} degrees. This means that the hours hand rotates exactly\n1 tick each nanosecond, the minutes hand rotates exactly 12 ticks each nanosecond and\nthe seconds hand rotates exactly 720 ticks each nanosecond.",
        "output_description": "For each test case, output one line containingCase #x: h m s n,\nwhere x is the test case number (starting from 1) and\nh, m, s, and n are integers: h is the number of full hours since\nmidnight (between 0 and 11, inclusive),\nm is the number of full minutes since the last full hour (between 0 and 59,\ninclusive), s is the number of full seconds since the last full minute (between 0\nand 59, inclusive) and n is the number of full nanoseconds since the\nlast full second (between 0 and 10^9-1, inclusive).",
        "sample_input": "1\n0 11 719",
        "sample_output": "Case #1: 0 0 0 1",
        "source": "2021\\round_1b\\broken_clock"
    },
    {
        "problem_name": "Digit Blocks",
        "problem_statement": "You are going to build N} towers of B} cubic blocks each, one block at a time.\nTowers are built bottom-up: the i-th block to be placed in a tower\nends up as the i-th from the bottom. You need to decide where to place\neach block before getting to see any of the upcoming blocks, and once placed,\nblocks cannot be moved.\nEach block has a single decimal digit printed on it, and towers are built such that the faces with\ndigits are all facing the front. The font is such that blocks cannot be rotated to obtain\na different digit (for example, a block with a 6 on it cannot\nbe rotated to obtain a block with a 9 on it, nor vice versa).\nFor example, suppose N}=3 and B}=3 and you currently have towers as shown in Picture 1.\nIf a block with a 6 shows up next, you have two options: either place it on\ntop of the tower with only two blocks (as shown in Picture 2)\nor start the third tower (as shown in Picture 3). Note that you cannot put it on top of the first\ntower since the first tower already has B} blocks.\nPicture 1\nPicture 2\nPicture 3\nAfter the building is done, we read the B} digit integer\nprinted on the front of each tower from the top to the bottom (that is, the digit on\nthe last block placed on a tower is the most significant digit). Notice that these\nintegers may have any number of leading zeroes.\nThen, we add those N} integers together to obtain the score of our building operation.\nFor example, in Picture 4 below, the integers read on each tower, from left to right,\nare 123, 345, and 96. The score of that building operation would\nbe 123 + 345 + 96 = 564.\nPicture 4\nThe digit for each block is generated uniformly at random, and independently of\nany other information.\nIn order for your solution to be judged correct, the sum of its scores over all T} test cases\nmust be at least P}.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially the judge will send you a single line containing four integers T}, N},\n  B}, and P}: the number of test cases, the number of towers,\n  the number of blocks in each tower, and the minimum total score you need to reach to\n  pass this test set.\nThen, you must process T} test cases. Each test case consists of N} \\times B}\n  exchanges. Each exchange corresponds to placing one block.\n  Within each exchange, the judge will first print a line containing a single integer\n  D} representing the digit printed on the block you need to place.\n  You need to respond with a single line containing a single integer i}, the number\n  (between 1 and N}) of the tower you want to place that block on.\nAfter the last exchange of each test case except the last one, the judge will\n  immediately start the next test case. After the last exchange of the last test case,\n  the judge will print an additional\n  line containing a single integer:1if your total score\n  is at least P} or-1if it is not.\nIf the judge receives an invalidly formatted line, an invalid tower number,\n  or the number of a tower that already contains B} blocks from your\n  program, the judge will print a single number-1.\n  After the judge prints-1for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a-1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nYou can assume that the digit for each block is generated uniformly at random, and independently\n  for each digit, for each test case and for each submission.Therefore\n  even if you submit exactly the same code twice, the judge could use different random digits.\nTime limit: 60 seconds.Memory limit: 1 GB.T} = 50.N} = 20.B} = 15.D} is a decimal digit between 0 and 9.\nP} = 860939810732536850 (approximately 8.6 \\times 10^{17}).Note that this boundary is chosen as approximately 90\\% of T} \\times S, where\nS = 19131995794056374.42... (approximately 1.9 \\times 10^{16})\nis the highest possibleexpectedscore that a solution\nto this problem can achieve on one test case given unbounded running time.\nThe exact value of S as defined above can be found in lines 13 and 14 of the local testing\ntool.\nP} = 937467793908762347 (approximately 9.37 \\times 10^{17}).Note that this boundary is chosen as approximately 98\\% of T} \\times S.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2021\\round_1b\\digit_blocks"
    },
    {
        "problem_name": "Subtransmutation",
        "problem_statement": "As the most skilled alchemist in your country, you were summoned yet again because\npowers beyond science were needed to satisfy your country's leader's ever increasing\ngreed for rare metals.\nEach metal is represented by a positive integer. You need to create U_1} units of metal\n1, U_2} units of metal 2, \\ldots and U_N} units of metal N}. Metals\nN}+1, N}+2, \\ldots do exist, but you are not required to create any specific amount\nof them. You are allowed to create excess amounts of any metal, which can just be discarded.\nUnfortunately, budget cuts have left you only the materials for a simple alchemy spell.\nFor some fixed numbers A} and B}, with A} < B}, you can take one unit\nof metal i and destroy it to create one unit of metal (i-A}) and one\nunit of metal (i-B}).\nIf either of those integers is not positive, that specific unit is not created.\nIn particular, if i <= A}, the spell simply destroys the unit and creates nothing.\nIf A} < i <= B} the spell destroys the unit and\ncreates only a single unit of metal (i-A}).\nYou have been assigned an expert miner to assist you. The expert miner can fetch a single unit of\nany metal you want. From that unit, you can use your spell to create other metals\nand then use the spell on the resulting metals to create even more units. The picture below shows a\nsingle unit of metal 4 being converted into one unit of metal 1 and two units of metal\n2 using two spells with A}=1 and B}=2.\n\nMetals represented by larger integers are heavier and more difficult to handle, so you want\nto ask the expert miner for a single unit of metal represented by the smallest possible integer\nthat is sufficient to complete your task, or say that there is no such metal.\nThe first line of the input gives the number of test cases, T}.\nT} test cases follow. Each test case consists of two lines. The first line of a\ntest case contains three integers N}, A}, and B}, representing the largest\nmetal number that you are required to create, and the two values that define the\navailable spell as described above, respectively. The second line of a test case contains\nN} integers U_1}, U_2}, \\ldots, U_N}, representing the required units of\nmetals 1, 2, \\ldots, N}, respectively.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif it is not possible to create all required units starting from a single unit of metal.\nOtherwise, y is the smallest integer that represents a metal such that one unit of it\nis sufficient to create all the required units of metal.\nTime limit: 30 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= N} <= 20.0 <= U_i} <= 20, for all i.1 <= U_N}.2 <= U_1} + U_2} + *s + U_N}.\nA} = 1.B} = 2.\n1 <= A} < B} <= 20.\nIn Sample Case #1, we require one unit of metal 1 and two units of metal 2.\nIf we start with a single unit of metal 3, then applying the spell once will give us one\nunit of metal 1 and one unit of metal 2. There is no way to get an additional\nunit of metal 2. Similarly,\nstarting with a single unit of metals 1 or 2 is not sufficient.\nHowever, a single unit of metal 4 is sufficient as is demonstrated in the\npicture in the main part of the statement.\nIn Sample Case #2, we can start with a single unit of metal 6 and apply the following\n  operations:Apply spell on 6: \\{6\\} \\longrightarrow \\{4, 5\\}.Apply spell on 4: \\{4, 5\\} \\longrightarrow \\{2, 3, 5\\}.Apply spell on 2: \\{2, 3, 5\\} \\longrightarrow \\{1, 3, 5\\}.Apply spell on 3: \\{1, 3, 5\\} \\longrightarrow \\{1, 1, 2, 5\\}.Note that even though we have an extra unit of metal 2, this solution is valid.\nIn Sample Case #3, we can start with a single unit of metal 5 and apply the following\n  operations:Apply spell on 5: \\{5\\} \\longrightarrow \\{3, 4\\}.Apply spell on 4: \\{3, 4\\} \\longrightarrow \\{2, 3, 3\\}.Apply spell on 2: \\{2, 3, 3\\} \\longrightarrow \\{1, 3, 3\\}.Apply spell on 3: \\{1, 3, 3\\} \\longrightarrow \\{1, 1, 2, 3\\}.There are other ways to apply spells which also work but they all require starting\n  with a single unit of metal 5 or higher.\nIn the first Sample Case for Test Set 2, it is impossible to start with a single unit of any\n  metal and apply the spell with A}=2 and B}=4\n  several times and be left with one unit of metals 1, 2, and 3.\n",
        "input_description": "The first line of the input gives the number of test cases, T}.\nT} test cases follow. Each test case consists of two lines. The first line of a\ntest case contains three integers N}, A}, and B}, representing the largest\nmetal number that you are required to create, and the two values that define the\navailable spell as described above, respectively. The second line of a test case contains\nN} integers U_1}, U_2}, \\ldots, U_N}, representing the required units of\nmetals 1, 2, \\ldots, N}, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif it is not possible to create all required units starting from a single unit of metal.\nOtherwise, y is the smallest integer that represents a metal such that one unit of it\nis sufficient to create all the required units of metal.",
        "sample_input": "3\n3 2 4\n1 1 1\n3 2 4\n1 0 1\n5 2 5\n1 0 0 0 1",
        "sample_output": "Case #1: IMPOSSIBLE\nCase #2: 5\nCase #3: 10",
        "source": "2021\\round_1b\\subtransmutation"
    },
    {
        "problem_name": "Closest Pick",
        "problem_statement": "You are entering a raffle for a lifetime supply of pancakes.\nN} tickets have already been sold. Each ticket contains a single integer between\n1 and K}, inclusive. Different tickets are allowed to contain the same integer.\nYou know exactly which numbers are on all of the tickets already sold and would like to maximize\nyour odds of winning by purchasing two tickets (possibly with the same integer on them).\nYou are allowed to choose which integers between 1 and K}, inclusive, are\non the two tickets.\n\nYou know you are the last customer, so after you purchase your tickets, no more tickets will\nbe purchased. Then, an integer c between 1 and K}, inclusive, is\nchosen uniformly at random. If one of your tickets is strictly closer to c than\nall other tickets or if\nboth of your tickets are the same distance to c and strictly closer than all other tickets,\nthen you win the raffle.\nOtherwise, you do not win the raffle.\nGiven the integers on the N} tickets purchased so far, what is the maximum probability of\nwinning the raffle you can achieve by choosing the integers on your two tickets optimally?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of two lines. The first line of a test case contains two integers N}\nand K}: the number of tickets already sold and the limit of the range of integers to pick from,\nrespectively. The second line contains N} integers\nP_1}, P_2}, ..., P_N}, representing the integers on the tickets that have already\nbeen purchased.\nFor each test case, output one line containingCase #x: y,\nwherexis the test case number (starting from 1) andyis the maximum win probability you can achieve if you choose your tickets\noptimally.\nywill be considered correct if it is within an\nabsolute or relative error of 10^{-6} of the correct answer. See theFAQfor an explanation of what that means, and what formats of real numbers\nwe accept.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= N} <= 30.1 <= P_i} <= K}, for all i.\n1 <= K} <= 30.\n1 <= K} <= 10^9.\nIn Sample Case #1, you can purchase tickets with the integers 4 and 8 on them and\n  then win if 4, 5, 8, 9, or 10 are chosen giving you 5/10 = 0.5\n  probability of winning. Purchasing tickets with the integers 6 and 8 on them\n  also yields a 0.5 probability of winning, but no combination yields more.\nIn Sample Case #2, 6 and 8 is a possible optimal pair of tickets, which wins when\n  c is one of 6, 8, 9, or 10. Note that the integers on the tickets are not\n  necessarily given in sorted order.\nIn Sample Case #3, every possible c is at distance 0 from an already purchased ticket,\n  so you cannot win regardless of your choices.\nIn Sample Case #4, if you pick 3 for at least one of your tickets, you win on c = 3, for\n  1/4 = 0.25 win probability. There is no way to win when c is any other integer,\n  so that is the best you can do.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of two lines. The first line of a test case contains two integers N}\nand K}: the number of tickets already sold and the limit of the range of integers to pick from,\nrespectively. The second line contains N} integers\nP_1}, P_2}, ..., P_N}, representing the integers on the tickets that have already\nbeen purchased.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwherexis the test case number (starting from 1) andyis the maximum win probability you can achieve if you choose your tickets\noptimally.",
        "sample_input": "4\n3 10\n1 3 7\n4 10\n4 1 7 3\n4 3\n1 2 3 2\n4 4\n1 2 4 2",
        "sample_output": "Case #1: 0.5\nCase #2: 0.4\nCase #3: 0.0\nCase #4: 0.25",
        "source": "2021\\round_1c\\closest_pick"
    },
    {
        "problem_name": "Double or NOTing",
        "problem_statement": "You are given a starting non-negative integer S} and an ending non-negative integer E}.\n  Both S} and E} are given by their binary representation (that is, they are given written\n  in base 2).\n  Your goal is to transform S} into E}. The following two operations are available to you:\nFor example, by using the double operation, 6 becomes 12, 0 becomes 0,\n  and 10 becomes 20. By using the NOT operation,\n  0 becomes 1, 1 becomes 0, 3 = 11_2 becomes 0,\n  14=1110_2 becomes 1, 10=1010_2 becomes 5=101_2, and\n  5=101_2 becomes 2=10_2. (X_2 means the integer whose binary representation\n  is X).\nYou can use these operations as many times as you want in any order. For example, you can\n  transform S} = 10001_2 to E} = 111_2 using the NOT operation first,\n  then using the double operation twice, and then another NOT operation:\n  $10001_2 \\overset{\\text{NOT}}{\\Longrightarrow} 1110_2 \\overset{\\times 2}{\\Longrightarrow} 11100_2 \\overset{\\times 2}{\\Longrightarrow} 111000_2 \\overset{\\text{NOT}}{\\Longrightarrow} 111_2.$\nDetermine the smallest number of operations needed to complete the transformation, or say it is\n  impossible to do so.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\n  Each consists of a single line containing two strings S} and E}, the binary representations\n  of the starting and ending integers, respectively.\nFor each test case, output one line containingCase #x: y, where x\n  is the test case number (starting from 1) and y isIMPOSSIBLEif there is no way to transform S} into E} using the two operations. Otherwise, y\n  is the smallest number of operations needed to transform S} into E}.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.Each character of S} is either0or1.The first digit of S} can be0only if the length of S} is 1.Each character of E} is either0or1.The first digit of E} can be0only if the length of E} is 1.\n1 <= the length of S} <= 8.1 <= the length of E} <= 8.\n1 <= the length of S} <= 100.1 <= the length of E} <= 100.\nSample Case #1 is the example shown in the main part of the statement.\nThese are possible optimal ways of solving Sample Cases #2, #3, and #4, respectively:\n    $1011_2 \\overset{\\text{NOT}}{\\Longrightarrow} 100_2 \\overset{\\times 2}{\\Longrightarrow} 1000_2 \\overset{\\text{NOT}}{\\Longrightarrow} 111_2,$\n    $1010_2 \\overset{\\times 2}{\\Longrightarrow} 10100_2 \\overset{\\text{NOT}}{\\Longrightarrow} 1011_2, \\text{ and}$\n    $0_2 \\overset{\\text{NOT}}{\\Longrightarrow} 1_2.$In Sample Case #5, it is not possible to get from 0_2 to 101_2 with any sequence\n  of operations.In Sample Case #6, we do not need to perform any operations because S} = E}.\nIn Sample Case #5, it is not possible to get from 0_2 to 101_2 with any sequence\n  of operations.\nIn Sample Case #6, we do not need to perform any operations because S} = E}.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "6\n10001 111\n1011 111\n1010 1011\n0 1\n0 101\n1101011 1101011",
        "sample_output": "Case #1: 4\nCase #2: 3\nCase #3: 2\nCase #4: 1\nCase #5: IMPOSSIBLE\nCase #6: 0",
        "source": "2021\\round_1c\\double_or_noting"
    },
    {
        "problem_name": "Roaring Years",
        "problem_statement": "Something is happening in 2021 that has not happened in over a century.\n2021, like 1920 before it, is a roaring year.\nA year represented by a positive integer y is roaring if\nthe decimal writing (without leading zeroes) of y is the concatenation\nof the decimal writing (without leading zeroes) of two or more distinct consecutive\npositive integers, in increasing order. In this case, 2021 is a roaring year\nbecause it is the concatenation of 20 and 21.\nThree calendars from roaring years, marked to show how roaring their years are.\nOther examples of roaring years are\n12, 789, 910, 1234, and 9899100.\n2020 was not roaring because the only list of two or more positive integers\nthat concatenate into 2020 is [20, 20], and it is not made of consecutive\nintegers. Similarly, there are only three lists for 2019:\n[20, 1, 9], [201, 9], and [20, 19]. The first two are not made of consecutive\nintegers, while the third does\nnot have the integers in increasing order. Thus, 2019 was also not roaring. As a final\nexample, 778 was not a roaring year because [7, 78] and [77, 8] are not\nmade up of consecutive integers and [7, 7, 8] is not made up of distinct integers.\nGiven the current year (which may or may not be roaring),\nfind what the next roaring year is going to be.\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case and contains a single integer Y}, the current year.\nFor each test case, output one line containingCase #x: z,\nwhere x is the test case number (starting from 1) and z is the first\nyear strictly after Y} that is roaring.\nTime limit: 30 seconds.Memory limit: 1 GB.1 <= T} <= 100.\n1 <= Y} <= 10^6.\n1 <= Y} <= 10^{18}.\nNotice in the last Sample Case that 102 is not a roaring year because [10, 2] is not\na list of consecutive integers and you cannot write 2 with a leading zero to use\n[1, 02].\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case and contains a single integer Y}, the current year.",
        "output_description": "For each test case, output one line containingCase #x: z,\nwhere x is the test case number (starting from 1) and z is the first\nyear strictly after Y} that is roaring.",
        "sample_input": "4\n2020\n2021\n68000\n101",
        "sample_output": "Case #1: 2021\nCase #2: 2122\nCase #3: 78910\nCase #4: 123",
        "source": "2021\\round_1c\\roaring_years"
    },
    {
        "problem_name": "Hidden Pancakes",
        "problem_statement": "We are cooking N} pancakes in total. We cook one pancake with a 1 centimeter (cm) radius,\none with a 2 cm radius, one with a 3 cm radius, ..., and one with an N} cm radius,\nnot necessarily in that order. After we cook the first pancake, we just lay\nit on a plate. After we cook each subsequent pancake, we lay it on top of the previously made\npancake, with their centers coinciding. In this way, a pancake is visible from the top\nof the stack when we first add it. A pancake only becomes hidden if we later cook another pancake with\na larger radius.\nFor example, say we cook 4 pancakes. We first cook the pancake with\nradius 3 cm, and it is visible. Then, we cook the pancake with radius 1 cm, lay it\non top of the first one and both are visible. Third, we cook the pancake with radius 2 cm,\nand now that covers the previous pancake, but not the first one, so 2\npancakes remain visible in total. Finally, we cook the pancake with radius 4 cm\nwhich covers the other pancakes leaving only 1 visible pancake. The picture below illustrates\nthe state of the stack after each pancake is cooked. Within each stack, the fully\ncolored pancakes are visible and the semi-transparent pancakes are not visible.\n\nLet V_i} be the number of visible pancakes when the stack contains exactly i pancakes.\nIn the example above,\nV_1} = 1, V_2} = 2, V_3} = 2, and V_4} = 1.\nGiven the list V_1}, V_2}, ..., V_N}, how many of the N}! possible cooking orders\nyield those values? Since the output can be a really big number, we only ask you to output the\nremainder of dividing the result by the prime 10^9+7 (1000000007).\nThe first line of the input gives the number of test cases, T}. T} test cases follow,\neach described with two lines. The first line of a test case contains a single integer N},\nthe number of pancakes we cook. The second line of a test case contains N} integers\nV_1}, V_2}, ..., V_N}, representing the number of visible pancakes after we cook\n1, 2, ..., N} pancakes, respectively.\nFor each test case, output one line containingCase #x: y,\nwherexis the test case number (starting from 1) andyis the number of cooking orders of N} pancakes that yield the given numbers of visible pancakes\nafter each step, modulo the prime 10^9+7 (1000000007).\nMemory limit: 1 GB.1 <= T} <= 100.1 <= V_i} <= i, for all i.\nTime limit: 30 seconds.2 <= N} <= 13.\nTime limit: 40 seconds.2 <= N} <= 10^5.\nSample Case #1 is explained in the problem statement. The order 3, 1, 2, 4 is the only\n  one that yields the given V_i}s.\nIn Sample Case #2, both the order 1, 3, 2 and the order 2, 3, 1 yield the intended\n  V_i}s. The pictures below illustrate both options.\n\n\nIn Sample Case #3, only 1 pancake is visible after the second is made, so there is no way\n  to have more than 2 visible pancakes by only adding a third.\nIn the Sample Case for Test Set 2, there are 316234143225 cooking orders that yield the\n  given V_i}s. Modulo 10^9+7, this value is 234141013.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow,\neach described with two lines. The first line of a test case contains a single integer N},\nthe number of pancakes we cook. The second line of a test case contains N} integers\nV_1}, V_2}, ..., V_N}, representing the number of visible pancakes after we cook\n1, 2, ..., N} pancakes, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwherexis the test case number (starting from 1) andyis the number of cooking orders of N} pancakes that yield the given numbers of visible pancakes\nafter each step, modulo the prime 10^9+7 (1000000007).",
        "sample_input": "1\n24\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2",
        "sample_output": "Case #1: 234141013",
        "source": "2021\\round_2\\hidden_pancakes"
    },
    {
        "problem_name": "Matrygons",
        "problem_statement": "Amatryoshkais a type of doll that originated in Russia over a century ago. Their\ndefining characteristic is that they consist of a set of dolls, all of a different size, with\nsmaller dolls fitting nicely inside larger dolls.\nIn this problem, we work with matrygons, which are sets ofregular convex polygonsthat follow\na similar nesting pattern. A matrygon consists of a set of regular convex polygons with positive area\np_1, p_2, ..., p_k such that, for all i,\nthe vertices of p_{i+1} overlap with a proper subset of the vertices of p_i\n(p_{i+1} has strictly less vertices than p_i).\nFor example, the following pictures illustrates two matrygons.\nThe first one contains 3 regular convex polygons:\na regular icositetragon (24 sides), a regular hexagon (6 sides), and an\nequilateral triangle (3 sides). The second one contains 2 regular convex polygons:\na regular icosidigon (22 sides) and a regular hendecagon (11 sides).\nEach of these matrygons has 33 total sides among all polygons in it.\n\nGiven a fixed total number of sides N}, calculate the largest number\nof polygons that can be part of a matrygon such that the total number of sides among\nall polygons in it is exactly N}.\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case and contains a single integer N}, the target total\nnumber of sides.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nnumber of polygons in a matrygon such that the total number of sides among\nall polygons in it is exactly N}.\nMemory limit: 1 GB.1 <= T} <= 100.\nTime limit: 20 seconds.3 <= N} <= 1000.\nTime limit: 40 seconds.3 <= N} <= 10^6.\nThe first matrygon pictured in the problem statement is an optimal solution for Sample Case #1.\nIn Sample Case #2, we can get to two polygons by fitting a regular pentagon (5 sides)\n  inside a regular decagon (10 sides).\nIn Sample Case #3, there is no way to create a matrygon with multiple regular polygons, so\n  our only option is to use a single regular tetracontahenagon (41 sides).\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case and contains a single integer N}, the target total\nnumber of sides.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nnumber of polygons in a matrygon such that the total number of sides among\nall polygons in it is exactly N}.",
        "sample_input": "3\n33\n15\n41",
        "sample_output": "Case #1: 3\nCase #2: 2\nCase #3: 1",
        "source": "2021\\round_2\\matrygons"
    },
    {
        "problem_name": "Minimum Sort",
        "problem_statement": "In this problem, you need to sort a list of N} = 100 distinct integers in strictly\nincreasing order. You can rearrange the list by swapping the contents of any two positions\n(they do not need to be adjacent). Unfortunately, you cannot read those contents directly.\nYou can access information about the list contents by querying the minimum of a range.\nThe minimum query gives you\nthepositionof the minimum value over a range of consecutive positions.\nFor example, in the list [51, 33, 100, 11], the minimum over the range between\npositions 2 and 4, inclusive (1-based), is at position\n4 and the minimum between positions 1 and 3 is at position 2.\nQueries about the minimum within a range are limited by a coin budget per test case.\nLarger ranges are cheaper: asking about the position of the minimum\nbetween positions i and j (for i < j)\ncosts \\lceil 10^8 / (j - i + 1) \\rceil coins, where \\lceil x \\rceil is\nthe smallest integer greater than or equal to x (that is, x rounded up).\nSwap operations, on the other hand, do not cost any coins.\nWrite a program that sorts lists of integers using any number of swaps and at most\n6 \\times 10^8 coins per test case distributed among any number of minimum queries.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, the judge will send you a single line containing two integers T} and N}:\n  the number of test cases and the number of elements to sort within each test case,\n  respectively. The judge has the initial lists preset before it gets any input\n  from your program, and the only changes done to them during the exchanges with\n  your program are the swaps that you request.\nThen, you must process T} test cases. Each test case consists of a series of exchanges\n  plus an additional line indicating you are done. Each exchange consists of you printing\n  one line and the judge printing one line in response.\n  Your program must print a single line containing one of these options:\nAfter the judge responds1to aD, it will finish\n  if it was the last test case or it will immediately start waiting for your first\n  command for the next test case. After receiving the judge's response for the\n  T}-th case, your program must finish in order to not receive a Time Limit Exceeded\n  error.\nIf the judge receives an invalidly formatted line or invalid values from your\n  program at any moment, including a minimum operation whose cost would exceed\n  your remaining budget for the test case, the judge will print a single number-1.\n  After the judge prints-1for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a-1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nTime limit: 60 seconds.Memory limit: 1 GB.\nT} = 100.N} = 100.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2021\\round_2\\minimum_sort"
    },
    {
        "problem_name": "Retiling",
        "problem_statement": "Cody-Jamal's latest artistic installment is a tiled kitchen floor that can be retiled to different\npatterns. The floor consists of a matrix of R} rows and C} columns of square tiles. Each tile is\nreversible, one side is magenta and the other one is green.\nTo retile the kitchen, there are two allowed operations:flip a tile, changing its visible color from magenta to green, or vice versa, andswap two adjacent tiles (horizontally or vertically, but not diagonally),\n  without flipping either.\nViewing Cody-Jamal's artistic floor is free, but interacting with it is not.\nPerforming a single flip operation costs F} coins, and performing a single\nswap operation costs S} coins.\nYou can see the current state of the floor and want to turn it into a particular pattern.\nWhat is the minimum amount of coins you need to spend to achieve your goal?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nThe first line of a test case contains 4 integers: R}, C}, F} and S}, the number of rows\nand columns of the floor, the cost in coins of flipping and the cost in coins of swapping,\nrespectively. Then, 2 * R} lines follow. The first R} lines contain C} characters\neach. The j⁠-th character of the i⁠-th of these lines represents the current state\nof the tile in the i⁠-th row and j⁠-th column. The character isMif the currently visible side is magenta andGotherwise.\nThe last R} lines also contain C} characters each.\nThe j⁠-th character of the i⁠-th of these lines represents the color you want\nfor the tile in the i⁠-th row and j⁠-th column, using the same character code\nas for the current state.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y\nis the minimum amount of coins you need to spend to perform operations that allow you to\nchange the tile colors from their current state to your intended one.\nTime limit: 40 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= R} <= 10.1 <= C} <= 10.\nF} = 1.S} = 1.\n1 <= F} <= 10^6.1 <= S} <= 10^6.\nIn Sample Case #1, there are 5 tiles that have a different color between the current\nand the desired states of the floor. Since each operation can change at most 2 tiles,\nat least 3 operations, costing 3 coins, are needed. One way to do it with\nexactly 3 coins is:\nThe picture below illustrates the states the floor goes through. The highlighted tile or tiles\nin each state are the ones being changed by the operation.\n\nIn Sample Case #2, there are 6 tiles that need changing. However, since only swaps\ncan change two tiles at a time, solving it with 3 operations would require all\nof them to be swaps. There is no way to involve all 6 tiles in a single swap each,\nso we need at least 4 operations. One way to use exactly 4 operations is:\nThe picture below illustrates the states the floor goes through.\n\nIn the Sample Case for Test Set 2, flips are so expensive that we want to avoid them at\nall costs. We need at least one since our desired floor state has more magenta tiles than\nthe current one, and swaps do not change that amount. We can do it optimally with just\none flip like this:\nThe picture below illustrates all the states the floor goes through.\n\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nThe first line of a test case contains 4 integers: R}, C}, F} and S}, the number of rows\nand columns of the floor, the cost in coins of flipping and the cost in coins of swapping,\nrespectively. Then, 2 * R} lines follow. The first R} lines contain C} characters\neach. The j⁠-th character of the i⁠-th of these lines represents the current state\nof the tile in the i⁠-th row and j⁠-th column. The character isMif the currently visible side is magenta andGotherwise.\nThe last R} lines also contain C} characters each.\nThe j⁠-th character of the i⁠-th of these lines represents the color you want\nfor the tile in the i⁠-th row and j⁠-th column, using the same character code\nas for the current state.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y\nis the minimum amount of coins you need to spend to perform operations that allow you to\nchange the tile colors from their current state to your intended one.",
        "sample_input": "1\n1 5 1000 1\nMGGGG\nGGGMM",
        "sample_output": "Case #1: 1003",
        "source": "2021\\round_2\\retiling"
    },
    {
        "problem_name": "Binary Search Game",
        "problem_statement": "Alice and Bob are going to play the Binary Search game. The game is played on a board\n  consisting of a single row of 2^L} cells.\n  Each cell contains an integer between 1 and N}, inclusive. There are also N} cards\n  numbered 1 through N}. Before the game starts, the referee writes an integer between\n  1 and M}, inclusive, on each card, in one of the M}^N} ways in which that\n  can be done. Alice and Bob know the integers in the cells and\n  on each card before they start playing.\nThe game proceeds alternating turns, with Alice having the first turn. There are L} turns in\n  total, which means Alice plays \\lceil L} / 2 \\rceil turns and Bob plays\n  \\lfloor L} / 2 \\rfloor turns. During a turn, a player can eliminate either the leftmost\n  half or the rightmost half of the remaining cells. For example, let us consider a board\n  that contains the numbers [2, 4, 1, 1, 4, 5, 2, 5]. In her first turn,\n  Alice must choose to eliminate one half, leaving either\n  [2, 4, 1, 1] or [4, 5, 2, 5]. If she eliminates the leftmost half and leaves\n  [4, 5, 2, 5], then Bob must choose between leaving [4, 5] and [2, 5].\n  If he were to leave [2, 5], the game's final turn would have Alice choosing between\n  [2] and [5].\nWhen the game is over, they look at the number X in the only remaining cell.\n  Thescoreof the game is the integer written on card number X.\n  In the example above, if Alice were to eliminate [5] and leave [2] in her final turn,\n  the score of the game would be the number the referee wrote on card number 2.\n\nAlice plays optimally to maximize the score of the game, while Bob plays optimally to minimize it.\n  They are given a fixed board with integers A_1}, A_2}, ... A_{2^L}} in its cells.\n  For maximal fairness, they will play M}^N} games, and the referee will choose a\n  different way to write integers on the cards for each one. That means that for any given way\n  of writing integers on the cards, Alice and Bob will play exactly one game with it.\n  Given the game parameters and the fixed board contents,\n  please determine the sum of the scores of all those games.\n  Since the output can be a really big number, we only ask you to output the remainder of dividing\n  the result by the prime 10^9+7 (1000000007).\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\n  Each test case consists of exactly two lines.\n  The first line of each test case contains the three integers N}, M}, and L}.\n  The second line contains 2^{L}} integers A_1}, A_2}, ..., A_{2^L}},\n  where A_i} is the integer contained in the i-th cell from the left of\n  the board.\nFor each test case, output one line containingCase #x: y,\n  where x is the test case number (starting from 1) and y is\n  the sum of scores of all M}^{N}} games, modulo the prime 10^9+7 (1000000007).\nTime limit: 30 seconds.Memory limit: 1 GB.1 <= T} <= 12.1 <= L} <= 5.1 <= A_i} <= N}, for all i.\n1 <= N} <= 8.1 <= M} <= 100.\n1 <= N} <= 32.1 <= M} <= 10^9.\nIn Sample Case #1, there are 4 ways to write the integers on the blank cards:\n  [1, 1], [1, 2], [2, 1], and [2, 2]. In the first two\n  ways, no matter what Alice chooses in her first turn, Bob can always make the number in the\n  last remaining cell be a 1, and card 1 contains a 1, which means\n  those two games have a score of 1.\n  In the last two ways, Alice can start by eliminating the leftmost half of the board, leaving\n  [1, 1] for Bob, who then has no choice but to leave [1] at the end.\n  Since card 1 has a 2 on it in these ways, the score of both of these games\n  is 2. The sum of all scores is therefore 1+1+2+2=6.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\n  Each test case consists of exactly two lines.\n  The first line of each test case contains the three integers N}, M}, and L}.\n  The second line contains 2^{L}} integers A_1}, A_2}, ..., A_{2^L}},\n  where A_i} is the integer contained in the i-th cell from the left of\n  the board.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  where x is the test case number (starting from 1) and y is\n  the sum of scores of all M}^{N}} games, modulo the prime 10^9+7 (1000000007).",
        "sample_input": "3\n2 2 2\n2 1 1 1\n4 3 2\n3 1 1 4\n5 100 3\n2 4 1 1 4 5 2 5",
        "sample_output": "Case #1: 6\nCase #2: 144\nCase #3: 991661422",
        "source": "2021\\round_3\\binary_search_game"
    },
    {
        "problem_name": "Build-A-Pair",
        "problem_statement": "You want to build a pair of positive integers. To do that, you are given a list of decimal\ndigits to use. You must use every digit in the list exactly once, but you get to choose which ones\nto use for the first integer and which ones to use for the second integer.\nYou also get to choose the order of the digits within each integer, except you cannot put a zero\nas the most significant (leftmost) digit in either integer. Note that you cannot choose just\na zero for one integer either, because it would not be positive.\nFor example, you could be given the list [1, 0, 2, 0, 4, 3]. Two of the valid pairs you can\nbuild are (200, 143) and (3, 12400). The following pairs, on the other hand,\nare not valid:(0102, 34): has a leading zero.(0, 12340): has a non-positive integer.(10, 243) and (12300, 47): the list of digits in each of these pairs is not\n  exactly equal to the given list of digits.\nGiven the list of digits to use, what is the minimum absolute difference between the two built\nintegers that can be achieved?\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case with a single string of digits D}. Each character of D} is\na digit you must use.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y\nis the minimum possible absolute difference between the two integers built from D}\naccording to the rules above.\nTime limit: 5 seconds.Memory limit: 1 GB.1 <= T} <= 100.Each character of D} is a decimal digit.At least two characters of D} are not0.\n2 <= the length of D} <= 8.\n2 <= the length of D} <= 36.\nThe optimal pair of integers to build are 31 and 24 for Sample Case #1,\n  10 and 10 for Sample Case #2, 700 and 80 for Sample Case #3,\n  and 89 and 90 for Sample Case #4.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line describes a test case with a single string of digits D}. Each character of D} is\na digit you must use.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y\nis the minimum possible absolute difference between the two integers built from D}\naccording to the rules above.",
        "sample_input": "4\n1234\n0011\n07080\n0899",
        "sample_output": "Case #1: 7\nCase #2: 0\nCase #3: 620\nCase #4: 1",
        "source": "2021\\round_3\\build-a-pair"
    },
    {
        "problem_name": "Fence Design",
        "problem_statement": "You are hired as a temporary employee of the Fence Construction Company and have\nbeen tasked with finishing the design of the fencing for a field.\nEach fence must run in a straight line between two poles.\nEach pole occupies a single point and the location of each pole is fixed.\nNo three poles are collinear.\nFences cannot intersect each other, except possibly at their endpoints (the poles).\nThe design was started by someone else, but they quit the project after adding exactly\ntwo fences. You need to finish their design. To impress your bosses and clients,\nyou want the design to have as many fences as possible, regardless of\ntheir lengths.\nGiven the positions of the poles and the already-built fences, please find a way to add\nas many fences as possible such that no pair of fences (new or existing)\nintersect each other, except possibly at their endpoints (the poles).\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a single line containing an integer N}, indicating the number of poles.\nThen, N} lines follow. The i-th of these lines contains two integers\nX_i} and Y_i}, representing the X and Y coordinates of the i-th pole's position.\nThe last two lines for each test case represent the two existing fences. These two\nlines contain two integers each: P_k} and Q_k}, representing\nthat the k-th existing fence runs between the P_k}-th and the Q_k}-th pole\n(poles are numbered starting from 1).\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nnumber of fences that can be added to the design (not including the existing ones).\nThen, output y more lines. Each line must contain two distinct integers\ni and j (both between 1 and N}, inclusive),\nrepresenting a different fence that connects the i-th and j-th poles.\nNo pair of the y+2 fences (the existing fences as well as the ones\nyou have added) may overlap, except possibly at their endpoints.\nMemory limit: 1 GB.1 <= T} <= 50.-10^9 <= X_i} <= 10^9, for all i.-10^9 <= Y_i} <= 10^9, for all i.(X_i}, Y_i}) != (X_j}, Y_j}), for all i != j.1 <= P_k} < Q_k} <= N}, for all k.The existing fences do not intersect, except possibly at their endpoints.No three poles are collinear.\nTime limit: 60 seconds.4 <= N} <= 100.\nTime limit: 90 seconds.4 <= N} <= 10^5.\nThe following pictures show the poles and fences in the given samples. The fences with the wider\nblue line on them are the existing ones, and the rest show the way of adding a maximum number of\nfences shown in the sample output.\n\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a single line containing an integer N}, indicating the number of poles.\nThen, N} lines follow. The i-th of these lines contains two integers\nX_i} and Y_i}, representing the X and Y coordinates of the i-th pole's position.\nThe last two lines for each test case represent the two existing fences. These two\nlines contain two integers each: P_k} and Q_k}, representing\nthat the k-th existing fence runs between the P_k}-th and the Q_k}-th pole\n(poles are numbered starting from 1).",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nnumber of fences that can be added to the design (not including the existing ones).\nThen, output y more lines. Each line must contain two distinct integers\ni and j (both between 1 and N}, inclusive),\nrepresenting a different fence that connects the i-th and j-th poles.\nNo pair of the y+2 fences (the existing fences as well as the ones\nyou have added) may overlap, except possibly at their endpoints.",
        "sample_input": "2\n4\n0 0\n0 1\n1 1\n1 0\n1 2\n3 4\n5\n0 0\n0 1\n1 1\n1 0\n2 3\n1 2\n3 5",
        "sample_output": "Case #1: 3\n1 4\n2 3\n4 2\nCase #2: 6\n5 4\n2 4\n5 2\n1 4\n4 3\n3 2",
        "source": "2021\\round_3\\fence_design"
    },
    {
        "problem_name": "Square Free",
        "problem_statement": "We have a matrix of square cells with R} rows and C} columns. We need to draw a diagonal in each\ncell. Exactly one of two possible diagonals must be drawn in each cell: theforward slashdiagonal, which connects the bottom-left and the top-right corners of the cell,\nor thebackslashdiagonal, which connects the top-left and the bottom-right\ncorners of the cell.\nFor each row and column, we want to draw a specific number of\ndiagonals of each type. Also, after all the diagonals are drawn, the matrix should besquare free. That is, there should be no squares formed using the diagonals we added.\nFor example, suppose we have a matrix with 4 rows and 4 columns.\nThe number next to each row is the exact number of forward slash diagonals there must be in\nthat row. The number below each column is the exact number of forward slash diagonals\nthere must be in that column.\n\nThere are multiple ways to fill the matrix respecting those per-row and per-column amounts.\nBelow we depict three possibilities:\nThe first two matrices are not square free, while the third matrix is.\nIn the first matrix, there is a square of side-length 2 diagonals with its vertices in the\nmiddle of each side of the matrix. In the second matrix, there is a square of side-length 1\ndiagonal drawn in the bottom-right corner. In the third matrix, there is no square.\nThe third matrix would then be a valid drawing according to all the rules.\nGiven the size of the matrix and the exact number of forward slash diagonals that must be drawn\nin each row and column, produce any square free matrix that satisfies the row and column\nconstraints, or say that one does not exist.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of exactly three lines. The first line of a test case contains\nR} and C}, the number of rows and columns of the matrix. The second line\nof a test case contains R} integers S_1}, S_2}, ..., S_R}. S_i}\nis the exact number of forward slash diagonals that\nmust be drawn in the i⁠-⁠th row from the top. The third line\nof a test case contains C} integers D_1}, D_2}, ..., D_C}. D_i}\nis the exact number of forward slash diagonals that\nmust be drawn in the i⁠-⁠th column from the left.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif there is no filled matrix that follows all rules\nandPOSSIBLEotherwise. If you outputPOSSIBLE,\noutput R} more lines with C} characters each.\nThe j⁠-⁠th character of the i⁠-⁠th of these lines\nmust be/if the diagonal drawn in the i⁠-⁠th row from the top\nand j⁠-⁠th column from the left in your proposed matrix is a forward slash\ndiagonal, and\\otherwise. Your proposed matrix must be valid according to\nall rules.\nTime limit: 15 seconds.Memory limit: 1 GB.1 <= T} <= 100.0 <= S_i} <= C}, for all i.0 <= D_i} <= R}, for all i.\n2 <= R} <= 6.2 <= C} <= 6.\n2 <= R} <= 20.2 <= C} <= 20.\nSample Case #1 is the one explained above.\nIn Sample Case #2, there must be a total of 2 forward slash diagonals according to the\n  sum of the row totals, but a total of 3 according to the sum of the column totals. It\n  is therefore impossible to follow all rules.\nIn Sample Case #3 the only matrices that follow the row and column totals are the following:\nSince the first two contain a square, the third one is the only valid output for this case.\nIn Sample Case #4 there is only one way to fill the matrix that follows the row and column\n  totals, shown in the picture below. Note that it produces a single rectangle,\n  shown in blue in the picture. But, since that rectangle is not a square, the matrix is\n  square free.\n\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of exactly three lines. The first line of a test case contains\nR} and C}, the number of rows and columns of the matrix. The second line\nof a test case contains R} integers S_1}, S_2}, ..., S_R}. S_i}\nis the exact number of forward slash diagonals that\nmust be drawn in the i⁠-⁠th row from the top. The third line\nof a test case contains C} integers D_1}, D_2}, ..., D_C}. D_i}\nis the exact number of forward slash diagonals that\nmust be drawn in the i⁠-⁠th column from the left.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif there is no filled matrix that follows all rules\nandPOSSIBLEotherwise. If you outputPOSSIBLE,\noutput R} more lines with C} characters each.\nThe j⁠-⁠th character of the i⁠-⁠th of these lines\nmust be/if the diagonal drawn in the i⁠-⁠th row from the top\nand j⁠-⁠th column from the left in your proposed matrix is a forward slash\ndiagonal, and\\otherwise. Your proposed matrix must be valid according to\nall rules.",
        "sample_input": "4\n4 4\n3 2 3 3\n3 3 2 3\n2 3\n1 1\n1 1 1\n2 3\n1 2\n1 1 1\n3 3\n2 0 2\n2 0 2",
        "sample_output": "Case #1: POSSIBLE\n//\\/\n\\/\\/\n///\\\n/\\//\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\n\\\\/\n//\\\nCase #4: POSSIBLE\n/\\/\n\\\\\\\n/\\/",
        "source": "2021\\round_3\\square_free"
    },
    {
        "problem_name": "Cutting Cake",
        "problem_statement": "Today is your and your twin sibling's birthday. To celebrate, you got a rectangular cake to share.\nThe cake is decorated with N} triangular patches of icing (which may overlap). All the icing\npatches were created with the same triangular mold, so they have the same shape and orientation.\nAlthough you and your twin are very similar, your tastes in icing are much different.\nThis difference is formalized by each of you having a different enjoyment value for each patch of\nicing. Specifically, your enjoyment value for eating the entire i⁠-⁠th patch\nof icing is A_i}, and your twin's is B_i}. If someone eats part of a patch, they get\nenjoyment proportional to the eaten area. For example, if you eat\n\\frac{2}{3} of the area of the i⁠-⁠th icing patch, you would get\n\\frac{2A_i}}{3} enjoyment from it.\nNote that there may be some flavors of icing that you or your twin do not enjoy, so the A_i}\nand/or B_i} values can be negative.\nYou will cut the cake into two rectangular pieces by making a single vertical cut\n(parallel to the Y-axis). After cutting the cake, you will eat the left piece and your twin will\neat the right piece.\nYour total enjoyment is the sum of the enjoyment you get from all icing to the left of the cut.\nSimilarly,\nyour twin's enjoyment is the sum of the enjoyment they get from all icing to the right of the cut.\nTo be as fair as possible, you want to cut the cake such that\nthe absolute value of the difference between your total enjoyment and your twin's total enjoyment\nis as small as possible.\nGiven the N} triangular icing patches on a rectangular cake, what is the minimum possible\nabsolute value of the difference between your and your twin's total enjoyments\nyou can get?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three positive integers, N}, W}, and H},\nrepresenting the number of icing patches on the cake and the width and height of the top of the\ncake, respectively. The bottom-left corner of the cake is\nlocated at (0, 0) and the top-right corner is at (W}, H}).\nThen, a line describing the icing patch mold follows. This line contains four integers:\nP}, Q}, R}, and S}. The icing patch mold is a triangle with vertices at (0, 0),\n(P}, Q}), and (R}, S}).\nThen, N} lines follow. The i⁠-⁠th of these lines contains four integers\nX_i}, Y_i}, A_i}, and B_i}. The i⁠-⁠th patch is a triangle with vertices\nat (X_i}, Y_i}), (X_i} + P}, Y_i} + Q}),\nand (X_i} + R}, Y_i} + S}). You would get A_i} enjoyment from eating it and your twin\nwould get B_i} enjoyment.\nFor each test case, output one line containingCase #x: y/z,\nwhere x is the test case number (starting from 1) and \\frac{y}{z} is the minimum\nabsolute value of the difference between your and your twin's total enjoyment that can be achieved\nwith a single vertical cut as an irreducible fraction (that is, z must be positive and of\nminimum possible value).\nTime limit: 45 seconds.Memory limit: 1 GB.\n1 <= T} <= 100.1 <= N} <= 100.3 <= W} <= 10^9.3 <= H} <= 10^9.-10^9 <= A_i} <= 10^9, for all i.-10^9 <= B_i} <= 10^9, for all i.0 <= P} <= 10^9.-10^9 <= Q} <= 10^9.0 <= R} <= 10^9.-10^9 <= S} <= 10^9.The three vertices of the mold (0, 0), (P}, Q}), and (R}, S})\n  are not collinear.The three vertices of each triangular icing patch are strictly inside the cake's borders.\nFormally:1 <= X_i} <= W} - \\max(P}, R}) - 1, for all i, and\\max(0, -Q}, -S}) + 1 <= Y_i} <= H} - \\max(0, Q}, S}) - 1, for all i.\nIn Sample Case #1, there is a single icing patch. The optimal cut is to the left of the patch.\nYou will eat no icing and receive 0 enjoyment. Your twin will eat all of the icing patch\nand receive 5 enjoyment from it.\nThe absolute value of the difference between your and your twin's enjoyments is |0 - 5| = 5.\nIn Sample Case #2, there are two icing patches. The optimal cut is at X = 15099999.99.\nNotice that the numerator and denominator of the answer can get very large.\nIn Sample Case #3, there are two icing patches. The optimal cut is at X = 4. You will eat\n75% of the first icing patch and receive -3 enjoyment from it. Your twin will eat 25% of the\nfirst icing patch and all of the second icing patch getting 5 * 0.25 + 5 = 6.25\nenjoyment. The absolute value of the difference between your and your twin's enjoyments is\n|-3 - 6.25| = 9.25 = \\frac{37}{4}.\nNotice that cutting at X = 1 would give you\n0 enjoyment and your twin 10 enjoyment. While both of those values are greater\nthan the corresponding enjoyment when cutting at X = 4, the difference between them\nis 10 > 9.25, which means cutting at X = 4 is preferable anyway.\nIn Sample Case #4, there are three icing patches. The optimal cut is at\nX \\approx 521241077.6027.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three positive integers, N}, W}, and H},\nrepresenting the number of icing patches on the cake and the width and height of the top of the\ncake, respectively. The bottom-left corner of the cake is\nlocated at (0, 0) and the top-right corner is at (W}, H}).\nThen, a line describing the icing patch mold follows. This line contains four integers:\nP}, Q}, R}, and S}. The icing patch mold is a triangle with vertices at (0, 0),\n(P}, Q}), and (R}, S}).\nThen, N} lines follow. The i⁠-⁠th of these lines contains four integers\nX_i}, Y_i}, A_i}, and B_i}. The i⁠-⁠th patch is a triangle with vertices\nat (X_i}, Y_i}), (X_i} + P}, Y_i} + Q}),\nand (X_i} + R}, Y_i} + S}). You would get A_i} enjoyment from eating it and your twin\nwould get B_i} enjoyment.",
        "output_description": "For each test case, output one line containingCase #x: y/z,\nwhere x is the test case number (starting from 1) and \\frac{y}{z} is the minimum\nabsolute value of the difference between your and your twin's total enjoyment that can be achieved\nwith a single vertical cut as an irreducible fraction (that is, z must be positive and of\nminimum possible value).",
        "sample_input": "4\n1 5 5\n3 -1 2 2\n1 2 -10 5\n2 100000000 50000000\n80000000 0 40000000 40000000\n5000001 2500000 500 -501\n15000000 5000000 501 -400\n2 10 10\n0 2 4 2\n2 2 -4 5\n4 6 -6 5\n3 622460462 608203753\n486076103 36373156 502082214 284367873\n98895371 126167607 823055173 -740793281\n26430289 116311281 -398612375 -223683435\n46950301 278229490 766767410 -550292032",
        "sample_output": "Case #1: 5/1\nCase #2: 288309900002019999899/320000000000000000\nCase #3: 37/4\nCase #4: 216757935773010988373334129808263414106891/187470029508637421883991794137967",
        "source": "2021\\world_finals\\cutting_cake"
    },
    {
        "problem_name": "Divisible Divisions",
        "problem_statement": "We have a string S} consisting of decimal digits. Adivisionof S} is created by\ndividing S} into contiguous substrings.\nFor example, if S} is0145217, two possible divisions are014 5 21 7and0 14 52 17. Each digit must be used in exactly one\nsubstring, and each substring must be non-empty. If S} has L digits, then there are exactly\n2^{L-1} possible divisions of it.\nGiven a positive integer D}, a division of S} is calleddivisibleby D} if for every\npair of consecutive substrings, at least one of the integers they represent in base 10\nis divisible by D}.\nIf D}=7, the first example division above is divisible because014,21, and7represent integers divisible by 7. The second example\ndivision is not divisible because52and17are consecutive substrings\nand neither represents an integer divisible by 7. Dividing0145217as0145217is divisible by any D} because there are no pairs of consecutive substrings.\nGiven S} and D}, count how many divisions of S} exist that are divisible by D}.\nSince the output can be a really big number, we only ask you to output the remainder\nof dividing the result by the prime 10^9+7 (1000000007).\nThe first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case with a string of digits S} and a positive integer D}, as\nmentioned above.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of\ndifferent divisions of S} that are divisible by D}, modulo the prime\n10^9+7 (1000000007).\nTime limit: 60 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= D} <= 10^6.\n1 <=  the length of S} <= 1000.\n1 <=  the length of S} <= 10^5.\nIn Sample Case #1, all 16 divisible divisions of S} are:0145217,0 145217,0 14 5217,0 14 5 217,0 14 5 21 7,0 14 521 7,0 145 217,0 145 21 7,0 14521 7,014 5217,014 5 217,014 5 21 7,014 521 7,0145 217,0145 21 7, and014521 7.\nIn Sample Case #2, there are 2^5=32 ways to divide in total. To get two consecutive\n  substrings to not be divisible by 10, we need both of them to not end in 0. The\n  only 2 ways of doing that are1 001 00and1 001 0 0, which\n  means the other 30 divisions of S} are divisible by 10.\nIn Sample Case #3, no possible substring represents an even integer, which in turn means\n  it is not divisible by 12. Therefore, the only way to not have two consecutive substrings\n  that are not divisible by 12 is to not have two consecutive substrings at all, which\n  can be done in only 1 way:5555.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow.\nEach line represents a test case with a string of digits S} and a positive integer D}, as\nmentioned above.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of\ndifferent divisions of S} that are divisible by D}, modulo the prime\n10^9+7 (1000000007).",
        "sample_input": "3\n0145217 7\n100100 10\n5555 12",
        "sample_output": "Case #1: 16\nCase #2: 30\nCase #3: 1",
        "source": "2021\\world_finals\\divisible_divisions"
    },
    {
        "problem_name": "Infinitree",
        "problem_statement": "This problem is about finding the distance between two nodes of a strictly binary tree. Oh, is\nthat too easy?! Ok, the tree is potentially infinite now. Keep it up and we will start going up\nthe aleph numbers.\nIn this problem, a tree is either a single node X, or a node X with two\ntrees attached to it: a left subtree and a right subtree. In both cases, X\nis the root of the tree. If the tree is not a single node,\nthe roots of both the left and right subtrees are the only children of X.\nThere is a set of colors numbered from 0 to N}, inclusive.\nEach node is of exactly one color.\nThere might be zero, one, or  multiple nodes of each\ncolor. Each node of color 0 (white) is a leaf node (that is, it\nhas no children).\nEach node of color i, for 1 <= i <= N}, has exactly 2\nchildren: the left one is color L_i} and the right one is color R_i}.\nThe root of the tree is color 1 (black).\nNote that the tree may have a finite or countably infinite number of nodes.\nFor example, the following picture illustrates a finite tree defined by the lists\nL} = [3, 0, 0] and R} = [2, 0, 2]. Color 2 is blue and color 3 is yellow.\n\nThe distance between two nodes in the tree is the minimum number of steps that are needed to get\nfrom one node to the other. A step is a move from a node to its direct parent or its direct\nchild.\nNodes in the tree are indexed using positive integers. The root has index 1. Then, other\nnodes are indexed using consecutive integers, with nodes with smaller distances to the root being\nindexed\nfirst. For nodes that are equidistant to the root, nodes that are further to the left\nare indexed first. For example, the following picture adds indices to each node in the tree\nwe presented before. Notice that each node's index is independent from its color.\n\nAs another example, the following picture shows the first 33 nodes of an infinite tree\ndefined by the lists L} = [3, 4, 2, 4] and R} = [2, 2, 4, 0]. Color 4 is green.\n\nGiven the lists L} and R} that define a tree and the indices of two different nodes in the tree,\nreturn the distance between those two nodes.\nThe first line of the input gives the number of test cases, T}.\nT} test cases follow. Each test case consists of three lines. The first line contains\nN}, A}, and B}: the size of the lists that define the tree, and the indices of the two\nnodes whose distance you need to calculate, respectively.\nThe second line contains N} integers\nL_1}, L_2}, ..., L_N}\nand the third line contains N} integers\nR_1}, R_2}, ..., R_N}, as described above.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe distance between the nodes with indices A} and B} in the tree defined by the lists L}\nand R}.\nTime limit: 90 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= N} <= 50.0 <= L_i} <= N}.0 <= R_i} <= N}.A} < B} <= 10^{18}.The tree defined by L} and R} has at least B} nodes.\nA} = 1.\n1 <= A} <= 10^{18}.\nThe tree in Sample Cases #1 and #2 is the first tree shown in the statement. The tree\n  in Sample Cases #3 and #4 is the last tree shown in the statement. The same is true for the\n  additional samples below. In Sample Case #5, notice that some colors may not be present in the\n  tree.\n",
        "input_description": "The first line of the input gives the number of test cases, T}.\nT} test cases follow. Each test case consists of three lines. The first line contains\nN}, A}, and B}: the size of the lists that define the tree, and the indices of the two\nnodes whose distance you need to calculate, respectively.\nThe second line contains N} integers\nL_1}, L_2}, ..., L_N}\nand the third line contains N} integers\nR_1}, R_2}, ..., R_N}, as described above.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe distance between the nodes with indices A} and B} in the tree defined by the lists L}\nand R}.",
        "sample_input": "4\n3 5 7\n3 0 0\n2 0 2\n3 4 9\n3 0 0\n2 0 2\n4 11 18\n3 4 2 4\n2 2 4 0\n4 21 22\n3 4 2 4\n2 2 4 0",
        "sample_output": "Case #1: 4\nCase #2: 3\nCase #3: 5\nCase #4: 8",
        "source": "2021\\world_finals\\infinitree"
    },
    {
        "problem_name": "Ropes",
        "problem_statement": "Two scout teams are taking part in a scouting competition. It is the finals\nand each team is well prepared. The game is played along a river that flows west to east.\nThere are 4N} trees planted along the river, with exactly 2N} of them lined up\nalong the north bank and 2N} lined up along the south bank.\nBoth teams alternate turns playing the game. Your team goes first.\nOn each turn, the playing team selects one tree on each bank that does not have any ropes\ntied to it and ties a rope between both trees, making it cross the river. Each rope that is added\nis placed higher than all previous ropes. The playing team scores 1 point per each\npreviously used rope that passes below the newly added rope.\nAfter 2N} turns, all trees have exactly one rope tied to them, so there are no more\npossible plays and the game is over. The score of each team is the sum of the scores they got\nin all of their turns. If your team's score is strictly greater than the opposing team's score,\nyour team wins. If your team's score is less than or equal to the opposing team's score,\nyour team does not win.\nThe following animation shows a possible game with N}=2. Your team is represented by\nthe color red and the other team by the color blue.\n\nThe opposing team felt confident that going second is a large advantage,\nso they revealed their strategy. On their turn, they choose the play that yields the maximum\npossible score for this turn. If multiple such plays exist, they choose one at random.\nThis choice is generated uniformly at random, and independently for each play,\nfor each test case and for each submission.\nTherefore,even if you submit exactly the same code twice, the opposing team\ncan make different random choices.\nYou play T} games in total, and your team must win at least W} of them.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing three integers\n  T}, N}, and W}: the number of test cases, the number of\n  turns of your team and the number of wins you need to get for your solution to be considered\n  correct, respectively. Note that the opposing team also\n  gets N} turns, for a total of 2N} turns for each test case.\nFor each test case, your program must process N} exchanges. Each exchange represents\n  two consecutive turns, one from your team and one from the opposing team.\nFor the i⁠-⁠th exchange, you must first print a single line with\n  two integers A_i} and B_i} and then read\n  a single line with two integers C_i} and D_i}.\n  This represents that in your i⁠-⁠th turn you tied the rope between the A_i}⁠-⁠th\n  tree from the west on the north bank and the B_i}⁠-⁠th tree from the west on\n  the south bank. Similarly, in the opposing team's i⁠-⁠th turn they used the C_i}⁠-⁠th\n  tree from the west on the north bank and the D_i}⁠-⁠th tree from the west on\n  the south bank. Trees are indexed starting from 1.\nAfter the N} exchanges, you must read one number that represents the result of this game.\n  This number will be 1 if your team won, otherwise it will be 0.\nThe next test case starts immediately if there is one. If this was the last test case,\n  the judge will expect no more output and will send no further input to your program.\n  In addition, all T} test cases are always processed, regardless of whether it is\n  already guaranteed that the threshold for correctness will or cannot be met.\n  The threshold is only checked after correctly processing all test cases.\nIf the judge receives an invalidly formatted line or invalid move (like using a tree\n  that has already been used) from your program at any moment, the judge will print a single\n  number -1 and will not print any further output. If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nTime limit: 90 seconds.Memory limit: 1 GB.T} = 2000.N} = 50.\nW} = 1200 (W} = 0.6 * T}).\nW} = 1560 (W} = 0.78 * T}).\nW} = 1720 (W} = 0.86 * T}).\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2021\\world_finals\\ropes"
    },
    {
        "problem_name": "Slide Circuits",
        "problem_statement": "Gooli is a huge company that owns B} buildings in a hilly area. Five years ago, Goolibuilt slidesthat allowed employees to go from one building to another\n(they are not bidirectional), starting a tradition of building slides between buildings.\nCurrently, S} slides exist.\nMelek is Gooli's Head of Transportation and a problem-solving enthusiast. She was tasked with\nkeeping the slides enjoyable to use. The idea she came up with was disabling some slides such\nthat only circuits remained.\nA circuit is a set of two or more buildings b_1, b_2, ..., b_k such that there is\nexactly one slide enabled from building b_i to building b_{i+1}, for each i,\nand exactly one slide enabled from building b_k to building b_1.\nNo other slides from or to any of those buildings should be enabled, to prevent misdirection.\nA state of the slides is then calledfunif each building belongs to exactly one circuit.\nSlides in Gooli's campus are numbered with integers between 1 and S}, inclusive.\nMelek created a slide controlling console that supports two operations: enable and disable. Both\noperations receive three parameters \\ell, r, and m and perform the operation\non each slide x such that \\ell <= x <= r and x is a multiple of m.\nAn enable operation is valid only if all affected slides are in a disabled state right before the\noperation is performed. Similarly, a disable operation is valid only if all affected slides are\nin an enabled state right before the operation is performed.\nThe following picture illustrates a possible succession of states and operations.\nThe layout has 3 buildings and\n3 slides. Slides are light grey when disabled and dark grey when enabled.\n1.Initial state. All sides are disabled.\n2.After enable operation with \\ell=1, r=2, and m=1.\n3.After enable operation with \\ell=3, r=3, and m=1.\n4.After disable operation with \\ell=1, r=3, and m=2.\n5.After disable operation with \\ell=1, r=3, and m=3.\n6.After enable operation with \\ell=1, r=2, and m=2.\nUnfortunately, Sult, Melek's cat, found the console and\nstarted performing several valid enable and disable operations.\nAfter every console operation performed by Sult, Melek wants to know if the state of the slides\ncan be made fun by enabling exactly one currently disabled slide.\nNote that Melek does not actually enable this slide.\nIn the picture above, we can see that after the first, third, and last operations, Melek\ncould enable the only disabled slide and get to a fun state. After the\nsecond operation, there are two issues. One issue is that there are no currently disabled slides,\nso Melek cannot enable any. Additionally, the state is already fun, so even if there were\nadditional disabled slides, enabling anything would result in a not fun state.\nAfter the fourth operation, there are\ntwo disabled slides, but enabling either would not yield a fun state.\nAll slides are initially disabled, then Sult performs its operations one at a time.\nAfter each of Sult's operations, determine which disabled slide, if any, Melek can enable\nto put the slides in a fun state.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three integers B}, S}, and N}: the\nnumber of buildings, slides, and operations to process, respectively.\nThen, S} lines follow. The i⁠-⁠th of these lines contains two integers\nX_i} and Y_i}, indicating that the slide with number i goes from\nbuilding X_i} to building Y_i}.\nFinally, N} lines represent the operations. The j⁠-⁠th of these lines\ncontains a character A_j} and three integers L_j}, R_j}, and M_j}, describing\nthe j⁠-⁠th operation. A_j} describes the type of operation using\nan uppercaseEfor enable and an uppercaseDfor disable.\nThe operation is to be performed on slides with numbers that are simultaneously\na multiple of M_j} and between L_j} and R_j}, inclusive.\nFor each test case, output one line containingCase #x: y_1\\ y_2\\ ...\\ y_N},\nwhere x is the test case number (starting from 1) and y_j is an uppercaseXif there is no way to turn the state\nof slides created by the first j console operations into a fun state by enabling\nexactly one disabled slide. Otherwise, y_j should be an integer representing that\nenabling the y_j⁠-⁠th slide would turn the state created by the first j console operations\ninto a fun state.\nMemory limit: 1 GB.1 <= X_i} <= B}, for all i.1 <= Y_i} <= B}, for all i.X_i} \\ne Y_i}, for all i.(X_i}, Y_i}) != (X_j}, Y_j}), for all i != j.A_j} is either uppercaseEor uppercaseD, for all j.1 <= L_j} <= R_j} <= S}, for all j.1 <= M_j} <= S}, for all j.Each operation is valid.\nTime limit: 10 seconds.1 <= T} <= 100.2 <= B} <= 100.2 <= S} <= 1000.1 <= N} <= 1000.\nTime limit: 120 seconds.1 <= T} <= 30.2 <= B} <= 3 \\times 10^4.2 <= S} <= 3 \\times 10^5.1 <= N} <= 3 \\times 10^5.\nSample Case #1 is the one depicted in the problem statement.\nThe following picture shows the building and slide layout of Sample Case #2.\n\nThe sets of enabled slides after each operation are:\\{2,4,6,8\\},\\{2\\},\\{2,3,4,5\\},\\{2,3,4,5\\},\\{1,2,3,4,5\\},\\{1,2,3,4,5,6,8\\},\\{1,2,4,5,8\\},\\{1,2,4,5\\},\\{1,2\\}, and\\{1,2,3,4\\}.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three integers B}, S}, and N}: the\nnumber of buildings, slides, and operations to process, respectively.\nThen, S} lines follow. The i⁠-⁠th of these lines contains two integers\nX_i} and Y_i}, indicating that the slide with number i goes from\nbuilding X_i} to building Y_i}.\nFinally, N} lines represent the operations. The j⁠-⁠th of these lines\ncontains a character A_j} and three integers L_j}, R_j}, and M_j}, describing\nthe j⁠-⁠th operation. A_j} describes the type of operation using\nan uppercaseEfor enable and an uppercaseDfor disable.\nThe operation is to be performed on slides with numbers that are simultaneously\na multiple of M_j} and between L_j} and R_j}, inclusive.",
        "output_description": "For each test case, output one line containingCase #x: y_1\\ y_2\\ ...\\ y_N},\nwhere x is the test case number (starting from 1) and y_j is an uppercaseXif there is no way to turn the state\nof slides created by the first j console operations into a fun state by enabling\nexactly one disabled slide. Otherwise, y_j should be an integer representing that\nenabling the y_j⁠-⁠th slide would turn the state created by the first j console operations\ninto a fun state.",
        "sample_input": "2\n3 3 5\n1 2\n2 3\n3 1\nE 1 2 1\nE 3 3 1\nD 1 3 2\nD 1 3 3\nE 1 2 2\n5 8 10\n1 5\n5 3\n4 1\n3 2\n2 4\n2 5\n2 1\n1 4\nE 1 8 2\nD 4 8 2\nE 3 5 1\nE 1 1 3\nE 1 1 1\nE 5 8 2\nD 1 8 3\nD 5 8 4\nD 4 5 1\nE 3 4 1",
        "sample_output": "Case #1: 3 X 2 X 3\nCase #2: 3 X 1 1 X X X 3 X 5",
        "source": "2021\\world_finals\\slide_circuits"
    },
    {
        "problem_name": "3D Printing",
        "problem_statement": "You are part of the executive committee of the Database Design Day festivities.\nYou are in charge of promotions and want to print three D's to create a\nlogo of the contest. You can choose any color you want to print them, but all three\nhave to be printed in the same color.\n\nYou were given three printers and will use each one to print one of the D's.\nAll printers use ink from 4 individual cartridges\nof different colors (cyan, magenta, yellow, and black) to form any color.\nFor these printers, a color is uniquely defined by 4 non-negative integers\nc, m, y, and k, which indicate the number of ink units of cyan, magenta,\nyellow, and black ink (respectively) needed to make the color.\nThe total amount of ink needed to print a single D is exactly 10^6 units.\nFor example, printing a D in pure yellow would use 10^6\nunits of yellow ink and 0 from all others. Printing a D in the Code Jam red uses 0 units of cyan ink, 500000 units of magenta\nink, 450000 units of yellow ink, and 50000 units of black ink.\nTo print a color, a printer must have at least the required amount of ink for each of its 4 color cartridges.\nGiven the number of units of ink each printer has in each cartridge, output any color, defined as\n4 non-negative integers that add up to 10^6, such that all three printers have enough\nink to print it.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 3 lines. The i-th line of a test case contains\n4 integers C_i}, M_i}, Y_i}, and K_i}, representing the number of ink units\nin the i-th printer's cartridge for the colors cyan, magenta, yellow, and black, respectively.\nFor each test case, output one line containingCase #x: r,\nwhere x is the test case number (starting from 1) and r isIMPOSSIBLEif there is no color that can be printed by all 3 printers. Otherwise, r must be\nequal to \"c m y k\" where c, m, y, and k are\nnon-negative integers that add up to 10^6 and c <= C_i}, m <= M_i},\ny <= Y_i}, and k <= K_i}, for all i.\nIf there are multiple solutions, you may output any one of them.\n(See \"What if a test case has multiple correct solutions?\"\nin theCompeting section of the FAQ.)\nThis information about multiple solutions will not be explicitly stated in the remainder of the\n2022 contest.\nTime limit: 5 seconds.Memory limit: 1 GB.\n1 <= T} <= 100.0 <= C_i} <= 10^6, for all i.0 <= M_i} <= 10^6, for all i.0 <= Y_i} <= 10^6, for all i.0 <= K_i} <= 10^6, for all i.\nSample Case #1 is the image provided above. The proposed color is using up all of the ink in the\n  cyan, magenta, and yellow cartridges of the first printer and all of the\n  ink in the black cartridge of the last printer. This means that no additional\n  unit of ink could be used from any of the 4 ink colors, so the given\n  sample output is the only possible output for this case.\nIn Sample Case #2, magenta is the only color that both the first and second\n  printers have, so our only chance would be to use 10^6 units of\n  magenta. Unfortunately, the third printer does not have quite enough, making\n  this case impossible.\nIn Sample Case #3, other correct outputs are:\n  \"400000 100000 100000 400000\", \"300000 0 0 700000\", and\n  \"350000 140000 160000 350000\", among lots of others. Notice that\n  \"300000 140000 160000 700000\" would not be a valid answer because,\n  even though there is enough ink in all printers to do that, the total number of\n  ink units must be exactly 10^6.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 3 lines. The i-th line of a test case contains\n4 integers C_i}, M_i}, Y_i}, and K_i}, representing the number of ink units\nin the i-th printer's cartridge for the colors cyan, magenta, yellow, and black, respectively.",
        "output_description": "For each test case, output one line containingCase #x: r,\nwhere x is the test case number (starting from 1) and r isIMPOSSIBLEif there is no color that can be printed by all 3 printers. Otherwise, r must be\nequal to \"c m y k\" where c, m, y, and k are\nnon-negative integers that add up to 10^6 and c <= C_i}, m <= M_i},\ny <= Y_i}, and k <= K_i}, for all i.",
        "sample_input": "3\n300000 200000 300000 500000\n300000 200000 500000 300000\n300000 500000 300000 200000\n1000000 1000000 0 0\n0 1000000 1000000 1000000\n999999 999999 999999 999999\n768763 148041 178147 984173\n699508 515362 534729 714381\n949704 625054 946212 951187",
        "sample_output": "Case #1: 300000 200000 300000 200000\nCase #2: IMPOSSIBLE\nCase #3: 400001 100002 100003 399994",
        "source": "2022\\qualification_round\\3d_printing"
    },
    {
        "problem_name": "Chain Reactions",
        "problem_statement": "Wile lives alone in the desert, so he entertains himself by building complicated machines\nthat run on chain reactions. Each machine consists of N} modules indexed 1, 2, ..., N}.\nEach module may point at one other module with a lower index. If not, it points at the abyss.\nModules that are not pointed at by any others are calledinitiators. Wile can manually trigger\ninitiators. When a module is triggered, it triggers the module it is pointing at (if any) which in turn may trigger\na third module (if it points at one), and so on, until the chain would hit the abyss or an already\ntriggered module. This is called achain reaction.\nEach of the N} modules has a fun factor F_i}. The fun Wile gets from a chain reaction is the largest\nfun factor of all modules that triggered in that chain reaction. Wile is going to trigger each initiator\nmodule once, in some order. The overall fun Wile gets from the session is the sum of\nthe fun he gets from each chain reaction.\nFor example, suppose Wile has 4 modules with fun factors F_1}=60, F_2}=20, F_3}=40,\nand F_4}=50 and module 1 points at the abyss, modules 2 and 3 at module\n1, and module 4 at module 2. There are two initiators (3 and 4) that\nWile must trigger, in some order.\n\nAs seen above, if Wile manually triggers module\n4 first, modules 4, 2, and 1 will get triggered in the same chain reaction, for a fun of\n\\max(50, 20, 60) = 60. Then, when Wile triggers module 3, module 3\nwill get triggered alone (module 1 cannot get triggered again), for a fun of\n40, and an overall fun for the session of 60+40=100.\n\nHowever, if Wile manually triggers module 3 first,\nmodules 3 and 1 will get triggered in the same chain reaction, for a fun of \\max(40, 60) = 60.\nThen, when Wile triggers module 4, modules 4 and 2\nwill get triggered in the same chain reaction, for a fun of \\max(50, 20) = 50,\nand an overall fun for the session of 60+50=110.\nGiven the fun factors and the setup of the modules, compute the maximum fun Wile can get if he\ntriggers the initiators in the best possible order.\nThe first line of the input gives the number of test cases, T}. T} test cases follow,\neach described using 3 lines.\nEach test case starts with a line with a single integer N}, the number of modules\nWile has. The second line contains N} integers F_1}, F_2}, ..., F_N} where\nF_i} is the fun factor of the i-th module.\nThe third line contains N} integers P_1}, P_2}, ... P_N}.\nIf P_i}=0, that means module i points at the abyss. Otherwise, module i\npoints at module P_i}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum fun\nWile can have by manually triggering the initiators in the best possible order.\nMemory limit: 1 GB.1 <= T} <= 100.1 <= F_i} <= 10^9.0 <= P_i} <= i - 1, for all i.\nTime limit: 5 seconds.1 <= N} <= 10.\nTime limit: 5 seconds.1 <= N} <= 1000.\nTime limit: 10 seconds.1 <= N} <= 100000.\nSample Case #1 is the one explained in the problem statement.\nIn Sample Case #2, there are 4 initiators (modules 2 through 5),\n  so there are 4 chain reactions. Activating them in order\n  3, 5, 4, 2 yields chains of fun 3, 5, 4, 2 for an overall fun of 14. Notice that\n  we are summing the four highest fun numbers in the input, so there is no way to get more\n  than that.\nIn Sample Case #3, an optimal activation order of the 5 initiators is 4, 5, 7, 6, 8.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow,\neach described using 3 lines.\nEach test case starts with a line with a single integer N}, the number of modules\nWile has. The second line contains N} integers F_1}, F_2}, ..., F_N} where\nF_i} is the fun factor of the i-th module.\nThe third line contains N} integers P_1}, P_2}, ... P_N}.\nIf P_i}=0, that means module i points at the abyss. Otherwise, module i\npoints at module P_i}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum fun\nWile can have by manually triggering the initiators in the best possible order.",
        "sample_input": "3\n4\n60 20 40 50\n0 1 1 2\n5\n3 2 1 4 5\n0 1 1 1 0\n8\n100 100 100 90 80 100 90 100\n0 1 2 1 2 3 1 3",
        "sample_output": "Case #1: 110\nCase #2: 14\nCase #3: 490",
        "source": "2022\\qualification_round\\chain_reactions"
    },
    {
        "problem_name": "d1000000",
        "problem_statement": "While the most typical type of dice have 6 sides, each of which shows a different\ninteger 1 through 6, there are many games that use other types.\nIn particular, a dk is a die with k sides, each of which shows a different\ninteger 1 through k. A d6 is a typical die, a d4 has four sides,\nand a d1000000 has one million sides.\n\nIn this problem, we start with a collection of N} dice. The i-th die is a dS_i}, that is,\nit has S_i} sides showing integers 1 through S_i}. A straight of length \\ell\nstarting at x is the list of integers x, x + 1, ..., x + (\\ell - 1).\nWe want to choose some of the dice (possibly all) and pick one number from each to form a straight.\nWhat is the longest straight we can form in this way?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger N}, the number of dice in the game. The second line contains N} integers\nS_1}, S_2}, ..., S_N}, each representing the number of sides of a different\ndie.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum number of\ninput dice that can be put in a straight.\nMemory limit: 1 GB.1 <= T} <= 100.\nTime limit: 5 seconds.1 <= N} <= 10.4 <= S_i} <= 20, for all i.\nTime limit: 15 seconds.1 <= N} <= 10^5.4 <= S_i} <= 10^6, for all i.\nIn Sample Case #1, there are multiple ways to form a straight using all 4 dice. One possible\n  way is shown in the image above.\nIn Sample Case #2, since none of the dice can show an integer greater than 5, there is no way to\n  have a straight with more than 5 dice. There are multiple ways to form a straight with\n  exactly 5 dice. For example, pick the integers 4 and 5 for both d5⁠'s\n  and then integers 1, 2, and 3 for three of the d4⁠'s to form 1,2,3,4,5.\nIn Sample Case #3, it is possible to form the straight 1,2,3,4,5,6,7,8,9 by discarding one\n  d4 and using the d4⁠'s, d5, and d6 to get 1 through 4;\n  the d7⁠'s to get 5 through 7; and the d10⁠'s to get 8\n  and 9. There is no way to form a straight of length 10, so this is the best that\n  can be done.\nIn Sample Case #4, we can only form a straight of length 1, but we can do so by picking\n  any integer for the d10 we are given.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger N}, the number of dice in the game. The second line contains N} integers\nS_1}, S_2}, ..., S_N}, each representing the number of sides of a different\ndie.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum number of\ninput dice that can be put in a straight.",
        "sample_input": "4\n4\n6 10 12 8\n6\n5 4 5 4 4 4\n10\n10 10 7 6 7 4 4 5 7 4\n1\n10",
        "sample_output": "Case #1: 4\nCase #2: 5\nCase #3: 9\nCase #4: 1",
        "source": "2022\\qualification_round\\d1000000"
    },
    {
        "problem_name": "Punched Cards",
        "problem_statement": "A secret team of programmers is plotting to disrupt the programming language landscape and\nbring punched cards back by introducing a new language calledPunched Card Pythonthat lets\npeople code in Python using punched cards!\nLike good disrupters, they are going to launch a viral campaign to promote their new language before\neven having the design for a prototype. For the campaign, they want to draw\npunched cards of different sizes in ASCII art.\n\nThe ASCII art of a punched card they want to draw is similar to an R} \\times C} matrix without\nthe top-left cell. That means, it has (R} * C}) - 1 cells in total.\nEach cell is drawn in ASCII art as a period (.) surrounded by dashes (-) above\nand below, pipes (|) to the left and right, and plus signs (+) for each corner.\nAdjacent cells share the common characters in the border. Periods (.) are used\nto align the cells in the top row.\nFor example, the following is a punched card with R} = 3 rows and C} = 4 columns:\n..+-+-+-+\n..|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\nThere are more examples with other sizes in the samples below. Given the integers R} and C}\ndescribing the size of a punched card, print the ASCII art drawing of it as described above.\nThe first line of the input gives the number of test cases, T}. T} lines follow,\neach describing a different test case with two integers R} and C}: the number of rows\nand columns of the punched card that must be drawn.\nFor each test case, output one line containingCase #x:,\nwhere x is the test case number (starting from 1).\nThen, output (2 * R}) + 1 additional lines with the ASCII art drawing of a\npunched card with R} rows and C} columns.\nTime limit: 5 seconds.Memory limit: 1 GB.\n1 <= T} <= 81.2 <= R} <= 10.2 <= C} <= 10.\nSample Case #1 is the one described in the problem statement. Sample Cases #2 and #3 are additional\n  examples. Notice that the output for each case contains exactly R} * C} + 3 periods.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} lines follow,\neach describing a different test case with two integers R} and C}: the number of rows\nand columns of the punched card that must be drawn.",
        "output_description": "For each test case, output one line containingCase #x:,\nwhere x is the test case number (starting from 1).\nThen, output (2 * R}) + 1 additional lines with the ASCII art drawing of a\npunched card with R} rows and C} columns.",
        "sample_input": "3\n3 4\n2 2\n2 3",
        "sample_output": "Case #1:\n..+-+-+-+\n..|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\nCase #2:\n..+-+\n..|.|\n+-+-+\n|.|.|\n+-+-+\nCase #3:\n..+-+-+\n..|.|.|\n+-+-+-+\n|.|.|.|\n+-+-+-+",
        "source": "2022\\qualification_round\\punched_cards"
    },
    {
        "problem_name": "Twisty Little Passages",
        "problem_statement": "You are investigating a cave. The cave has N} rooms.\nThere are underground passages that bidirectionally connect some pairs of rooms.\nEach room has at least one passage connected to it.\nNo passage goes from a room to itself, and no two rooms are connected by more than one\npassage.\nWhen in a room, you can identify what room you are in and see how many passages it connects to,\nbut you cannot distinguish the passages. You want to estimate the number of passages that exist in the cave.\nYou are allowed to do up to K} operations. An operation is either:\nWhen you decide to walk through a passage, you are unable to choose which one, because they are all alike.\nA passage is chosen for you uniformly at random.\nYou begin the investigation in an arbitrary room. Estimate the number of passages between rooms\nin the cave with at most K} operations.\nIf E is your estimate and P is the\nactual number of passages, your solution is considered correct for a test case if and only if\nP * 2/3 <= E <= P * 4/3.\nTo pass a test set, your solution must be correct for at least 90% of the test cases in that set.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing an integer,\n  T}, the number of test cases. Then, T} test cases must be processed.\nFor each test case, your program must first read a line containing two integers N} and K}:\n  the number of rooms in the cave, and the maximum number of room operations you are allowed.\n  Rooms are numbered between 1 and N}.\n  The cave is determined at the beginning of the test case – it won't be changed while you explore it.\n  Then, your program must process up to K} + 1 exchanges.\nThe i-th exchange starts with you reading a line containing two integers R_i} and\n  P_i}, representing the number of the room you are currently in and the number of passages\n  it connects to. Then, you must output a single line containing one of the following:\nAfter an estimation operation, the judge will immediately start the next test case if there is one,\nregardless of the correctness of your estimation.\nIf there is no next test case, the judge will wait for you to finish without any further output.\nIf the judge receives an invalidly formatted line from your program at any moment,\n  or if your (K}+1)-th exchange for a test case is not an estimation operation,\n  the judge will print a single number -1 and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nTime limit: 120 seconds.Memory limit: 1 GB.\n1 <= T} <= 100.2 <= N} <= 10^5.K = 8000.Each room has at least one passage connected to it.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2022\\qualification_round\\twisty_little_passages"
    },
    {
        "problem_name": "Double or One Thing",
        "problem_statement": "You are given a string of uppercase English letters. You can highlight any number of the\nletters (possibly all or none of them). The highlighted letters do not need to be consecutive.\nThen, a new string is produced by processing the letters from left to right:\nnon-highlighted letters are appended once to the new string, while highlighted letters are\nappended twice.\n\nFor example, if the initial string isHELLOWORLD, you could highlight theH, the first and lastLs and the lastOto obtainHELLOWORLD\\RightarrowHHELLLOWOORLLD. Similarly, if you highlight nothing, you obtainHELLOWORLD, and if you highlight all of the letters, you obtainHHEELLLLOOWWOORRLLDD. Notice how each occurrence of the same letter can be highlighted\nindependently.\nGiven a string, there are multiple strings that can be obtained as a result of this process,\ndepending on the highlighting choices. Among all of those strings, output the one that appears\nfirst in alphabetical (also known as lexicographical) order.\nNote: A string s appears before a different string t in alphabetical order\nif s is a prefix of t or if at the first place s and t differ,\nthe letter in s is earlier in the alphabet than the letter in t. For example,\nthese strings are in alphabetical order:CODE,HELLO,HI,HIM,HOME,JAM.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing a single string S}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the string that\ncomes first alphabetically from the set of strings that can be produced from S} by the\nprocess described above.\nTime limit: 2 seconds.Memory limit: 1 GB.1 <= T} <= 100.Each character of S} is an uppercase letter from the English alphabet.\n1 <=  the length of S} <= 10.\n1 <=  the length of S} <= 100.\nIn Sample Case #1, these are all the strings that can be obtained, in alphabetical order:PEEEEL,PEEEELL,PEEEL,PEEELL,PEEL,PEELL,PPEEEEL,PPEEEELL,PPEEEL,PPEEELL,PPEEL, andPPEELL.\nIn Sample Case #2, every string that can be obtained contains onlyAs. The\n  shortest of those is alphabetically first, because it is a prefix of all others.\nIn Sample Case #3, there are 1024 possible strings which can be generated fromCODEJAMDAYout of whichCCODDEEJAAMDAAYis the lexicographically\n  smallest one.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing a single string S}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the string that\ncomes first alphabetically from the set of strings that can be produced from S} by the\nprocess described above.",
        "sample_input": "3\nPEEL\nAAAAAAAAAA\nCODEJAMDAY",
        "sample_output": "Case #1: PEEEEL\nCase #2: AAAAAAAAAA\nCase #3: CCODDEEJAAMDAAY",
        "source": "2022\\round_1a\\double_or_one_thing"
    },
    {
        "problem_name": "Equal Sum",
        "problem_statement": "You are given a set of distinct integers. You need to separate them into two\nnon-empty subsets such that each element belongs to exactly one of them and the sum of all elements of\neach subset is the same.\nAn anonymous tip told us that the problem above was unlikely to be solved in polynomial time (or\nsomething like that), so we decided to change it. Nowyouget to decide what half of the integers are!\nThis is an interactive problem with three phases. In phase 1, you choose N} distinct integers.\nIn phase 2, you are given another N} integers that are distinct from each other and from\nthe ones you chose in phase 1. In phase 3, you have to partition those 2N} integers\ninto two subsets, both of which sum to the same amount.\nAll 2N} integers are to be between 1 and 10^9, inclusive, and it is guaranteed\nthat they sum up to an even number.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing an integer,\n  T}, the number of test cases. Then, T} test cases must be processed.\nFor each test case, your program must first read a line containing a single integer N}.\n  Then, it must output a line containing N} distinct integers A_1, A_2, ..., A_N}.\n  Each of these integers must be between 1 and 10^9, inclusive.\n  After that, your program must read a line containing N} additional integers\n  B_1}, B_2}, ..., B_N}. Finally, your program must\n  output a line containing between 1 and 2N}-1 integers from among\n  A_1, A_2, ..., A_N}, B_1}, B_2}, ..., B_N}: the ones chosen to be\n  part of the first subset. The integers from A and B} that you do not output are\n  considered to be part of the other subset.\nThe next test case starts immediately if there is one. If this was the last test case,\n  the judge will expect no more output and will send no further input to your program.\n  In addition, all T} test cases are always processed, regardless of whether the final\n  output from your program is correct or not.\nNote: It can be shown that given the limits for this problem, there exists a sequence A_1, A_2, ..., A_N} such that any sequence\n  B_1}, B_2}, ..., B_N} results in a set of 2N} integers\n  that can be separated into two subsets with equal sums.\nIf the judge receives an invalidly formatted or invalid line (like outputting an\n  unexpected number of integers, or integers out of range, or repeated integers in a line)\n  from your program at any moment, the judge\n  will print a single number -1 and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nTime limit: 5 seconds.Memory limit: 1 GB.\n1 <= T} <= 100.N} = 100.1 <= B_i} <= 10^9, for all i.B_i} != A_j, for all i, j.B_i} != B_j}, for all i != j.For each test case, the judge will choose the B_i}s such that the sum of all 2N} integers is even.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2022\\round_1a\\equal_sum"
    },
    {
        "problem_name": "Weightlifting",
        "problem_statement": "You are following a prescribed training for weightlifting. The training consists of a series of\nexercises that you must do in order.  Each exercise requires a specific set of weights to be placed\non a machine.\nThere are W} types of different weights. For example, an exercise may require\n3 weights of type A and 1 weight of type B, while the next requires 2\nweights each of types A, C, and D.\n\nThe weights are placed on the machine as a stack.\nFormally, with a single operation, you can either add a new weight of any type to the top of the\nstack, or remove the weight that is currently at the top of the stack.\nYou can load the weights for each exercise onto the machine's stack in any order.\nSo, if you place the weight of type B at\nthe bottom in the first exercise of the example above, you will have to take all the weights off\nbefore putting on the weights for the second exercise. On the other hand, if you place the weight\nof type B third from the bottom, you can leave two of the weights of type A on the bottom of the\nstack to be part of the next exercise's set, saving you some time.\nGiven the amount of weights of each type needed for each exercise, find the minimum\nnumber of operations needed to do them all. You must complete the exercises in the order given.\nThe machine stack starts out empty, and you must leave it empty after you finish with all your\nexercises.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing 2 integers E} and W}: the number of exercises\nand the number of types of weights. Weight types are numbered between 1 and W}.\nThen, E} lines follow. The i-th of these lines\ncontains W} integers X_{i,1}}, X_{i,2}}, ..., X_{i,W}} representing that the\ni-th exercise requires exactly X_{i,j}} weights of type j.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of\nmachine stack operations needed to run through all your exercises.\nTime limit: 20 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= X_{i,1}} + X_{i,2}} + ... + X_{i,W}}, for all i. (Each exercise requires at least one weight.)\n1 <= E} <= 10.1 <= W} <= 3.0 <= X_{i,j}} <= 3, for all i, j.\n1 <= E} <= 100.1 <= W} <= 100.0 <= X_{i,j}} <= 100, for all i, j.\nIn Sample Case #1, there is only one type of weight.\nThe first exercise needs 1 weight, the second needs 2 weights,\nand the third needs 1 weight.\nYou can complete the exercise in 4 operations as follows:Add a weight onto the stack. You do the first exercise.Add a weight onto the stack. You do the second exercise.Remove a weight from the top of the stack. You do the third exercise.Remove a weight from the top of the stack. Now the stack becomes empty.\nIn Sample Case #2, one way to complete the exercises in 12 operations is as follows:Add a weight of type 2.Add a weight of type 3.Add a weight of type 1.Add a weight of type 2. Now the stack contains weights of types 2, 3, 1, 2 from bottom to top. You do the first exercise.Remove a weight of type 2 from the top of the stack.Add a weight of type 3.Add a weight of type 1. Now the stack contains weights of types 2, 3, 1, 3, 1 from bottom to top. You do the second exercise.Remove a weight of type 1 from the top of the stack.Remove a weight of type 3 from the top of the stack.Remove a weight of type 1 from the top of the stack.Remove a weight of type 3 from the top of the stack.Remove a weight of type 2 from the top of the stack. Now the stack becomes empty.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing 2 integers E} and W}: the number of exercises\nand the number of types of weights. Weight types are numbered between 1 and W}.\nThen, E} lines follow. The i-th of these lines\ncontains W} integers X_{i,1}}, X_{i,2}}, ..., X_{i,W}} representing that the\ni-th exercise requires exactly X_{i,j}} weights of type j.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of\nmachine stack operations needed to run through all your exercises.",
        "sample_input": "3\n3 1\n1\n2\n1\n2 3\n1 2 1\n2 1 2\n3 3\n3 1 1\n3 3 3\n2 3 3",
        "sample_output": "Case #1: 4\nCase #2: 12\nCase #3: 20",
        "source": "2022\\round_1a\\weightlifting"
    },
    {
        "problem_name": "ASeDatAb",
        "problem_statement": "A research consortium has been looking for the best possible database for three years, but\n  they are still having problems. The database stores values as records that hold 8-bit\n  binary strings. Unfortunately, their implementation of the function to set\n  the value of a record is flawed.\nEach record of the database is an 8⁠-bit binary string. The bits of the binary string\n  are indexed from 0 to 7 from left to right. When an instruction to set a specific\n  record to a new value V is received, instead of setting the value to V the database\n  does the following:\nLuckily, it turns out that no matter what the initial value is or what rotation values the database\n  chooses, it is always possible to reset the value of a record to have all bits be 0\n  with no more than 300 uses of this operation. Implement a program to interact\n  with the database that does this.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing an integer\n  T}, the number of test cases. Then, T} test cases must be processed.\nAt the beginning\n  of each test case, the record in the database is set to a value that is not00000000. In each test case, your program must process up to 300 exchanges.\nThe i⁠-th exchange starts with you outputting a single line containing a single\n  8⁠-bit binary string to be used as the value V for the operation above.\n  Then, the judge program performs the operation as described and sends you a single\n  line containing a single integer N_i} representing the number of bits that are\n  equal to 1 in the updated value of the record.\nYour solution is considered correct if and only if you succeed in setting the value of the record\n  to00000000for all test cases.If the judge receives an invalidly formatted or invalid line from your program at any moment,\n  the judge will print a single number -1 and will not print any further output.\n  If you receive a -1, you must finish correctly and without exceeding the time\n  or memory limits to receive a Wrong Answer judgement. Otherwise, you will receive a judgement\n  informing the exceeded resource or the incorrect termination condition.LimitsTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.-1 <= N_i} <= 8 for all i.Test Set 1 (Visible Verdict)The initial value of the record is chosen uniformly at random from all 8-bit binary strings\n  that are not00000000.Each rotation value is chosen uniformly at random, and independently of all previous choices and\n  interactions.Test Set 2 (Visible Verdict)The judge isadversarial. This means, among other things, that the judge can change the\n  initial value or rotation values as long as it is consistent with all interactions. The initial\n  value is guaranteed to never be00000000.Testing ToolYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.Download testing toolSample InteractionJudgeSolutionNumber of cases1Case 1. Record starts at the hidden value10000000.00110011Judge picks r = 5 and rotates your given value to get10011001then does10011001XOR10000000obtaining00011001, which is the new value of the record.300011001has 3 ones.00011001Judge picks r = 0 which leaves your input unrotated. Since it coincides with the current value of the record, this results in the record being00000000.0Judge informs you that there are no ones in the record, so this case is complete.\nIf the judge receives an invalidly formatted or invalid line from your program at any moment,\n  the judge will print a single number -1 and will not print any further output.\n  If you receive a -1, you must finish correctly and without exceeding the time\n  or memory limits to receive a Wrong Answer judgement. Otherwise, you will receive a judgement\n  informing the exceeded resource or the incorrect termination condition.\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 100.-1 <= N_i} <= 8 for all i.\nThe initial value of the record is chosen uniformly at random from all 8-bit binary strings\n  that are not00000000.Each rotation value is chosen uniformly at random, and independently of all previous choices and\n  interactions.\nThe initial value of the record is chosen uniformly at random from all 8-bit binary strings\n  that are not00000000.\nEach rotation value is chosen uniformly at random, and independently of all previous choices and\n  interactions.\nThe judge isadversarial. This means, among other things, that the judge can change the\n  initial value or rotation values as long as it is consistent with all interactions. The initial\n  value is guaranteed to never be00000000.\nThe judge isadversarial. This means, among other things, that the judge can change the\n  initial value or rotation values as long as it is consistent with all interactions. The initial\n  value is guaranteed to never be00000000.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2022\\round_1b\\asedatab"
    },
    {
        "problem_name": "Controlled Inflation",
        "problem_statement": "The lines at the air pump at your gas station are getting too long! You want to optimize\nthe process to help customers more quickly inflate their tires, sports balls, giant parade\nballoon animals, and other products.\nThe pump is automatic: you set the pressure to a specific number of pascals and plug the pump into\nthe inflatable product, and it will inflate as needed to that exact pressure. There are only two\nbuttons on the pump: up and down. They increase and decrease the target pressure, respectively,\nby exactly 1 pascal.\n\nThere is a line of N} customers, each of whom brings exactly P} products that they need to get\ninflated by the pump. You know the target pressure of each product. You can inflate the products from\na customer in any order you want, but you cannot change the order of the customers. Specifically,\nyou must inflate all products from the i⁠-th customer before inflating any from the\n(i + 1)⁠-th customer.\nIn between handling two products, if those two products have different target pressures, you need\nto use the buttons on the pump.\nThe pump is initially set to 0 pascals, and it can be left at any number after all products\nof all customers have been inflated. If you order the products of each customer optimally,\nwhat is the minimum number of button presses you need?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers, N} and P}: the number of customers\nand the number of products each customer brings, respectively. Then, N} lines follow. The i-th of these\nlines contains P} integers X_{i,1}}, X_{i,2}}, ..., X_{i,P}}, representing that\nthe j-th product that the i-th customer brings has a target pressure of X_{i,j}} pascals.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of\nbutton presses needed to inflate all products according to their specified pressures.\nTime limit: 5 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= X_{i,j}} <= 10^9, for all i, j.\n2 <= N} <= 10.2 <= P} <= 3.\n2 <= N} <= 1000.2 <= P} <= 100.\nIn Sample Case #1, an optimal way to use the pump is:press up 10 times, setting the pump to 10; pump the product (from customer 1) that needs 10 pascals,press up 30 times, setting the pump to 40; pump the product (from customer 1) that needs 40 pascals,press down 10 times, setting the pump to 30; pump the product (from customer 1) that needs 30 pascals,press down 10 times, setting the pump to 20; pump the product (from customer 2) that needs 20 pascals,press up 30 times, setting the pump to 50; pump the product (from customer 2) that needs 50 pascals,press up 10 times, setting the pump to 60; pump the product (from customer 2) and the two products (from customer 3) that need 60 pascals, and finallypress down 10 times, setting the pump to 50; pump the product (from customer 3) that needs 50 pascals.This is a total of 110 button presses.In Sample Case #2, notice that the answer can be larger than 2^{32}.\nThis is a total of 110 button presses.\nIn Sample Case #2, notice that the answer can be larger than 2^{32}.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers, N} and P}: the number of customers\nand the number of products each customer brings, respectively. Then, N} lines follow. The i-th of these\nlines contains P} integers X_{i,1}}, X_{i,2}}, ..., X_{i,P}}, representing that\nthe j-th product that the i-th customer brings has a target pressure of X_{i,j}} pascals.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of\nbutton presses needed to inflate all products according to their specified pressures.",
        "sample_input": "2\n3 3\n30 10 40\n20 50 60\n60 60 50\n5 2\n1 1000000000\n500000000 1000000000\n1 1000000000\n500000000 1\n1 1000000000",
        "sample_output": "Case #1: 110\nCase #2: 4999999996",
        "source": "2022\\round_1b\\controlled_inflation"
    },
    {
        "problem_name": "Pancake Deque",
        "problem_statement": "Pancakes are normally served in stacks, but the Infinite House of Pancakes embraces change!\nThe restaurant's new advertising hook is to serve the pancakes from a deque, or double-ended queue.\nYou are a server at the restaurant, and your job is to serve every pancake in the deque. Customers\nwill arrive one at a time, and each one gets a single pancake. You must serve each customer either\nthe leftmost or rightmost pancake in the deque; the choice is yours. When a pancake is served, it\ndisappears from the deque, exposing the pancake that was next to it. Or, once there is only one\npancake left, your only choice is to serve that one, and then your job is complete!\n\nEach pancake has a deliciousness level. Because customers do not get to choose which pancakes they\nget, each customer only has to pay for their pancake if it is at least as delicious aseachof\nthe pancakes thatallof the previous customers got. (The first customer always pays for\ntheir pancake, since in that case there are no previous customers.)\nHow many customers will pay for their pancake, if you serve the pancakes in an order that maximizes\nthat number?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described with two lines.\nThe first line of a test case contains a single integer N}, the number of pancakes\nin the pancake deque. The second line of a test case contains\nN} integers D_1}, D_2}, ..., D_N}, where D_i} is the deliciousness level\nof the i-th pancake from the left in the deque.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of\ncustomers who pay for their pancakes, if you serve the pancakes in an order that maximizes that\nnumber.\nTime limit: 20 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <= D_i} <= 10^6, for all i.\n2 <= N} <= 20.\n2 <= N} <= 100.\n2 <= N} <= 10^5.\nIn Sample Case #1, there are two possible orders in which you can serve the pancakes. If you serve\n  the pancake with deliciousness level 5 first, only that one is paid for. If you serve\n  the pancake with deliciousness level 1 first, both are paid for.\nSample Case #2 is the image shown in the problem statement. The following are the possible orders\n  (by deliciousness level) in which the pancakes can be served. The underlined pancakes are the ones that customers pay for.\\underline{1}, \\underline{4}, 2, 3\\underline{1}, \\underline{4}, 3, 2\\underline{1}, \\underline{3}, \\underline{4}, 2\\underline{1}, \\underline{3}, 2, \\underline{4}\\underline{3}, 1, \\underline{4}, 2\\underline{3}, 1, 2, \\underline{4}\\underline{3}, 2, 1, \\underline{4}\\underline{3}, 2, \\underline{4}, 1As you can see, there are some orders in which 3 pancakes are paid for, and none in which\n  all 4 are.In Sample Case #3, all pancakes are paid for regardless of the serving order.In Sample Case #4, regardless of which pancake you serve first, the two in the middle will\n  never be paid for. The best you can do is serve the pancake with deliciousness 7 before the\n  pancake with deliciousness 1000000.\nAs you can see, there are some orders in which 3 pancakes are paid for, and none in which\n  all 4 are.\nIn Sample Case #3, all pancakes are paid for regardless of the serving order.\nIn Sample Case #4, regardless of which pancake you serve first, the two in the middle will\n  never be paid for. The best you can do is serve the pancake with deliciousness 7 before the\n  pancake with deliciousness 1000000.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described with two lines.\nThe first line of a test case contains a single integer N}, the number of pancakes\nin the pancake deque. The second line of a test case contains\nN} integers D_1}, D_2}, ..., D_N}, where D_i} is the deliciousness level\nof the i-th pancake from the left in the deque.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of\ncustomers who pay for their pancakes, if you serve the pancakes in an order that maximizes that\nnumber.",
        "sample_input": "4\n2\n1 5\n4\n1 4 2 3\n5\n10 10 10 10 10\n4\n7 1 3 1000000",
        "sample_output": "Case #1: 2\nCase #2: 3\nCase #3: 5\nCase #4: 2",
        "source": "2022\\round_1b\\pancake_deque"
    },
    {
        "problem_name": "Intranets",
        "problem_statement": "Apricot Rules LLC is developing a new simplified networking protocol and wants to show off their\n  routing algorithm. In their design, a network consists of M} machines numbered from 1 to\n  M}, and each pair of machines is connected by a direct link. Each of the links is given a unique\n  integer priority value between 1 and (M} \\times (M} - 1) / 2) and each machine routes traffic according\n  to those priorities.\nUnfortunately, the routing algorithm is too aggressive and will route all traffic from a machine\n  through the highest priority link connected to it. This may make some groups of machines\n  isolated from others.\nFormally, we say that a machine m uses a link \\ell if (and only if) \\ell is the highest\n  priority link connected to m. We also say that a link isactiveif it is used by at\n  least one of the two machines it connects. Given the link priorities, the original network becomes\n  partitioned into disjoint intranets. Two machines belong to the same intranet if and only if there\n  is some path between them using only active links.\n\nFor example, as seen in the left image above, only the links with priorities 6 and 5\n  are active. This creates two disjoint intranets. However, in the example on the right, three links\n  are active, which results in one intranet consisting of all 4 machines.\nAs part of the quality assurance team at Apricot Rules LLC, you are investigating the extent\nof the problem. You are interested in knowing the probability of there\nbeing exactly K} intranets if the priorities are assigned uniformly at random from among the\n(M} \\times (M} - 1) / 2)! ways of doing so.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing two integers M} and K}: the\nnumber of machines and the target number of intranets, respectively.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the sought probability\ncomputed modulo the prime 10^9+7 (1000000007), which is defined precisely as follows.\nRepresent the probability as as an irreducible fraction p/q (with p and q being\nnon-negative integers that minimize p+q). Then, y must equal\np * q^{-1} \\bmod {10^9+7}⁠, where q^{-1} is themodular multiplicative inverseof q with respect to the modulus 10^9+7. It can be shown that under the constraints of\nthis problem, such a number y always exists and is unique.\nMemory limit: 1 GB.1 <= T} <= 50.1 <= K} <= M} / 2.\nTime limit: 20 seconds.2 <= M} <= 50.\nTime limit: 60 seconds.2 <= M} <= 5 \\times 10^5.\nIn Sample Case #1, consider the following situation.\nLet's call M} = 5 machines 1, 2, 3, 4, 5 and\ndenote the link connecting machine a and machine b by (a, b).\nAssume that the priorities of links\n(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5) are\n9, 8, 7, 6, 5, 4, 3, 2, 1, 10, respectively.\nThen machines 1 and 2 use link (1, 2), machine 3 uses link (1, 3),\nand machines 4 and 5 use link (4, 5).\nThus three links (1, 2), (1, 3), (4, 5) are active,\nand there are two intranets \\{1, 2, 3\\} and \\{4, 5\\}.\nSince K} = 2, this situation counts the answer.\n\nWe can find that there are 1555200 ways to assign the priorities\nto have exactly 2 intranets among 10! = 3628800 ways, so the probability is 3/7.\nIn Sample Case #2, the probability is 4/7.\nIn Sample Case #3, the probability is 1/21.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing two integers M} and K}: the\nnumber of machines and the target number of intranets, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the sought probability\ncomputed modulo the prime 10^9+7 (1000000007), which is defined precisely as follows.\nRepresent the probability as as an irreducible fraction p/q (with p and q being\nnon-negative integers that minimize p+q). Then, y must equal\np * q^{-1} \\bmod {10^9+7}⁠, where q^{-1} is themodular multiplicative inverseof q with respect to the modulus 10^9+7. It can be shown that under the constraints of\nthis problem, such a number y always exists and is unique.",
        "sample_input": "3\n5 2\n5 1\n6 3",
        "sample_output": "Case #1: 428571432\nCase #2: 571428576\nCase #3: 47619048",
        "source": "2022\\round_1c\\intranets"
    },
    {
        "problem_name": "Letter Blocks",
        "problem_statement": "It is a rainy day, so you are indoors building towers of letter blocks. A letter block is a wooden\ncube that has a letter printed on one of its sides. The font used for the letters makes the blocks\nhave a clear orientation: that is, there is only one side that can be pointed down (toward the\nfloor) and one side that can be pointed up (toward the ceiling).\nYou have built multiple separate towers so far. Now you want to combine all of them into a single\nmegatower by choosing one of your towers as the base, then picking up another tower (without\nchanging the order of its blocks) and stacking the whole thing on top of that, and so\non, until all towers have been used.\nAs an additional constraint for the megatower, for any two blocks that have the same letter, all\nblocks between them must also have that letter. That is, each letter of the alphabet that appears\nin the megatower needs to appear in one contiguous group (of one or more blocks).\nFor example, consider the following three possible megatowers. (These are separate examples,\nnot built from the same original towers. Also note that the different block sizes are just for fun\nand are not part of the problem.)\n\nThe leftmost two megatowers are valid, since each letter appears in a contiguous group. However,\nthe rightmost megatower is not valid, because there is aBin between twoCs.\nGiven the towers that you have built so far, can you stack them all up into a valid megatower?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described by two lines. The first line consists of a single integer N},\nthe number of towers that are currently built. The second line consists of N} strings\nS_1}, S_2}, ..., S_N} representing the towers. Each of these strings consists of only\nuppercase letters. The i-th letter of each of\nthese strings is the letter on the i-th block from the bottom in the represented tower.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is a string representing a\nvalid megatower as described above, or the wordIMPOSSIBLEif no valid megatower\ncan be built. (Notice that the stringIMPOSSIBLEcan never itself represent a valid\nmegatower, since the twoIs have other letters in between.)\nTime limit: 5 seconds.Memory limit: 1 GB.1 <= T} <= 100.1 <=  the length of S_i} <= 10, for all i.\n2 <= N} <= 6.\n2 <= N} <= 100.\nIn Sample Case #1,JAMMICCODEEELZZZZZandZZZZZJAMMICCODEEELare the\n  only two valid outputs.\nIn Sample Case #2, recall thatalltowers must be used in the megatower, so even though\n  the first five towers together would form a valid megatower (as in Sample Case #1), the\n  additionalEEKmakes the case impossible. No matter how theEELandEEKtowers are stacked relative to each other, there will be at least two\n  non-contiguous groups ofEs.\nIn Sample Case #3, no matter how you stack the towers, either the twoOs are\n  not contiguous or the twoYs are not contiguous.\nIn Sample Case #4, there are non-Hletters in between theHs ofHASH, so this case is also impossible.\nIn Sample Case #5, this answer is the only valid one. Also notice that the towers are not\n  necessarily all distinct.\nIn Sample Case #6, no matter how you stack the towers, the twoAs cannot\n  be contiguous.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described by two lines. The first line consists of a single integer N},\nthe number of towers that are currently built. The second line consists of N} strings\nS_1}, S_2}, ..., S_N} representing the towers. Each of these strings consists of only\nuppercase letters. The i-th letter of each of\nthese strings is the letter on the i-th block from the bottom in the represented tower.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is a string representing a\nvalid megatower as described above, or the wordIMPOSSIBLEif no valid megatower\ncan be built. (Notice that the stringIMPOSSIBLEcan never itself represent a valid\nmegatower, since the twoIs have other letters in between.)",
        "sample_input": "6\n5\nCODE JAM MIC EEL ZZZZZ\n6\nCODE JAM MIC EEL ZZZZZ EEK\n2\nOY YO\n2\nHASH CODE\n6\nA AA BB A BA BB\n2\nCAT TAX",
        "sample_output": "Case #1: ZZZZZJAMMICCODEEEL\nCase #2: IMPOSSIBLE\nCase #3: IMPOSSIBLE\nCase #4: IMPOSSIBLE\nCase #5: BBBBBAAAAA\nCase #6: IMPOSSIBLE",
        "source": "2022\\round_1c\\letter_blocks"
    },
    {
        "problem_name": "Squary",
        "problem_statement": "Addition and squaring do not commute. That is, the square of the sum of all elements of a list of\nintegers is not necessarily equal to the sum of the squares of those same elements. However, this\nis true for some lists; one example is [3, -2, 6], because\n(3 + (-2) + 6)^2 = 49 = 3^2 + (-2)^2 + 6^2. Let us call these listssquary.\n\nGiven a (not necessarily squary) list of relatively small integers, we want to know whether it is\npossible to add at least 1 and at most K} more elements such that the final list is squary.\nEach added element must be an integer between -10^{18} and 10^{18}, inclusive, and\nthese do not have to be distinct from each other or from the initial list's elements.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line contains two integers N} and K},\nthe number of elements of the initial list and the maximum number of elements you may\nadd, respectively. The second line contains N} integers E_1}, E_2}, ..., E_N},\nrepresenting the N} elements of the initial list.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1). If it is possible to add at least 1\nand at most K} elements (each an integer between -10^{18} and 10^{18}, inclusive) to\nthe initial list such that the square of the sum of its elements equals the sum of the squares of\nits elements, y should be z_1~z_2~\\dots~z_r, where 1 <= r <= K} and the\nz_i values are the additional elements. If there is no way to accomplish this, y should\nbeIMPOSSIBLE.\nMemory limit: 1 GB.1 <= T} <= 100.1 <= N} <= 1000.-1000 <= E_i} <= 1000, for all i.\nTime limit: 5 seconds.K} = 1.1\nTime limit: 10 seconds.2 <= K} <= 1000.\nIn Sample Case #1, we can end up with the example list given in the problem statement.\nIn Sample Case #2, we have to add exactly one element. If we call that element x, the\n  sum of the entire list is x and its square is x^2. The sum of the squares\n  of all elements, on the other hand, is x^2 + 10^2 + (-10)^2 = x^2 + 200 != x^2, so\n  the case is impossible.\nIn Sample Case #3, any integer in the [-10^{18}, 10^{18}] range is a valid answer.\nIn Sample Case #4, notice that the input might contain duplicate elements, and that it is valid\n  to create even more duplicates with the elements you choose to add.\nIn Case #1 of the additional samples, we are given the example list from the problem statement,\n  which is already squary, but we need to add at least one element to it. Adding a 0 keeps\n  the list squary.\nIn Case #3 of the additional samples, we present one of multiple possible valid answers. Notice\n  that it is permissible to add fewer than K} elements; here K} is 12 but we have only\n  added 11 elements.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in two lines. The first line contains two integers N} and K},\nthe number of elements of the initial list and the maximum number of elements you may\nadd, respectively. The second line contains N} integers E_1}, E_2}, ..., E_N},\nrepresenting the N} elements of the initial list.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1). If it is possible to add at least 1\nand at most K} elements (each an integer between -10^{18} and 10^{18}, inclusive) to\nthe initial list such that the square of the sum of its elements equals the sum of the squares of\nits elements, y should be z_1~z_2~\\dots~z_r, where 1 <= r <= K} and the\nz_i values are the additional elements. If there is no way to accomplish this, y should\nbeIMPOSSIBLE.",
        "sample_input": "3\n3 10\n-2 3 6\n6 2\n-2 2 1 -2 4 -1\n1 12\n-5",
        "sample_output": "Case #1: 0\nCase #2: -1 15\nCase #3: 1 1 1 1 1 1 1 1 1 1 1",
        "source": "2022\\round_1c\\squary"
    },
    {
        "problem_name": "I, O Bot",
        "problem_statement": "To welcome attendees to a developers' conference on Jupiter's moon of Io, the organizers inflated\n  many giant beach balls. Each ball is in roughly the shape of either a 1 or a 0, since\n  those look sort of like the letters I and O. The conference just ended, and so now the beach\n  balls need to be cleaned up. Luckily, the beach ball cleanup robot, BALL-E, is on the job!\nThe conference was held on an infinite horizontal line, with station 0 in the middle,\n  stations 1, 2, ... to the right, and stations -1, -2, ... to the left. Station 0\n  contains the conference's only beach ball storage warehouse. Each other station contains at most\n  one beach ball.\n\nBALL-E has two storage compartments, each of which can hold a single beach ball. One compartment\n  can only hold 1⁠-shaped balls and the other can only hold 0⁠-shaped balls. (The\n  1⁠-shaped balls are more oblong than the 0⁠-shaped balls, so neither shape of ball will\n  fit in the other shape's compartment.)\nBALL-E initially has both the 0 and 1 compartments empty, and it starts off at\n  station 0. The robot can do the following things:\nNotice that if BALL-E moves to a station and there is a ball there, BALL-E is not required to\n  pick it up immediately, even if the robot has an open compartment for it. Also, if BALL-E moves\n  to the station with the warehouse, it is not required to deposit any balls it has.\nFind the minimum number of units of power needed for BALL-E to transfer all of the balls to the\n  warehouse, using only the moves described above.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.The first line of each test case contains two integers, N} and C}: the number of balls and the\n  amount of power units needed to change the shape of a ball, respectively.The next N} lines describe the positions (i.e., station numbers) and the shapes of the balls.\n  The i-th line contains two integers, X_i} and S_i}: the position and the shape of the\n  i-th ball, respectively.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is theminimumnumber\n  of units of power needed to transfer all of the balls to the warehouse, as described above.\nTime limit: 40 seconds.Memory limit: 1 GB.1 <= T} <= 100.0 <= S_i} <= 1, for all i.-10^9 <= X_i} <= 10^9, for all i.0 <= C} <= 10^9.X_i} ≠ 0, for all i.All X_i} are distinct.\nFor at most 15 cases:1 <= N} <= 5000.For the remaining cases:1 <= N} <= 100.\nFor at most 15 cases:1 <= N} <= 10^5.For the remaining cases:1 <= N} <= 5000.\nIn Sample Case #1 (illustrated in the statement), there are N} = 5 balls and C} = 0. One optimal strategy\n  is to make three round trips from (and back to) the warehouse:\nThe total number of units of power needed to collect all the balls is 52.\nSample Case #2 is like Sample Case #1, but now with C} = 10. Now BALL-E has to\n  use at least 56 units of power:\nSample Case #3 is also like Sample Case #1, but now with C} = 1. Here, BALL-E\n  needs at least 54 units of power:\nIn Sample Case #4, one optimal strategy is for BALL-E to move to station -1000000000, get\n  the 1 ball there, move to station 1000000000, get the 0 ball there, and then\n  return to station 0 to deposit both of them.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.The first line of each test case contains two integers, N} and C}: the number of balls and the\n  amount of power units needed to change the shape of a ball, respectively.The next N} lines describe the positions (i.e., station numbers) and the shapes of the balls.\n  The i-th line contains two integers, X_i} and S_i}: the position and the shape of the\n  i-th ball, respectively.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is theminimumnumber\n  of units of power needed to transfer all of the balls to the warehouse, as described above.",
        "sample_input": "4\n5 0\n3 0\n6 0\n8 0\n10 1\n15 1\n5 10\n3 0\n6 0\n8 0\n10 1\n15 1\n5 1\n3 0\n6 0\n8 0\n10 1\n15 1\n2 0\n1000000000 0\n-1000000000 1",
        "sample_output": "Case #1: 52\nCase #2: 56\nCase #3: 54\nCase #4: 4000000000",
        "source": "2022\\round_2\\i_o_bot"
    },
    {
        "problem_name": "Pixelated Circle",
        "problem_statement": "Typical computer images are matrices of pixels, with each pixel being a small square of a specific\ncolor. Drawing lines that are not perfectly parallel to the axes of the pixel matrix results\nin imperfections. Drawing circles is an extreme example where those imperfections arise.\nSuppose we have a picture consisting\nof 2R}+1 by 2R}+1 pixels, and we number the rows and columns of pixels between\n-R} and R}, such that the center pixel is at row 0 and column 0. Initially,\nall pixels are white. Then, a circle of radius R} and centered in the picture can be drawn in\nblack by the following pseudocode, whereset_pixel_to_black(x, y)makes the\npixel at row x and column y be colored black.\nNotice that some pixels may be set to black more than once by the code, but the operation is\nidempotent (that is, callingset_pixel_to_blackon a pixel that is already black changes\nnothing).\nThe following is pseudocode for a function to draw a filled circle\n(starting from an all-white picture).\nAnd finally, the following is pseudocode to incorrectly draw a filled circle:\nGiven R}, calculate the number of pixels that would have different colors between a picture in\nwhichdraw_circle_filled(R}) is called and another one in whichdraw_circle_filled_wrong(R}) is called.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing a single integer R}, the radius\nof the circle to draw.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe number of pixels that would have different colors between a picture in\nwhichdraw_circle_filled(R}) is called and another one in whichdraw_circle_filled_wrong(R}) is called.\nMemory limit: 1 GB.1 <= T} <= 100.\nTime limit: 10 seconds.1 <= R} <= 100.\nTime limit: 15 seconds.1 <= R} <= 10^5.\nIn Sample Case #1, 21 pixels are drawn in black by callingdraw_circle_filled(2)(shown in the left picture). 17 pixels are drawn in black\n    by callingdraw_circle_filled_wrong(2)(shown in the right picture). Four pixels\n    would have different colors between the two pictures: (-1, -1), (-1, 1),\n    (1, -1), and (1, 1), where (x, y) represents the pixel at row x and\n    column y, with the rows and columns numbered as described in the statement.\n\nIn Sample Case #2, the following pictures are the images generated by callingdraw_circle_filled(8)(left) anddraw_circle_filled_wrong(8)(right).\n\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case is described in a single line containing a single integer R}, the radius\nof the circle to draw.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is\nthe number of pixels that would have different colors between a picture in\nwhichdraw_circle_filled(R}) is called and another one in whichdraw_circle_filled_wrong(R}) is called.",
        "sample_input": "3\n2\n8\n50",
        "sample_output": "Case #1: 4\nCase #2: 24\nCase #3: 812",
        "source": "2022\\round_2\\pixelated_circle"
    },
    {
        "problem_name": "Saving the Jelly",
        "problem_statement": "Mr. Jolly teaches football (or soccer, for US speakers) to N} children numbered from 1 to N}.\n  He has taken to leaving sweets on the field where the games take place, one for each child.\n  After the game is finished, each child can grab and eat one sweet as their reward.\nThe children are tired after games, so each child wants to grab the sweet closest to them (using Euclidean distance).\n  This could lead to fights — if the same sweet is closest to two or more children.\n  To avoid that, after the game all the children stop where they are, and Mr. Jolly calls out their\n  names, one by one. When a child's name is called, they grab the closest sweet to them (out of the ones\n  that weren't already grabbed, of course). In the case where two or more sweets are tied for the\n  smallest distance, Mr. Jolly can decide which one the child grabs.\n\nThis has worked very well for Mr. Jolly for a while now, but today disaster struck! While laying\n  out the sweets, Mr. Jolly accidentally dropped his blueberry jelly that he planned to eat\n  after all the children go home. So now there are N} children on the field, and N}+1\n  sweets. The sweets are numbered from 1 to N} + 1, with sweet 1 being Mr. Jolly's blueberry\n  jelly. Is there a way for Mr. Jolly to save his blueberry jelly by calling the children's names in\n  such an order that the blueberry jelly is the one sweet left over?\nThe first line of the input gives the number of test cases, T}. T} test cases follow. Each test\n  begins with a line containing a single integer, N}, the number of children on the field. The next\n  N} lines describe the positions of the children. Each of these lines contains two integers,\n  X_i} and Y_i}, representing the position of the i⁠-th child after the game ends.\n  Then there are N}+1 more lines that describe the positions of sweets after the game, where the\n  first of the sweets is Mr. Jolly's blueberry jelly. Each of these lines contains two integers,\n  X_j} and Y_j}, representing the position of the j⁠-th sweet.\nFor each test case, output one line containingCase #x: y,\n  where x is the test case number (starting from 1) and y isIMPOSSIBLEif\n  there is no way Mr. Jolly can choose the children (and break ties for the closest sweet) to leave\n  his blueberry jelly uneaten. Otherwise, if Mr. Jolly can save his blueberry jelly, y isPOSSIBLE. If Mr. Jolly can save his jelly, output N} additional lines representing\n  the order the children will go and which jellies they will pick. The i⁠-th line\n  should contain two integers A_i and B_i representing that child A_i will go next\n  and will pick sweet B_i. The sweet B_i must be the closest (or tied for the closest)\n  sweet to child A_i when they go to pick their sweet.\nMemory limit: 1 GB.1 <= T} <= 100.-10^9 <= X_i} <= 10^9, for all i.-10^9 <= Y_i} <= 10^9, for all i.-10^9 <= X_j} <= 10^9, for all j.-10^9 <= Y_j} <= 10^9, for all j.\nTime limit: 10 seconds.1 <= N} <= 10.\nTime limit: 45 seconds.1 <= N} <= 1000.\nSample Case #1 is illustrated in the image above. Notice that each child is equally close to\n  each of the two non-blueberry-jelly sweets. In our solution, Mr. Jolly assigns the second sweet\n  to the second child and the third sweet to the first child, successfully leaving the first sweet\n  (the blueberry jelly) for himself.\nIn Sample Case #2, the sole child is closer to the blueberry jelly than to the other sweet, so\n  Mr. Jolly cannot prevent his precious blueberry jelly from being eaten.\nIn Sample Case #3, we present one of many solutions; it is actually possible to call the children\n  in any order.\nIn Sample Case #4, note that children might share the same position, sweets might share the same\n  position, and children and sweets might share the same position.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow. Each test\n  begins with a line containing a single integer, N}, the number of children on the field. The next\n  N} lines describe the positions of the children. Each of these lines contains two integers,\n  X_i} and Y_i}, representing the position of the i⁠-th child after the game ends.\n  Then there are N}+1 more lines that describe the positions of sweets after the game, where the\n  first of the sweets is Mr. Jolly's blueberry jelly. Each of these lines contains two integers,\n  X_j} and Y_j}, representing the position of the j⁠-th sweet.",
        "output_description": "For each test case, output one line containingCase #x: y,\n  where x is the test case number (starting from 1) and y isIMPOSSIBLEif\n  there is no way Mr. Jolly can choose the children (and break ties for the closest sweet) to leave\n  his blueberry jelly uneaten. Otherwise, if Mr. Jolly can save his blueberry jelly, y isPOSSIBLE. If Mr. Jolly can save his jelly, output N} additional lines representing\n  the order the children will go and which jellies they will pick. The i⁠-th line\n  should contain two integers A_i and B_i representing that child A_i will go next\n  and will pick sweet B_i. The sweet B_i must be the closest (or tied for the closest)\n  sweet to child A_i when they go to pick their sweet.",
        "sample_input": "4\n2\n-3 0\n-1 0\n3 0\n-2 -1\n-2 1\n1\n0 0\n1 1\n2 2\n3\n10 0\n-10 0\n0 0\n0 5\n-1 0\n5 0\n0 -5\n2\n3 4\n3 4\n5 7\n3 4\n5 7",
        "sample_output": "Case #1: POSSIBLE\n2 2\n1 3\nCase #2: IMPOSSIBLE\nCase #3: POSSIBLE\n3 2\n2 4\n1 3\nCase #4: POSSIBLE\n1 2\n2 3",
        "source": "2022\\round_2\\saving_the_jelly"
    },
    {
        "problem_name": "Spiraling Into Control",
        "problem_statement": "As punishment for being naughty, Dante has been trapped in a strange house with many rooms.\nThe house is an N} \\times N} grid of rooms, with N} odd and greater than 1. The\nupper left room is numbered 1, and then the other rooms are numbered\n2, 3, ..., N}^2, in a clockwise spiral pattern. That is, the numbering proceeds\nalong the top row of the grid and then makes a 90 degree turn to the right whenever a grid boundary\nor an already numbered room is encountered, and finishes in the central room of the grid. Because\nN} is odd, there is always a room in the exact center of the house, and it is always numbered\nN}^2.\nFor example, here are the room numberings for houses with N} = 3 and N} = 5:\n\nDante starts off in room 1 and is trying to reach the central room (room N}^2).\nThroughout his journey, he can only make moves from his current room to higher-numbered, adjacent\nrooms. (Two rooms must share an edge — not just a corner — to be adjacent.)\nDante knows that he could walk from room to room in consecutive numerical order — i.e., if he\nis currently in room x, he would move to room x+1, and so on. This would take\nhim exactly N}^2 - 1 moves. But Dante wants to do things his way! Specifically, he wants to\nreach the central room in exactly K} moves, for some K} strictly less than N}^2 - 1.\nDante can accomplish this by taking one or moreshortcuts. A shortcut is a move between\nrooms that are not consecutively numbered.\nFor example, in the 5 \\times 5 house above,If Dante is at 1, he cannot move to 17, but he can move to 2 or to\n    16. The move to 2 is not a shortcut, since 1 + 1 = 2. The move to\n    16 is a shortcut, since 1 + 1 != 16.From 2, it is possible to move to 3 (not a shortcut) or to 17 (a shortcut),\n    but not to 1, 16, or 18.From 24, Dante can only move to 25 (not a shortcut).It is not possible to move out of room 25.As a specific example using the 5 \\times 5 house above, suppose that K} = 4. One\noption is for Dante to move from 1 to 2, then move from 2 to 17 (which is\na shortcut), then move from 17 to 18, then move from 18 to 25 (which is\nanother shortcut). This is illustrated below (the red arrows represent shortcuts):Can you help Dante find a sequence of exactly K} moves that gets him to the central room, or\n  tell him that it is impossible?InputThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of one line with two integers N} and K}, where N} is the dimension of\nthe house (i.e. the number of rows of rooms, which is the same as the number of columns of rooms),\nand K} is the exact number of moves that Dante wants to make while traveling from room 1\nto room N}^2.OutputFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1).If no valid sequence of exactly K} moves will get Dante to the central room, y must beIMPOSSIBLE.Otherwise, y must be an integer: the number of times that Dante takes a shortcut, as\ndescribed above. (Notice that because Dante wants to finish in strictly less than\nN}^2 - 1 moves, he must always use at least one shortcut.) Then, output y more lines\nof two integers each. The i-th of these lines represents the i-th time in Dante's\njourney that he takes a shortcut, i.e., he moves from some room a_i to another room b_i\nsuch that a_i + 1 < b_i.Notice that because these lines follow the order of the journey, a_i < a_{i+1} for all\n1 <= i < y.LimitsMemory limit: 1 GB.1 <= T} <= 100.1 <= K} < N}^2 - 1. N} \\mod 2 \\equiv 1. (N} is odd.)Test Set 1 (Visible Verdict)Time limit: 5 seconds.3 <= N} <= 9.Test Set 2 (Visible Verdict)Time limit: 20 seconds.3 <= N} <= 39.Test Set 3 (Hidden Verdict)Time limit: 20 seconds.3 <= N} <= 9999.SampleSample Inputsave_altcontent_copyCopied!4\n5 4\n5 3\n5 12\n3 1Sample Outputsave_altcontent_copyCopied!Case #1: 2\n2 17\n18 25\nCase #2: IMPOSSIBLE\nCase #3: 2\n11 22\n22 25\nCase #4: IMPOSSIBLESample Case #1 is described in the problem statement. Dante's route is\n  1 \\to 2 \\to 17 \\to 18 \\to 25. Because 1 \\to 2 and\n  17 \\to 18 are moves between consecutively numbered rooms, they are not included in the\n  output. Only the shortcuts (2 \\to 17 and 18 \\to 25) are included.In Sample Case #2, there is no solution. (Recall that there is no way for Dante to move\n  diagonally.)In Sample Case #3, observe that 22 appears both as the end of one shortcut and the\n  start of the next. It would not be valid to include the line11 22 25in the output;\n  each line must represent a single shortcut.There is another solution that uses only one shortcut: Dante can\n  move from 1 \\to 2 \\to 3 \\to 4 \\to 5 \\to 6, then move from\n  6 \\to 19 (a shortcut), then move from\n  19 \\to 20 \\to 21 \\to 22 \\to 23 \\to 24 \\to 25. This is also valid; there is no requirement\n  to minimize (or maximize) the number of shortcuts taken.In Sample Case #4, Dante cannot get to the central room (9, in this case) in just one move.\nAs a specific example using the 5 \\times 5 house above, suppose that K} = 4. One\noption is for Dante to move from 1 to 2, then move from 2 to 17 (which is\na shortcut), then move from 17 to 18, then move from 18 to 25 (which is\nanother shortcut). This is illustrated below (the red arrows represent shortcuts):\n\nCan you help Dante find a sequence of exactly K} moves that gets him to the central room, or\n  tell him that it is impossible?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of one line with two integers N} and K}, where N} is the dimension of\nthe house (i.e. the number of rows of rooms, which is the same as the number of columns of rooms),\nand K} is the exact number of moves that Dante wants to make while traveling from room 1\nto room N}^2.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1).\nIf no valid sequence of exactly K} moves will get Dante to the central room, y must beIMPOSSIBLE.\nOtherwise, y must be an integer: the number of times that Dante takes a shortcut, as\ndescribed above. (Notice that because Dante wants to finish in strictly less than\nN}^2 - 1 moves, he must always use at least one shortcut.) Then, output y more lines\nof two integers each. The i-th of these lines represents the i-th time in Dante's\njourney that he takes a shortcut, i.e., he moves from some room a_i to another room b_i\nsuch that a_i + 1 < b_i.\nNotice that because these lines follow the order of the journey, a_i < a_{i+1} for all\n1 <= i < y.\nMemory limit: 1 GB.1 <= T} <= 100.1 <= K} < N}^2 - 1. N} \\mod 2 \\equiv 1. (N} is odd.)\nTime limit: 5 seconds.3 <= N} <= 9.\nTime limit: 20 seconds.3 <= N} <= 39.\nTime limit: 20 seconds.3 <= N} <= 9999.\nSample Case #1 is described in the problem statement. Dante's route is\n  1 \\to 2 \\to 17 \\to 18 \\to 25. Because 1 \\to 2 and\n  17 \\to 18 are moves between consecutively numbered rooms, they are not included in the\n  output. Only the shortcuts (2 \\to 17 and 18 \\to 25) are included.\nIn Sample Case #2, there is no solution. (Recall that there is no way for Dante to move\n  diagonally.)\nIn Sample Case #3, observe that 22 appears both as the end of one shortcut and the\n  start of the next. It would not be valid to include the line11 22 25in the output;\n  each line must represent a single shortcut.\n\nThere is another solution that uses only one shortcut: Dante can\n  move from 1 \\to 2 \\to 3 \\to 4 \\to 5 \\to 6, then move from\n  6 \\to 19 (a shortcut), then move from\n  19 \\to 20 \\to 21 \\to 22 \\to 23 \\to 24 \\to 25. This is also valid; there is no requirement\n  to minimize (or maximize) the number of shortcuts taken.\nIn Sample Case #4, Dante cannot get to the central room (9, in this case) in just one move.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of one line with two integers N} and K}, where N} is the dimension of\nthe house (i.e. the number of rows of rooms, which is the same as the number of columns of rooms),\nand K} is the exact number of moves that Dante wants to make while traveling from room 1\nto room N}^2.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1).",
        "sample_input": "4\n5 4\n5 3\n5 12\n3 1",
        "sample_output": "Case #1: 2\n2 17\n18 25\nCase #2: IMPOSSIBLE\nCase #3: 2\n11 22\n22 25\nCase #4: IMPOSSIBLE",
        "source": "2022\\round_2\\spiraling_into_control"
    },
    {
        "problem_name": "Duck, Duck, Geese",
        "problem_statement": "In the game \"Duck, Duck, Goose\", all players but one sit on the floor and form a circle. The\nremaining player walks around the circle calling each player \"duck\" until they select one\nsitting player and, while touching their head, call them \"goose\" instead.\nAt that point, the goose chases the selecting player and our interest in the game fades.\nIn the new game \"Duck, Duck, Geese\", the walking player instead chooses a contiguous subset of\nat least two (but not all) sitting players to be \"geese\"! Furthermore, each sitting player is\nwearing a hat. Each hat is one of C} possible colors, numbered 1 through C}.\n\nFor each color i, the quantity of selected geese wearing a hat of color i\nmust be either 0 or between A_i} and B_i}, inclusive.\nCan you help count the number of choices that fulfill these requirements? Two choices are\nconsidered different if there is some player that is included in one choice but not the other.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers N} and C}: the number of sitting\nplayers and hat colors, respectively. Then, C} lines follow.\nThe i-th of these lines contains two integers A_i} and B_i}, as explained above.\nThe last line of a test case contains N} integers\nP_1}, P_2}, ..., P_N} representing that the j-th sitting player in clockwise\norder (starting from an arbitrary one) is wearing a hat of color P_j}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of sets of\nat least 2 and at most N}-1 contiguously sitting players that fulfill all the color\nrequirements.\nTime limit: 20 seconds.Memory limit: 1 GB.1 <= T} <= 100.2 <= C} <= N}.0 <= A_i} <= B_i} <= N}, for all i.1 <= P_j} <= C}, for all j.\n3 <= N} <= 1000.\n3 <= N} <= 10^5.\nIn Sample Case #1, the total number of players chosen as geese must be 2. There are only\n  three possible ways to select 2 players. The following color configurations are possible:\n  [1, 1], [1, 2], and [2, 1]. The first one has two players wearing\n  hats of color 1, so it is not valid, but the other two are valid. Therefore the answer is\n  2.\nSample Case #2 is the one illustrated in the statement, with color 1 being yellow and\n  color 2 being blue. The total number of players chosen as geese in this case\n  must be between 2 and 3, because selecting 4 geese would require at\n  least one color to be out of bounds.\n  For cases with 2 geese, the only requirement is that we do not select 2 geese both\n  wearing hats of color 1; all 5 such selections are valid.\n  If choosing 3 geese, the\n  options are [1, 2, 1],  [2, 1, 2], [1, 2, 2],  [2, 2, 1], or\n   [2, 1, 2]. All but the first one are valid, adding another 4 valid options,\n  for a total of 9.\nIn Sample Case #3, notice that there can be hat colors that nobody is wearing. In this case,\n  since there is only 1 player wearing hat color 3 and 1 is not in range,\n  the only valid way is to pick 0 players wearing that hat color.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers N} and C}: the number of sitting\nplayers and hat colors, respectively. Then, C} lines follow.\nThe i-th of these lines contains two integers A_i} and B_i}, as explained above.\nThe last line of a test case contains N} integers\nP_1}, P_2}, ..., P_N} representing that the j-th sitting player in clockwise\norder (starting from an arbitrary one) is wearing a hat of color P_j}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of sets of\nat least 2 and at most N}-1 contiguously sitting players that fulfill all the color\nrequirements.",
        "sample_input": "3\n3 2\n1 1\n1 1\n1 1 2\n5 2\n1 1\n1 2\n1 2 1 2 2\n3 3\n1 2\n1 2\n2 2\n1 1 3",
        "sample_output": "Case #1: 2\nCase #2: 9\nCase #3: 1",
        "source": "2022\\round_3\\duck_duck_geese"
    },
    {
        "problem_name": "Mascot Maze",
        "problem_statement": "The Google Coding Competitions team is setting up a new theme park. As in any good theme\npark, we want to have actors dressed up as mascots to interact with visitors. Because we\nare in a rush to open, we decided to use the letters fromCODE JAM,KICK START, andHASH CODEas mascots, for a total of 13\ndifferent mascots (the lettersACDEHIJKMORST).\nThe park's only attraction is a maze that has a set of N} rooms numbered from 1 to N}. Each\nroom has a left exit and a right exit. Each exit takes the visitor to another\nroom. Exits cannot be used in reverse; for example, if room 2 has an exit to\nroom 3, you cannot go back from room 3 to room 2 unless room 3 also\nhappens to have an exit to room 2.\n\nWe want to place exactly one of our 13 mascots in each room. Each letter\nmay be present in zero, one, or more rooms of the maze.\nTo increase variety, we want to place mascots so that\nany three (not necessarily distinct) rooms that a visitor can visit consecutively have three\ndifferent mascots.\nCan you help us choose a mascot for each room such that this goal is met, or let us know that\nit cannot be done?\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 3 lines. The first line contains a single integer N},\nrepresenting the number of rooms in the maze. The second line contains\nN} integers L_1}, L_2}, ..., L_N}, representing that the left exit from room\ni leads to room L_i}. The third and last line contains N} integers\nR_1}, R_2}, ..., R_N}, representing that the right exit from room i leads to\nroom R_i}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif there is no way to assign mascots while obeying the rules explained above. Otherwise, y\nis an N} character long string. The i-th character of y should be an uppercase letter\nfrom the setACDEHIJKMORST, representing that you wish to assign that mascot to the\ni-th room.\nMemory limit: 1 GB.1 <= T} <= 100.L_i} != i, for all i.\nR_i} != i, for all i.\n1 <= L_i} < R_i} <= N}, for all i.\nTime limit: 20 seconds.3 <= N} <= 100.\nTime limit: 45 seconds.3 <= N} <= 10^5.\nSample Case #1 is the image in the problem statement. It is possible to visit rooms 1, 2, and 1\n  consecutively (which visits room 1 twice), so the case is impossible.\nSample Case #2 has the following layout (blue arrows represent the left exits and red arrows\n  represent the right exits):\n\nOne of many valid answers is to assign mascots as indicated. Notice that although we do not\n  need to assign twoTmascots in this case, we have done so in a way that does\n  not break the rules.\nSample Cases #3 and #4 are possible, but require the use of multiple copies of some mascots.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case consists of 3 lines. The first line contains a single integer N},\nrepresenting the number of rooms in the maze. The second line contains\nN} integers L_1}, L_2}, ..., L_N}, representing that the left exit from room\ni leads to room L_i}. The third and last line contains N} integers\nR_1}, R_2}, ..., R_N}, representing that the right exit from room i leads to\nroom R_i}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isIMPOSSIBLEif there is no way to assign mascots while obeying the rules explained above. Otherwise, y\nis an N} character long string. The i-th character of y should be an uppercase letter\nfrom the setACDEHIJKMORST, representing that you wish to assign that mascot to the\ni-th room.",
        "sample_input": "4\n3\n2 1 1\n3 3 2\n6\n3 1 4 1 2 3\n5 3 5 2 4 5\n20\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 1\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 2\n19\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1 1\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 19 3",
        "sample_output": "Case #1: IMPOSSIBLE\nCase #2: TSHIRT\nCase #3: HCJKSHCJKSHCJKSHCJKS\nCase #4: CODEJAMROCKSTHEMOST",
        "source": "2022\\round_3\\mascot_maze"
    },
    {
        "problem_name": "Revenge of GoroSort",
        "problem_statement": "In this problem, when something is said to be chosen at random, it means uniformly at\n  random from among all valid possibilities, and independently of any other choice.\nCode Jam contestants oncehelped the mighty Goro sort an array of integers.\n  (You do not need to read that problem to solve this one.) Once again, Goro\n  needs your help. He has N} boxes lined up on the table in a single row, numbered\n  1 through N} from left to right.\n  Each box has exactly one ball inside. Balls are also numbered\n  1 through N}. Goro wants ball i to end up in box i, for all i.\n  That is, he wants to leave the balls in sorted order.\n  Unfortunately, that is not initially the case.\nWhen Goro bumps the table with his powerful fists, balls pop up in the air\n  and fall back in boxes. Goro can do this so accurately that exactly one ball\n  falls into each box. A ball may fall into the same box it came out of, or\n  into a different one.\nBetter yet, Goro also has the ability to assign colors to boxes before\n  each bump. Then, he can bump the table in such a way that balls coming out of\n  a box of color c always fall into a box of color c. As impressive\n  as this accuracy is, Goro does not have any more control than that. Within each color,\n  balls end up assigned to boxes at random.\n\nFor example, suppose the balls appear in the order 1, 4, 3, 6, 5, 2 (as seen above). He might choose\n  — not necessarily optimally — to give the first box the color red,\n  the second and sixth boxes the color green, and the third through\n  fifth boxes the color blue. Then, after Goro bumps the table,\nSo, for example, the probability of the bump leaving the balls in the\n  order 1, 2, 3, 5, 6, 4 is \\frac{1}{12}. If\n  Goro got this or some other non-sorted result, he\n  would have to designate a set of box colors for the next round, and so on, until\n  he eventually arrives at the sorted 1, 2, 3, 4, 5, 6. Goro can assign\n  colors to boxes in any way before each bump, regardless of previous assignments.\nCan you help Goro implement a better strategy that will efficiently sort the balls?\n  It is guaranteed that the balls start in a random non-sorted order.\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing three integers,\n  T} N} K}: the number of test cases, the number of boxes per test\n  case, and the total number of bumps allowed for all test cases combined.\n  Then, T} test cases must be processed.\nEach test case begins with the judge sending one line with N} integers,\n  with each integer from 1 to N} appearing exactly once, and with the\n  list chosen at random from all non-sorted lists. Then you must engage in a series of\n  interactions with the judge. Each interaction works as follows:\nAs usual, if the memory limit is exceeded, or your program gets a runtime\n  error, you will receive the appropriate judgment. Also, if your program\n  continues to wait for the judge after receiving a -1, your program\n  will time out, resulting in a Time Limit Exceeded error. Notice that it is\n  your responsibility to have your program exit in time to receive a Wrong\n  Answer judgment instead of a Time Limit Exceeded error.\nBe advised that the judge uses the same source of randomness each time, so\n  in the absence of other errors (e.g. Time Limit Exceeded, Memory Limit\n  Exceeded), submitting the exact same code twice will yield the same outcome\n  twice.\nTime limit: 20 seconds.Memory limit: 1 GB.T} = 1000.N} = 100.\nK} = 16500.\nK} = 12500.\nK} = 11500.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nNote that the sample interaction does not satisfy the constraints of any of\n  the test sets. It is only presented to clarify the input and output format.\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2022\\round_3\\revenge_of_gorosort"
    },
    {
        "problem_name": "Win As Second",
        "problem_statement": "Ueli and Vreni are playing a game. The game's board is atreewith N} vertices,\n  all initially colored blue.\n  They alternate turns, with Ueli going first. In each turn, a player must choose a\n  blue vertex, together with any subset (possibly none or all) of its blue neighbors,\n  and color all those vertices red. If at the start of a players' turn, all vertices are\n  red, then that player loses the game and the other player wins the game.\nIn the example game below, Ueli colored vertex 3 red in their first turn.\n  Then, Vreni chose vertex 2 for their turn and colored both it and its neighbor\n  (vertex 1) red. Because all vertices are now red, Ueli loses and Vreni wins.\n\nUeli and Vreni have noticed that it is much easier for Ueli to win this game because he has the\n  first turn. Therefore they have adopted the following procedure: first, Ueli chooses an\n  integer N}. Then, Vreni chooses any tree with N} vertices. And then they start playing\n  as described above, with Ueli taking the first turn.\nVreni is hopeful that being able to choose the tree can help her overcome the disadvantage\n  of going second. Can you demonstrate how Vreni can win games in this setup?\nThis is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of ourFAQ.\nInitially, your program should read a single line containing an integer,\n  T}, the number of test cases. Then, T} test cases must be processed.\nFor each test case, your program must first read a line containing a single integer N},\n  the number of vertices that Ueli has chosen.\n  Then, your program must output N}-1 lines describing the edges of the tree Vreni\n  should choose. The nodes of the tree are numbered 1 through N}.\n  Each line must represent a distinct edge of the tree with 2 integers between\n  1 and N}: the two vertices the edge connects.\n  The edges must represent a tree.\n  The two integers within a line may be in either order, and the N}-1 lines themselves may\n  be in any order.\nAfter that, your program must read a line containing a single integer M}, the number of games\n  that you need to play on this tree. These games are played independently; in other words,\n  all vertices of the tree are blue at the start of each game.\nFor each of the M} games, you need to process some number of exchanges until the game is\n  over. Each exchange consists of a turn from each player.\nFor each exchange, your program must read two lines describing Ueli's turn first.\n  The first of those lines will contain an\n  integer K}, denoting the number of blue vertices to be colored red.\n  The second of those lines will contain K} distinct integers A_1}, A_2}, ..., A_K}\n  describing the blue vertices to be colored red. K} will be at least 1, and each A_i}\n  will be between 1 and N}, inclusive. Vertices A_2}, A_3}, ..., A_K} will all be\n  neighbors of vertex A_1}.\nAfter that, your program must output Vreni's choice for their turn in the same format:\n  the first line with the number of blue vertices to be colored red, followed by the second\n  line with the numbers of those vertices, in such an order that all vertices\n  except the first one are neighbors of the first one.\nIf all vertices are red after Vreni's turn, it means that Vreni has won and this game is over.\n  The next game starts immediately if there is one. If this was the last game for this test case,\n  then the next test case starts immediately if there is one. If this was the last test case,\n  the judge will send no further input to your program, and the program must send no further output.\nOn the other hand, if all vertices are red after Ueli's move,\n  it means that Vreni has lost and therefore your program did not pass the test case.\n  In this case, instead of starting a new exchange by printing the last move\n  that colors all remaining blue vertices red, the judge will print a single number -1\n  and will not print any further output, and will not process any further games or test cases.\nIf the judge receives an invalidly formatted or invalid line (like outputting an\n  unexpected number of integers, or integers out of range, or outputting a set of edges\n  that do not form a tree, or trying to color a vertex\n  that is already red, or trying to color a vertex that is not a neighbor of the first\n  vertex colored in this turn) from your program at any moment, the judge\n  will also print a single number -1 and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\nThe judge is deterministic. In other words, if you make two attempts that print the\n  same numbers, you will get the same inputs from the judge. However, of course the judge can make\n  different moves in different games on the same tree.\nTime limit: 60 seconds.Memory limit: 1 GB.1 <= M} <= 50.\nT}=1.N}=30.\n1 <= T} <= 10.31 <= N} <= 40.No two test cases use the same value of N}.\nYou can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use ourinteractive runnerfor that. For more information, read the instructions in comments in that\n  file, and also check out theInteractive Problems sectionof the FAQ.\nInstructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it isNOTthe real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check theCoding sectionof the FAQ to make sure that you are using the same compiler as us.\nDownload testing tool\nNote that the testing tool just makes random choices for Ueli unless it can win in one turn.\n  Therefore, it might be easier to win against the testing tool than against the real judge, which\n  will try harder to win.\nNote that the sample interaction does not satisfy the constraints of either test set,\n  as its N} values are too small. It is only presented to clarify the input and output format.\nBelow is an illustration of Case #2, Game #1 at the beginning and after each turn:\n\nBelow is an illustration of Case #2, Game #2 at the beginning and after each turn:\n\n",
        "input_description": "No input description found.",
        "output_description": "No output description found.",
        "sample_input": "No sample input found.",
        "sample_output": "No sample output found.",
        "source": "2022\\round_3\\win_as_second"
    },
    {
        "problem_name": "Goose, Goose, Ducks?",
        "problem_statement": "The first international Geese conference just wrapped up, and even though it should have been a\nhappy occasion, it was bittersweet. The organizers found a paper with detailed plans of a duck\ninfiltration. Now, they are trying to identify the infiltrating group from among the attendees.\nThe document that they found contained a list of M} triples of integers\n(X_i}, Y_i}, C_i}) meaning the ducks would meet exactly C_i} seconds after the\nstart of the conference at point (X_i}, Y_i}), which is X_i} meters east and\nY_i} meters north of the center of the conference floor.\nEach goose may or may not have been at those specific points at\nthose specific times, but every duck certainly was.\nBoth ducks and geese walk at a maximum speed of one meter per second,\nwhich means an attendee that is at point (x, y) at time\nt can reach any point of the form (x + \\Delta_{x}, y + \\Delta_{y})\nby time t + \\Delta_{t} as long as\n{\\Delta_{x}}^2 + {\\Delta_{y}}^2 <= {\\Delta_{t}}^2.\nEach attendee's position at time 0 can be any point, independently of the other attendees.\n\nAfter the discovery, the group held a questioning session to try to identify the ducks.\nDuring that session, attendees issued a series of statements, one at a time.\nThe j-th of those, in the order they were issued, was made by attendee A_j},\nclaiming that both they and attendee B_j}\nwere at point (U_j}, V_j}) exactly D_j} seconds after the start of the conference.\nPoints in statements may or may not be points where duck meetings happened.\nStatements from geese are always true, but ducks may lie.\n  Moreover, ducks know which attendees are ducks and which are geese. To avoid getting caught\n  easily, ducks only make statements that are consistent with all statements previously made\n  by geese. Note that statements made by geese are consistent\n  with all ducks being at all duck meetings.\nIt may not be possible to determine all the ducks with the information provided.\n  However, knowing the minimum number of ducks\n  will at least provide a lower bound on the level of duck activity. Note that there was at least\n  one duck. Find this minimum number of ducks.\nFormally, ahypothesisH is a partition of all attendees into a set of ducks\n(named H-ducks) and geese (named H-geese).\nH is consistent with a set of statements S\nif there exists a path for each attendee moving at most one meter per second\nsuch that:\nA hypothesis H isfeasibleunder a set of statements S if:\nNotice that the hypotheses H such that H-ducks contains all attendees is always feasible.\nFind the minimum size of H-ducks over all feasible hypotheses H.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three integers, N}, M}, and S}, representing\nthe numbers of attendees, duck meetings, and statements, respectively.\nThe next M} lines each describe a different duck meeting with\nthree integers X_i}, Y_i}, and C_i}, representing that there was a meeting at point\n(X_i}, Y_i}), held exactly C_i} seconds after the start of the conference. Then, the last\nS} lines of a test case each describe a statement. The j-th of these lines describes\nthe j-th issued statement with five integers A_j}, B_j}, U_j}, V_j}, and D_j},\nrepresenting that attendee A_j} stated that they and attendee B_j} were both at point\n(U_j}, V_j}) exactly D_j} seconds after the start of the conference.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of ducks\nthat might have infiltrated the conference.\nMemory limit: 1 GB.1 <= T} <= 50.-10^9 <= X_i} <= 10^9, for all i.-10^9 <= Y_i} <= 10^9, for all i.1 <= C_i} <= 10^9, for all i.C_i} < C_{i+1}}, for all i.(X_i} - X_{i+1}})^2 + (Y_i} - Y_{i+1}})^2 <= (C_i} - C_{i+1}})^2, for all i.1 <= A_j} <= N}, for all j.1 <= B_j} <= N}, for all j.A_j} \\ne B_j}, for all j.-10^9 <= U_j} <= 10^9, for all j.-10^9 <= V_j} <= 10^9, for all j.1 <= D_j} <= 10^9, for all j.(A_j}, B_j}, U_j}, V_j}, D_j}) \\ne (A_k}, B_k}, U_k}, V_k}, D_k}), for all j \\ne k.\nTime limit: 20 seconds.2 <= N} <= 50.1 <= M} <= 50.1 <= S} <= 50.\nTime limit: 60 seconds.2 <= N} <= 10^5.1 <= M} <= 10^5.1 <= S} <= 10^5.\nIn Sample Case #1, attendee 1 being the only duck is a feasible hypothesis.\nIn Sample Case #2, attendees 2 and 4 being the only ducks is a feasible hypothesis.\n  Note that there is at least one duck, so all attendees being geese is not feasible.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing three integers, N}, M}, and S}, representing\nthe numbers of attendees, duck meetings, and statements, respectively.\nThe next M} lines each describe a different duck meeting with\nthree integers X_i}, Y_i}, and C_i}, representing that there was a meeting at point\n(X_i}, Y_i}), held exactly C_i} seconds after the start of the conference. Then, the last\nS} lines of a test case each describe a statement. The j-th of these lines describes\nthe j-th issued statement with five integers A_j}, B_j}, U_j}, V_j}, and D_j},\nrepresenting that attendee A_j} stated that they and attendee B_j} were both at point\n(U_j}, V_j}) exactly D_j} seconds after the start of the conference.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the minimum number of ducks\nthat might have infiltrated the conference.",
        "sample_input": "2\n2 1 2\n1 2 3\n1 2 1 1 1\n2 1 2 2 2\n4 2 4\n4 3 10\n-4 -3 20\n1 3 4 3 11\n2 4 0 0 16\n3 1 6 3 9\n4 2 0 0 16",
        "sample_output": "Case #1: 1\nCase #2: 2",
        "source": "2022\\world_finals\\goose_goose_ducks"
    },
    {
        "problem_name": "Schrödinger and Pavlov",
        "problem_statement": "The story, all names, characters, and incidents portrayed in this problem statement are\nfictitious. No identification with actual persons is intended or should be inferred.\nIt is 1935 and a meeting between two Nobel prize winners is producing astonishing results.\nSchrödinger, a famous physicist, invited Pavlov, a famous physiologist, to see his experiments\nwith cats in boxes. Pavlov brought his dog with him to keep up with his own\nresearch, and the combination proved interesting, to say the least.\nSchrödinger had a row of N} boxes. Some boxes definitely contain a cat, some boxes definitely\ndo not contain a cat, and some boxes may or may not contain a cat. Each box is only big enough\nto hold a single cat. Each box is also equipped with a special quantum tunnel, that allows\nthe cat in the box to move to some other specific box if the destination was empty. The tunnels\nwork in a single direction.\nCats are usually mellow and quiet and do not use the tunnels unless they become startled. When a\nthird unannounced guest rings the bell, Pavlov's dog gets excited immediately and starts\nrunning and barking. The dog starts at box 1 and runs towards box N}. \nAs the dog runs, it passes right next to each box, one at a time. When\nit passes next to a box that contains a cat, the cat in that box becomes startled. The\nstartled cat checks the available tunnel and, if the destination box is empty, uses it to escape.\nIf the destination box is occupied, the cat stays in its current box. The same cat can be startled\nmore than once if they move to a box the dog will get to afterwards, and will proceed in the same\nway every time it is startled (using only the newly available tunnel each subsequent time).\n\nAfter Pavlov's dog finally stops right next to the last box, Pavlov asks Schrödinger whether\nthere is a cat in that last box. Schrödinger, true to his fame, replies that he does not know.\nPavlov notices that the answer may depend on whether or not there were cats in the unknown boxes.\nMoreover, he also notices that because there are k unknown boxes, there are 2^k\npossibleinitial configurations, one for each combination of statuses of the unknown\nboxes. Pavlov tells Schrödinger that they should try to calculate how\nmany of the 2^k initial configurations would result in having a cat in the last box. You are\nasked to recreate that calculation. Since the output can be a really big number, we only ask you to\noutput the remainder of dividing the result by the prime 10^9+7 (1000000007).\nNeither cats, nor dogs, nor Nobel prize winners were harmed in the making of this problem\n  statement.\nThe first line of the input gives the number of test cases, T}. T} test cases follow, each\ndescribed by exactly three lines. The first line of a test case contains a single integer\nN}, the number of boxes in Schrödinger's experiment. Boxes are numbered between 1\nand N}, in the order Pavlov's dog passes them by. The second line of a test case\ncontains a single string S} of N} characters. The i-th character of S} (counting\nfrom left to right) represents the contents of box i: it is an\nuppercase 'C' if the box contains a cat, a period '.' if the\nbox does not contain a cat and a question mark '?' if it is unknown whether\nthe box contains a cat or not. The third line of a test case contains N} integers\nB_1}, B_2}, ..., B_N}, representing that there is a tunnel going out of box i\nand into box B_i}, for all i.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of initial\nconfigurations that would result\nin a cat being in the last box and unable to escape despite hearing the barking, modulo the prime\n 10^9+7 (1000000007).\nTime limit: 10 seconds.Memory limit: 1 GB.1 <= T} <= 1234.the length of S} = N}.Each character of S} is either an upper case 'C', a period '.' or\n  a question mark '?'.1 <= B_i} <= N}, for all i.B_i} != i, for all i.\n1 <= N} <= 100.i - 5 <= B_i} <= i + 5, for all i.\n  (All tunnels connect to nearby boxes.)\n1 <= N} <= 5000.\nSample Case #1 is illustrated in the problem statement. There are 4 possible configurations:...C: the dog runs through the first 3 boxes without changing anything\n  because there is no cat there. Then, when it gets to the last box, the cat hears it and escapes\n  to box 3. Therefore, there is no cat in the last box in this case.C..C: when the dog barks near box 1, that startles the cat that\n  goes through the tunnel to get to box 2, which was empty. Then, the same cat\n  gets startled again when the dog barks near box 2 and gets to box 3. And when\n  the dog barks next to box 3, the cat hears it and returns to box 1. Therefore,\n  when the dog gets to box 4 and the other cats hears it, box 3 is empty so the\n  cat escapes and the last box ends up empty..C.C: This case is very similar to the previous one. After the dog goes through\n  the first box and nothing happens, the state is the same as before, so the ultimate result\n  is the same: last box empty.CC.C: In this case, the cat in the first box cannot escape when it hears the\n  dog, so it remains in box 1. Then, when the cat in box 2 gets startled it escapes to\n  box 3 leaving a state ofC.CC. When the dog gets to the box 3, the cat\n  currently there cannot escape to box 1 so the state remains the same. Finally, when the\n  dog gets to the last box, the cat that is there cannot escape because box 3 is occupied\n  this time. So, in this case, the last box ends up with a cat after the dog ends its journey.Out of the 4 possibilities, only 1 (the last one) ends up with a cat in the last box,\n  so the answer is 1.\nIn Sample Case #2, the tunnels are set up the same as in Sample Case #1. Since no tunnel ends\n  at the last box, the configurations that start with no cat at the last box will also not end with\n  a cat there, so we do not need to count them. Then, we have 8 additional configurations. The\n  4 we considered for Sample Case #1, out of which only 1 ends up with a cat at the last\n  box. The remaining 4 configurations are:..CC,C.CC,.CCC,CCCC. From these additional 4 configurations, only in the\n  last one listed a cat ends up in the last box, for a total of 2 overall.\nIn Sample Case #3, notice that for a cat to remain in the last box after the dog barks near it,\n  both that box and box 5 must be occupied then (otherwise, either there is no cat in the\n  last box, or it will escape to box 5). Since there is no tunnel going into box 5,\n  a cat must start there. As long as there is another cat in any other box, box 6 will get\n  (or remain) occupied before the cat in box 5 gets an opportunity to escape, so all of those\n  will end up with a cat in the last box. As we argued before, a single cat is not enough. Thus,\n  we need to count the number of configurations with a cat in box 5 and at least one other cat.\n  There are 2^4 configurations with a cat in box 5, and out of those, only 1 has\n  no other cat, so the answer is 2^4-1=15.\nIn Sample Case #4, in all of the 2^k ways in which the k unknown boxes may exist\n  a cat would be left in the last box.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow, each\ndescribed by exactly three lines. The first line of a test case contains a single integer\nN}, the number of boxes in Schrödinger's experiment. Boxes are numbered between 1\nand N}, in the order Pavlov's dog passes them by. The second line of a test case\ncontains a single string S} of N} characters. The i-th character of S} (counting\nfrom left to right) represents the contents of box i: it is an\nuppercase 'C' if the box contains a cat, a period '.' if the\nbox does not contain a cat and a question mark '?' if it is unknown whether\nthe box contains a cat or not. The third line of a test case contains N} integers\nB_1}, B_2}, ..., B_N}, representing that there is a tunnel going out of box i\nand into box B_i}, for all i.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the number of initial\nconfigurations that would result\nin a cat being in the last box and unable to escape despite hearing the barking, modulo the prime\n 10^9+7 (1000000007).",
        "sample_input": "4\n4\n??.C\n2 3 1 3\n4\n????\n2 3 1 3\n6\n?.????\n6 6 6 6 6 5\n34\n????????????????????????????????CC\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 33",
        "sample_output": "Case #1: 1\nCase #2: 2\nCase #3: 15\nCase #4: 294967268",
        "source": "2022\\world_finals\\schrdinger_and_pavlov"
    },
    {
        "problem_name": "Slide Parade",
        "problem_statement": "Gooli is a huge company that owns B} buildings in a hilly area, numbered 1 through B}. Six years ago, Goolibuilt slidesthat allowed employees to go from one building to another.\nEach slide allows anyone to go from the slide's origin building to the slide's destination\nbuilding, but not the other way around.\nGooli's CEO is very proud of their slides and wants to organize a parade through the slides.\nShe has tasked Melek, Gooli's Head of Transportation and a problem-solving enthusiast, with\ndesigning the parade's route.\n\nShe has some requirements for the parade route in mind:\nGiven the layout of buildings and slides, help Melek find a route that satisfies\nall of the CEO's requirements, if one exists.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers B} and S}: the\nnumber of buildings and slides, respectively.\nThen, S} lines follow. The i⁠-⁠th of these lines contains two integers\nU_i} and V_i}, indicating that the i⁠-⁠th slide goes from\nbuilding U_i} to building V_i}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1). If there is no route that\nfulfills all the requirements, y must beIMPOSSIBLE. If there is,\ny must be an integer between S}+1 and 10^6+1, inclusive,\nrepresenting the length of one such route you want to exhibit. In that case,\noutput another line containing y integers z_1\\ z_2\\ ...\\ z_y,\nwhere z_j is the\nj⁠-⁠th building in your proposed route. Notice that\nz_1 = z_y = 1 and that each building must appear the same number of times among\nthe z_j, except for building 1, which appears exactly one extra time.\nMemory limit: 1 GB.1 <= T} <= 100.1 <= U_i} <= B}, for all i.1 <= V_i} <= B}, for all i.U_i} \\ne V_i}, for all i.(U_i}, V_i}) != (U_j}, V_j}), for all i != j.\nTime limit: 10 seconds.2 <= B} <= 10.2 <= S} <= 10.\nTime limit: 20 seconds.2 <= B} <= 200.2 <= S} <= 5000.\nIn Sample Case #1, another acceptable parade route is one that goes from building 1 to\n  building 2 and then back for a total of 2 steps.\n\nIn Sample Case #2, there are no slides leading to building 1, so no valid parade can exist.\n\nIn Sample Case #3, the parade route the sample output exhibits goes through each building twice.\n\nSample Case #4 is pictured below.\n\nSample Case #5 is the one illustrated in the problem statement. In the parade route in the sample output,\n  the slides from 2 to 3 and\n  from 4 to 1 are used twice, but the rest of the slides are used only once each.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing two integers B} and S}: the\nnumber of buildings and slides, respectively.\nThen, S} lines follow. The i⁠-⁠th of these lines contains two integers\nU_i} and V_i}, indicating that the i⁠-⁠th slide goes from\nbuilding U_i} to building V_i}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1). If there is no route that\nfulfills all the requirements, y must beIMPOSSIBLE. If there is,\ny must be an integer between S}+1 and 10^6+1, inclusive,\nrepresenting the length of one such route you want to exhibit. In that case,\noutput another line containing y integers z_1\\ z_2\\ ...\\ z_y,\nwhere z_j is the\nj⁠-⁠th building in your proposed route. Notice that\nz_1 = z_y = 1 and that each building must appear the same number of times among\nthe z_j, except for building 1, which appears exactly one extra time.",
        "sample_input": "5\n2 2\n2 1\n1 2\n3 4\n2 3\n1 2\n3 2\n1 3\n3 6\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 4\n1 2\n2 1\n1 3\n3 1\n4 6\n1 2\n1 4\n2 3\n3 2\n3 4\n4 1",
        "sample_output": "Case #1: 7\n1 2 1 2 1 2 1\nCase #2: IMPOSSIBLE\nCase #3: 7\n1 2 3 1 3 2 1\nCase #4: IMPOSSIBLE\nCase #5: 9\n1 4 1 2 3 2 3 4 1",
        "source": "2022\\world_finals\\slide_parade"
    },
    {
        "problem_name": "Triangles",
        "problem_statement": "You are given a set P of N} distinct points in the two-dimensional plane.\nYou want to find a maximum set of triangles such that:\nFor example, the set of triangles depicted below meets the definition above.\n\nOn the other hand, each pair of a yellow and a red triangle in the picture below\ndoes not meet the definition.\n\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing a single integer N}. Then, N} lines follow.\nThe i-th of these lines contains two integers X_i} and Y_i} representing the coordinates\nof the i-th point.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nsize of a set of triangles with the desired properties. Then,\noutput y more lines. The j-th\nof those lines must contain p_j\\ q_j\\ r_j representing that the j⁠-⁠th triangle in your\nproposed set has the p_j-th, q_j-th, and r_j-th points in the input as vertices.\nPoints in the input are numbered starting from 1.\nTime limit: 15 seconds.Memory limit: 1 GB.1 <= T} <= 100.-10^9 <= X_i} <= 10^9, for all i.-10^9 <= Y_i} <= 10^9, for all i.(X_i}, Y_i}) != (X_j}, Y_j}), for all i != j.\n3 <= N} <= 12.\n3 <= N} <= 3000.\nSample Case #1 is illustrated below. Notice that there are other valid ways to construct\n  a maximum number of triangles.\n\nSample Case #2 is illustrated below. As before, there are other valid ways to construct 2\ntriangles.\n\nIn Sample Case #3, the 3 given points are collinear, so it is not possible to\n  make a valid triangle with them.\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing a single integer N}. Then, N} lines follow.\nThe i-th of these lines contains two integers X_i} and Y_i} representing the coordinates\nof the i-th point.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y is the maximum\nsize of a set of triangles with the desired properties. Then,\noutput y more lines. The j-th\nof those lines must contain p_j\\ q_j\\ r_j representing that the j⁠-⁠th triangle in your\nproposed set has the p_j-th, q_j-th, and r_j-th points in the input as vertices.\nPoints in the input are numbered starting from 1.",
        "sample_input": "3\n9\n8 2\n10 2\n2 0\n0 5\n2 3\n10 4\n10 0\n8 3\n2 4\n7\n0 0\n0 3\n3 0\n0 1\n1 0\n1 1\n2 2\n3\n0 0\n0 1\n0 2",
        "sample_output": "Case #1: 3\n3 4 5\n1 7 9\n6 2 8\nCase #2: 2\n2 3 1\n6 5 4\nCase #3: 0",
        "source": "2022\\world_finals\\triangles"
    },
    {
        "problem_name": "Wonderland Chase",
        "problem_statement": "Alice is trapped in Wonderland's labyrinth, being chased by the Queen of Hearts and her\nherald! The labyrinth is a set of J} junctions numbered 1 through J},\nconnected by C} bidirectional corridors.\nAlice and the Queen of Hearts take turns making moves, and each knows the location of the other\nat all times. A move (by either of them) consists of either staying at the current junction or moving to\nanother one that is connected to it by a corridor.\nThe Queen's herald, however, announces the next move the Queen makes in advance. That means\nthat before anyone makes a move, he announces the Queen's first move. Then, Alice moves first.\nThen, each time the Queen moves, she must respect the previous announcement, and then decide\nher next move so the herald can announce it. Alice hears the announcements, so she always knows the\nQueen's next move before making her own.\n\nIf Alice and the Queen are at the same junction after either of them moves, then Alice is caught.\nOtherwise, the pursuit continues. After 10^9 total moves (half of them for Alice and half\nfor the Queen), if Alice and the Queen are not in the same junction, then the Queen will give up\nand Alice will be safe.\nAlice chooses her moves optimally to escape. If she cannot escape, she chooses her moves to\nmaximize the total number of moves until she is caught. The Queen chooses her moves optimally\nto try to catch Alice in as few total moves as possible.\nGiven the labyrinth's layout and the initial locations of both the Queen and Alice,\nfind out whether Alice will be caught by the Queen and, if so, in how many moves.\nThe first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing four integers J}, C}, A}, and Q}: the\nnumber of junctions, the number of corridors, the junction where Alice starts, and the junction\nwhere the Queen starts, respectively. Then,\nC} lines follow. The i⁠-⁠th of these lines contains two integers\nU_i} and V_i}, indicating that the i⁠-⁠th corridor bidirectionally connects junctions\nU_i} and V_i}.\nFor each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isSAFEif Alice can avoid being caught for 10^9 total moves. Otherwise, y is the total number of\nmoves (including Alice's and the Queen's) that it takes for the Queen to catch Alice.\nMemory limit: 1 GB.1 <= T} <= 100.1 <= A} <= J}.1 <= Q} <= J}.A} \\ne Q}.1 <= U_i} < V_i} <= J}, for all i.(U_i}, V_i}) \\ne (U_j}, V_j}), for all i \\ne j.\nTime limit: 10 seconds.2 <= J} <= 30.1 <= C} <= 60.\nTime limit: 60 seconds.2 <= J} <= 10^5.1 <= C} <= 2 \\times 10^5.\nSample Case #1 is the one pictured in the problem statement. Alice's optimal first move is to move\n  to junction 4.\nSample Case #2 is the same as Sample Case #1 but the Queen starts at junction 2. The Queen\n  can catch Alice by first announcing a move to junction 4. If Alice were to move to junction\n  4⁠, she would be caught in 2 moves. Alice can evade capture for an\n  extra 2 moves by staying put and waiting until the Queen then moves to junction 5 where she is\n  located.\n\nIn Sample Case #3, the Queen cannot reach Alice no matter what she does.\n\nIn Sample Case #4, the Queen can begin by announcing that she will move to Alice's current\n  junction. Alice has to move before then. If Alice moves to where the Queen already is, she gets\n  caught immediately; if Alice remains in place, then she gets caught when the Queen moves. The\n  second option is better, since it requires 2 total moves (Alice's and the Queen's) instead of\n  1.\n\n",
        "input_description": "The first line of the input gives the number of test cases, T}. T} test cases follow.\nEach test case starts with a line containing four integers J}, C}, A}, and Q}: the\nnumber of junctions, the number of corridors, the junction where Alice starts, and the junction\nwhere the Queen starts, respectively. Then,\nC} lines follow. The i⁠-⁠th of these lines contains two integers\nU_i} and V_i}, indicating that the i⁠-⁠th corridor bidirectionally connects junctions\nU_i} and V_i}.",
        "output_description": "For each test case, output one line containingCase #x: y,\nwhere x is the test case number (starting from 1) and y isSAFEif Alice can avoid being caught for 10^9 total moves. Otherwise, y is the total number of\nmoves (including Alice's and the Queen's) that it takes for the Queen to catch Alice.",
        "sample_input": "4\n5 5 5 1\n1 2\n1 3\n2 4\n3 4\n4 5\n5 5 5 2\n1 2\n1 3\n2 4\n3 4\n4 5\n3 1 2 3\n1 3\n2 1 1 2\n1 2",
        "sample_output": "Case #1: SAFE\nCase #2: 4\nCase #3: SAFE\nCase #4: 2",
        "source": "2022\\world_finals\\wonderland_chase"
    }
]