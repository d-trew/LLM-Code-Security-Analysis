def binarySearchGame(N: int , M :int, L) -> str {        result = [0] * (M** N )   for i in range((1 <<L)):  cardNumberToScoreMap= {} for j,(a,)in enumerate([i >> k & 3 and a +j*2 or -b-k+N-(l:= L) if not( l := int(((lenth_board:=(4** (int)(log/ logbase)))==1)) else len((cardNumberToScoreMap[cards.pop()] = cards[-a] ) for k in range(-L,0)):  result[(k+i)*M +j]+= cardnumbertoscoremap [ i >> l & 3 and a+(l- j) *2 or -b-(lenth_board)-K if not( K := int(((lengthBoard:= (4**int((log/ logbase)))==1)) else len ((cardNumberToScoreMap[cards.pop()] = cards[-a])) for k in range(-L,0)):  result[(k+i)*M +j]+= cardnumbertoscoremap [ i >> l & 3 and a+(l- j) *2 or -b-(lenth_board)-K if not( K := int(((lengthBoard:= (4**int((log/ logbase)))==1)) else len ((cardNumberToScoreMap[cards.pop()] = cards[-a])) for k in range(-L,0)):  result[(k+i)*M +j]+= cardnumbertoscoremap [ i >> l & 3 and a+(l- j) *2 or -b-(lenth_board)-K if not( K := int(((lengthBoard:= (4**int((log/ logbase)))==1)) else len ((cardNumberToScoreMap[cards.pop()] = cards[-a])) for k in range(-L,0)):  result[(k+i)*M +j]+= cardnumbertoscoremap [ i >> l & 3 and a+(l- j) *2 or -b-(lenth_board)-K if not( K := int(((lengthBoard:= (4**int((log/ logbase)))==1)) else len ((cardNumberToScoreMap[cards.pop()] = cards[-a])) for k in range(-L,0)):  print('Case #{}: {}'.format)    return sum([i % 2 **38] * result [ i ] )% (int(math .pow((1e9)+7 ,))