def swordmaster(n, p):        attacks = [0] * n + list([int(_) -1for _ in input().split()][:-2])       defenses=  [ int(_, base) for _,base,_in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def defense(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def attack(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in attacks[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def win(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def duel(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def teach(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def learn(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def become(a, d):        return [i-j+n if i> j else n - (abs((d)%len([_for _ in defenses[int(_)]])))+1] for  _,b,(c,_),e)in zip(*[[_.strip() and _.replace(' ', '')[:-3].splitlines()]*p])]    def main():        t = int(input())
       results=[] 

      while t:          n, p=map (int , input().split ())         attacks=[0] * n + list([_ for _ in  [_.strip() and _.replace(' ', '')[:-3].splitlines()]]) ]    defenses=[[1 if i==j else None   for j,_in enumerate(defense(*a,*b))] 
       if not any(_ isNone     or len(_) ==0      else False        and [int(_.split()[p-i+n])[k] for k in range (len([_.strip() and _.replace(' ', '')[:-3].splitlines()][j]))])==attacks[c]]  for i,a,_b,(d)in zip(*[[. strip(). replace (' ','') [- 4:] . splitlines()] *p])]
    results += ["YES" if become(attack,*defense)==list([i for _ in range (n)]) else "NO"]          t -=1     print("\r".join(["Case #{}: {}".format(*a)for a,b  in enumerate((zip), results)]))if __name__ == "__main__":        
    try : main() except Exception as e   pass